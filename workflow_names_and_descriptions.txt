--- Workflow: 0001_Telegram_Schedule_Automation_Scheduled.json ---
Name: #Ô∏è‚É£Nostr #damus AI Powered Reporting + Gmail + Telegram
Description: ## #damus Threads Themes

--- Workflow: 0002_Manual_Totp_Automation_Triggered.json ---
Name: Complete Guide to Setting Up and Generating TOTP Codes in n8n üîê
Description: No description found in sticky notes.

--- Workflow: 0003_Bitwarden_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0004_GoogleSheets_Typeform_Automate_Triggered.json ---
Name: typeform feedback workflow
Description: No description found in sticky notes.

--- Workflow: 0005_Manual_Twitter_Create_Triggered.json ---
Name: New tweets
Description: No description found in sticky notes.

--- Workflow: 0006_Openweathermap_Cron_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0007_Manual_Todoist_Create_Triggered.json ---
Name: Create a new task in Todoist
Description: No description found in sticky notes.

--- Workflow: 0008_Slack_Stripe_Create_Triggered.json ---
Name: On new Stripe Invoice Payment update Hubspot and notify the team in Slack
Description: No description found in sticky notes.

--- Workflow: 0009_Process.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0010_Writebinaryfile_Create.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0011_Manual_Copper_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0012_Manual_Copper_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0013_Manual_Noop_Import_Triggered.json ---
Name: Loading data into a spreadsheet
Description: No description found in sticky notes.

--- Workflow: 0014_Manual_Coda_Create_Triggered.json ---
Name: Insert data into a new row for a table in Coda
Description: No description found in sticky notes.

--- Workflow: 0015_HTTP_Cron_Update_Webhook.json ---
Name: Send updates about the position of the ISS every minute to a topic in ActiveMQ
Description: No description found in sticky notes.

--- Workflow: 0016_Manual_Googleslides_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0017_Mattermost_Emelia_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0018_Manual_Chargebee_Create_Triggered.json ---
Name: Create a new customer in Chargebee
Description: No description found in sticky notes.

--- Workflow: 0019_Manual_Uproc_Send_Triggered.json ---
Name: verify email
Description: No description found in sticky notes.

--- Workflow: 0020_Mattermost_Emelia_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0021_HTTP_Awssqs_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0022_Manual_Webflow_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0023_HTTP_Googlebigquery_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0024_Manual_Clearbit_Send_Triggered.json ---
Name: Look up a person using their email in Clearbit
Description: No description found in sticky notes.

--- Workflow: 0025_Manual_Uproc_Automation_Triggered.json ---
Name: location_by_ip
Description: No description found in sticky notes.

--- Workflow: 0026_Mailcheck_Airtable_Monitor.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0027_Mattermost_N8N_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0028_Mattermost_Workflow_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0029_Manual_Orbit_Create_Triggered.json ---
Name: Create a new member, update the information of the member, create a note and a post for the member in Orbit
Description: No description found in sticky notes.

--- Workflow: 0030_Manual_Clickup_Create_Triggered.json ---
Name: Create a task in ClickUp
Description: No description found in sticky notes.

--- Workflow: 0031_Functionitem_Dropbox_Automation_Webhook.json ---
Name: screenshot
Description: No description found in sticky notes.

--- Workflow: 0032_Manual_Filemaker_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0033_HTTP_Mqtt_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0034_Code_Filter_Create_Scheduled.json ---
Name: N/A
Description: ## Check if the song is present in the database

--- Workflow: 0035_GoogleSheets_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0036_Gmail_GoogleDrive_Import.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0037_Manual_Googlebooks_Create_Triggered.json ---
Name: Get a volume and add it to your bookshelf
Description: No description found in sticky notes.

--- Workflow: 0038_Manual_Ical_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0039_Calendly_Notion_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0040_Mattermost_Noop_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0041_Chargebee_Update_Triggered.json ---
Name: Receive updates for events in Chargebee
Description: No description found in sticky notes.

--- Workflow: 0042_Crypto_Airtable_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0043_Humanticai_Calendly_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0044_Trello_Googlecloudnaturallanguage_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0045_Manual_Telegram_Import_Triggered.json ---
Name: Get SSL Certificate
Description: No description found in sticky notes.

--- Workflow: 0046_Manual_Storyblok_Import_Triggered.json ---
Name: Get all the stories starting with `release` and publish them
Description: No description found in sticky notes.

--- Workflow: 0047_Clickup_Update_Triggered.json ---
Name: Receive updates for events in ClickUp
Description: No description found in sticky notes.

--- Workflow: 0048_HTTP_Htmlextract_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0049_Manual_Awss3_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0050_Uptimerobot_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0051_Manual_Microsofttodo_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0052_Manual_Git_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0053_Trello_GoogleCalendar_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0054_Manual_Writebinaryfile_Automate_Triggered.json ---
Name: Standup Bot - Initialize
Description: No description found in sticky notes.

--- Workflow: 0055_Signl4_Interval_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0056_Manual_Uproc_Import_Triggered.json ---
Name: Get Company by Name
Description: No description found in sticky notes.

--- Workflow: 0057_Activecampaign_Create_Triggered.json ---
Name: Receive updates when a new account is added by an admin in ActiveCampaign
Description: No description found in sticky notes.

--- Workflow: 0058_Manual_Readbinaryfile_Automate_Triggered.json ---
Name: Standup Bot - Read Config
Description: No description found in sticky notes.

--- Workflow: 0059_Manual_Twitter_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0060_Travisci_GitHub_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0061_Noop_GitHub_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0062_Manual_Pipedrive_Create_Triggered.json ---
Name: Create an deal in Pipedrive
Description: No description found in sticky notes.

--- Workflow: 0063_Manual_Uproc_Import_Triggered.json ---
Name: Get DNS entries
Description: No description found in sticky notes.

--- Workflow: 0064_Manual_Writebinaryfile_Automate_Triggered.json ---
Name: Standup Bot - Override Config
Description: No description found in sticky notes.

--- Workflow: 0065_Openweathermap_Line_Update_Scheduled.json ---
Name: Send daily weather updates via a message in Line
Description: No description found in sticky notes.

--- Workflow: 0066_Webhook_Cron_Automate_Scheduled.json ---
Name: Standup Bot - Worker
Description: No description found in sticky notes.

--- Workflow: 0067_Manual_Uproc_Automation_Triggered.json ---
Name: Verify phone numbers
Description: No description found in sticky notes.

--- Workflow: 0068_Functionitem_Manual_Import_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0069_Manual_Gmail_Automation_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0070_Splitinbatches_Notion_Export_Scheduled.json ---
Name: Archive empty pages in Notion Database
Description: No description found in sticky notes.

--- Workflow: 0071_Pipedrive_Update_Triggered.json ---
Name: Receive updates for all changes in Pipedrive
Description: No description found in sticky notes.

--- Workflow: 0072_Openweathermap_Cron_Update_Scheduled.json ---
Name: Send daily weather updates via a message using the Gotify node
Description: No description found in sticky notes.

--- Workflow: 0073_Manual_Rssfeedread_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0074_Manual_HTTP_Monitor_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0075_Manual_Noop_Update_Triggered.json ---
Name: Get all the contacts from GetResponse and update them
Description: No description found in sticky notes.

--- Workflow: 0076_Trello_Update_Triggered.json ---
Name: Receive updates for changes in the specified list in Trello
Description: No description found in sticky notes.

--- Workflow: 0077_HTTP_Noop_Sync_Webhook.json ---
Name: Syncro Alert to OpsGenie
Description: No description found in sticky notes.

--- Workflow: 0078_Manual_Slack_Monitor_Webhook.json ---
Name: Google Calendar to Slack Status & Philips Hue
Description: No description found in sticky notes.

--- Workflow: 0079_Manual_Strapi_Create_Triggered.json ---
Name: Create, update, and get an entry in Strapi
Description: No description found in sticky notes.

--- Workflow: 0080_Manual_Disqus_Import_Triggered.json ---
Name: Get details of a forum in Disqus
Description: No description found in sticky notes.

--- Workflow: 0081_Xml_Respondtowebhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0082_GoogleSheets_Interval_Process_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0083_Noop_HTTP_Automation_Webhook.json ---
Name: Plex Automatic Throttler
Description: No description found in sticky notes.

--- Workflow: 0084_HTTP_Cron_Automation_Webhook.json ---
Name: What To Eat
Description: No description found in sticky notes.

--- Workflow: 0085_Shopify_Twitter_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0086_Zohocrm_Trello_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0087_Datetime_Slack_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0088_Manual_Harvest_Create_Triggered.json ---
Name: Create a client in Harvest
Description: No description found in sticky notes.

--- Workflow: 0089_Noop_Telegram_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0090_Wait_Lemlist_Create_Scheduled.json ---
Name: Create Email Campaign From LinkedIn Post Interactions
Description: No description found in sticky notes.

--- Workflow: 0091_Wait_Splitout_Process_Webhook.json ---
Name: ‚ÜîÔ∏è Airtable Batch Processing
Description: ### Adjust if your monthly call limit exceeded
On the Team plan this means 2 requests per second [Source](https://support.airtable.com/docs/managing-api-call-limits-in-airtable#monthly-call-limits-for-free-and-team-plans) -> 0.5 second wait

--- Workflow: 0092_Wait_Datetime_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0093_HTTP_GitHub_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0094_Noop_Gmail_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0095_Googleslides_Slack_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0096_Noop_GitHub_Automate_Triggered.json ---
Name: Automate assigning GitHub issues
Description: No description found in sticky notes.

--- Workflow: 0097_Executecommand_Mailgun_Automation_Webhook.json ---
Name: Steam + CF Report
Description: No description found in sticky notes.

--- Workflow: 0098_Manual_Segment_Monitor_Triggered.json ---
Name: Track an event in Segment
Description: No description found in sticky notes.

--- Workflow: 0099_Webhook_Airtable_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0100_Manual_Zendesk_Create_Triggered.json ---
Name: Create a ticket in Zendesk
Description: No description found in sticky notes.

--- Workflow: 0101_Wait_Manual_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0102_Manual_HTTP_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0103_Netlify_Airtable_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0104_Netlify_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0105_Netlify_Slack_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0106_Manual_Drift_Create_Triggered.json ---
Name: Create a contact in Drift
Description: No description found in sticky notes.

--- Workflow: 0107_Manual_Zulip_Send_Triggered.json ---
Name: Send a private message on Zulip
Description: No description found in sticky notes.

--- Workflow: 0108_Noop_GitHub_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0109_Slack_Cron_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0110_Manual_Humanticai_Create_Webhook.json ---
Name: Create, update, and get a profile in Humantic AI
Description: No description found in sticky notes.

--- Workflow: 0111_Manual_Vero_Create_Triggered.json ---
Name: Create a user profile in Vero
Description: No description found in sticky notes.

--- Workflow: 0112_Manual_Awstextract_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0113_Emailsend_GoogleDrive_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0114_Manual_Salesmate_Create_Triggered.json ---
Name: Create a company in Salesmate
Description: No description found in sticky notes.

--- Workflow: 0115_HubSpot_Clearbit_Update_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0116_Graphql_Discord_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0117_Manual_Uplead_Import_Triggered.json ---
Name: Get information about a company with UpLead
Description: No description found in sticky notes.

--- Workflow: 0118_Readbinaryfile_Onfleet_Create.json ---
Name: Create Onfleet tasks from Spreadsheets
Description: No description found in sticky notes.

--- Workflow: 0119_Manual_Cron_Create_Webhook.json ---
Name: Find a New Book
Description: No description found in sticky notes.

--- Workflow: 0120_Manual_GoogleSheets_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0121_Respondtowebhook_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0122_Manual_Flow_Import_Triggered.json ---
Name: Get all the tasks in Flow
Description: No description found in sticky notes.

--- Workflow: 0123_Facebook_Mattermost_Update_Triggered.json ---
Name: Receive a Mattermost message when a user updates their profile on Facebook
Description: No description found in sticky notes.

--- Workflow: 0124_Slack_Typeform_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0125_Calendly_Notion_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0126_Error_Slack_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0127_Manual_Noop_Monitor_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0128_Manual_N8Ntrainingcustomerdatastore_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0129_HubSpot_Cron_Update_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0130_HubSpot_Cron_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0131_Manual_Start_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0132_Mattermost_Googlecloudnaturallanguage_Send_Triggered.json ---
Name: Analyze the sentiment of feedback and send a message on Mattermost
Description: No description found in sticky notes.

--- Workflow: 0133_Flow_Update_Triggered.json ---
Name: Receive updates for specified tasks in Flow
Description: No description found in sticky notes.

--- Workflow: 0134_Emailreadimap_Nextcloud_Send.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0135_GitHub_Cron_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0136_HTTP_Googlefirebaserealtimedatabase_Update_Webhook.json ---
Name: Receive updates for the position of the ISS every minute and push it to a database
Description: No description found in sticky notes.

--- Workflow: 0137_Manual_Editimage_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0138_Amqp_Send_Triggered.json ---
Name: Receive messages for an ActiveMQ queue via AMQP Trigger
Description: No description found in sticky notes.

--- Workflow: 0139_HTTP_Mysql_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0140_Telegram_Webhook_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0141_Notion_Webhook_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0142_Notion_Webhook_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0143_HTTP_Gitlab_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0144_HTTP_Twitter_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0145_Manual_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0146_Functionitem_Telegram_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0147_Toggl_Create_Triggered.json ---
Name: Get new time entries from Toggl
Description: No description found in sticky notes.

--- Workflow: 0148_Awstextract_Telegram_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0149_Awss3_Wait_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0150_Awsrekognition_GoogleSheets_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0151_Awss3_GoogleDrive_Import_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0152_Shopify_Onfleet_Create_Triggered.json ---
Name: Creating an Onfleet Task for a new Shopify Fulfillment
Description: No description found in sticky notes.

--- Workflow: 0153_HTTP_Dropbox_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0154_HTTP_Mattermost_Automation_Webhook.json ---
Name: Mattermost Webhook
Description: No description found in sticky notes.

--- Workflow: 0155_Mautic_Twilio_Update_Triggered.json ---
Name: Receive updates when a form is submitted in Mautic, and send a confirmation SMS
Description: No description found in sticky notes.

--- Workflow: 0156_HTTP_Awsrekognition_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0157_Manual_Import_Triggered.json ---
Name: Get today's date and day using the Function node
Description: No description found in sticky notes.

--- Workflow: 0158_Telegram_Functionitem_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0159_Datetime_Functionitem_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0160_Manual_Automation_Triggered.json ---
Name: Assign values to variables using the Set node
Description: No description found in sticky notes.

--- Workflow: 0161_Openweathermap_Spontit_Update_Scheduled.json ---
Name: Send daily weather updates via a push notification using Spontit
Description: No description found in sticky notes.

--- Workflow: 0162_HTTP_Telegram_Send_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0163_Respondtowebhook_Spreadsheetfile_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0164_Crypto_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0165_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0166_Manual_Lingvanex_Automation_Webhook.json ---
Name: Translate cocktail instructions using LingvaNex
Description: No description found in sticky notes.

--- Workflow: 0167_HTTP_Slack_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0168_Datetime_GoogleCalendar_Send_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0169_Mattermost_Profitwell_Send_Scheduled.json ---
Name: Send financial metrics monthly to Mattermost
Description: No description found in sticky notes.

--- Workflow: 0170_Telegram_Wait_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0171_Readbinaryfiles_Code_Automation_Webhook.json ---
Name: OpenAI-model-examples
Description: ## The old way of using text completion and text edit
### Davinci model is 10 times more expensive then ChatGPT, consider switching to the new API:
https://openai.com/blog/introducing-chatgpt-and-whisper-apis


--- Workflow: 0172_Noop_GoogleSheets_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0173_Manual_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0174_Noop_Emailsend_Automation_Scheduled.json ---
Name: Activity Encouragement
Description: No description found in sticky notes.

--- Workflow: 0175_Manual_Sendy_Create_Triggered.json ---
Name: Add a subscriber to a list and create and send a campaign
Description: No description found in sticky notes.

--- Workflow: 0176_Slack_Onfleet_Send_Triggered.json ---
Name: Onfleet Driver signup message in Slack
Description: No description found in sticky notes.

--- Workflow: 0177_Coingecko_Cron_Update_Scheduled.json ---
Name: Update Crypto Values
Description: No description found in sticky notes.

--- Workflow: 0178_Functionitem_Executecommand_Automation_Webhook.json ---
Name: extract_swifts
Description: No description found in sticky notes.

--- Workflow: 0179_Manual_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0180_Mattermost_Airtable_Create_Triggered.json ---
Name: Receive a Mattermost message when new data gets added to Airtable
Description: No description found in sticky notes.

--- Workflow: 0181_Manual_HTTP_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0182_Code_GitHub_Create_Scheduled.json ---
Name: N/A
Description: ## Subworkflow

--- Workflow: 0183_Strapi_Webhook_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0184_Functionitem_Itemlists_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0185_Shopify_Onfleet_Automation_Triggered.json ---
Name: Updating Shopify tags on Onfleet events
Description: No description found in sticky notes.

--- Workflow: 0186_Quickbooks_Onfleet_Create_Triggered.json ---
Name: Create a QuickBooks invoice on a new Onfleet Task creation
Description: No description found in sticky notes.

--- Workflow: 0187_Onfleet_GoogleDrive_Create_Triggered.json ---
Name: Create an Onfleet task when a file in Google Drive is updated
Description: No description found in sticky notes.

--- Workflow: 0188_Rssfeedread_Telegram_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0189_Manual_Quickbase_Create_Triggered.json ---
Name: Create, update and get records in Quick Base
Description: No description found in sticky notes.

--- Workflow: 0190_Executecommand_Functionitem_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0191_Manual_Slack_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0192_Manual_Openthesaurus_Import_Triggered.json ---
Name: Get synonyms of a German word
Description: No description found in sticky notes.

--- Workflow: 0193_Nocodb_Telegram_Create_Webhook.json ---
Name: N/A
Description: ## What's this?
Due to some breaking API changes in NocoDB some of its node options are not working at the moment (MAY 2022). These two nodes were replaced by HTTP request nodes. Functionality is still the same.

--- Workflow: 0194_Respondtowebhook_Webhook_Import_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0195_Manual_Pagerduty_Create_Triggered.json ---
Name: Create, update, and get an incident on PagerDuty
Description: No description found in sticky notes.

--- Workflow: 0196_Openweathermap_Webhook_Automation_Webhook.json ---
Name: Receive the weather information of any city
Description: No description found in sticky notes.

--- Workflow: 0197_Youtube_Telegram_Send_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0198_Manual_Thehive_Create_Triggered.json ---
Name: Create, update and get a case in TheHive
Description: No description found in sticky notes.

--- Workflow: 0199_Manual_HTTP_Automation_Webhook.json ---
Name: Bubble Data Access
Description: No description found in sticky notes.

--- Workflow: 0200_Manual_Executecommand_Export_Scheduled.json ---
Name: Tools / Backup Gitlab
Description: No description found in sticky notes.

--- Workflow: 0201_Telegram_Executecommand_Process_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0202_Manual_Cortex_Import_Triggered.json ---
Name: Analyze a URL and get the job details using the Cortex node
Description: No description found in sticky notes.

--- Workflow: 0203_Manual_Writebinaryfile_Automation_Webhook.json ---
Name: Write a file to the host machine
Description: No description found in sticky notes.

--- Workflow: 0204_Manual_Questdb_Create_Triggered.json ---
Name: Create a table and insert data into it
Description: No description found in sticky notes.

--- Workflow: 0205_Thehive_Update_Triggered.json ---
Name: Receive updates when an event occurs in TheHive
Description: No description found in sticky notes.

--- Workflow: 0206_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Example Data
The first two nodes simply fetch some example data to work with.

In the real world, you'd probably process incoming emails, uploaded FTP files or something similar instead.

--- Workflow: 0207_Manual_Slack_Create_Webhook.json ---
Name: Create a channel, invite users to the channel, post a message, and upload a file
Description: No description found in sticky notes.

--- Workflow: 0208_Manual_Iterable_Create_Triggered.json ---
Name: Create, update and get a user from Iterable
Description: No description found in sticky notes.

--- Workflow: 0209_Noop_Kafka_Send_Triggered.json ---
Name: Receive messages from a topic and send an SMS
Description: No description found in sticky notes.

--- Workflow: 0210_Manual_Yourls_Create_Triggered.json ---
Name: Create a short URL and get the statistics of the URL
Description: No description found in sticky notes.

--- Workflow: 0211_Interval_Amqp_Automation_Scheduled.json ---
Name: Smart Factory Data Generator
Description: No description found in sticky notes.

--- Workflow: 0212_Noop_Cratedb_Automation_Triggered.json ---
Name: Smart Factory Use Case
Description: No description found in sticky notes.

--- Workflow: 0213_Manual_Markdown_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0214_Manual_Markdown_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0215_Typeform_Clickup_Automation_Triggered.json ---
Name: User Request Management
Description: No description found in sticky notes.

--- Workflow: 0216_Manual_N8Ntrainingcustomerdatastore_Automation_Triggered.json ---
Name: Very quick quickstart
Description: ## About the very quick quickstart workflow

This is an incomplete workflow, used in the [very quick quickstart](https://docs.n8n.io//try-it-out/quickstart/) tutorial.

--- Workflow: 0217_Manual_Ghost_Create_Triggered.json ---
Name: Create, update, and get a post in Ghost
Description: No description found in sticky notes.

--- Workflow: 0218_Manual_Airtable_Update_Triggered.json ---
Name: Insert and update data in Airtable
Description: No description found in sticky notes.

--- Workflow: 0219_Manual_Snowflake_Create_Triggered.json ---
Name: Create a table, and insert and update data in the table in Snowflake
Description: No description found in sticky notes.

--- Workflow: 0220_Readbinaryfile_Manual_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0221_Gmail_Movebinarydata_Send.json ---
Name: N/A
Description: ## JSON file > Sheets

--- Workflow: 0222_GoogleSheets_Readbinaryfile_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0223_HTTP_GoogleSheets_Automation_Webhook.json ---
Name: N/A
Description: ## JSON > Google Sheets

--- Workflow: 0224_HTTP_GoogleSheets_Send_Webhook.json ---
Name: N/A
Description: ## JSON > Google Sheets

--- Workflow: 0225_Manual_Twist_Create_Triggered.json ---
Name: Create and update a channel, and send a message on Twist
Description: No description found in sticky notes.

--- Workflow: 0226_Manual_Stickynote_Update_Triggered.json ---
Name: N/A
Description: ## 2. Advanced way: Using Expressions
In this `Set` node, we set dates using [Luxon expressions](https://docs.n8n.io/code-examples/expressions/luxon/) for the following formats:

Now - `{{$now}}`
Current time with seconds - `{{$now.toLocaleString(DateTime.TIME_WITH_SECONDS)}}`
Today - `{{$today}}`
Tomorrow - `{{$today.plus({days: 1})}}`
One hour ago - `{{$now.minus({hours: 1})}}`
Weekday name - `{{$today.weekdayLong}}`



--- Workflow: 0227_Manual_N8Ntrainingcustomerdatastore_Automate_Triggered.json ---
Name: N/A
Description: ## 2. If with And/Or conditions
Set the **Combine** field to: 
`ALL` for `AND` condition
`ANY` for `OR` condition

--- Workflow: 0228_Manual_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: # 3. Add items from B below items from A


--- Workflow: 0229_Manual_HTTP_Create_Webhook.json ---
Name: N/A
Description: ## HTTP Request
### This workflow shows the most common use cases of the HTTP request node, and how to handle its output


### Click the `Execute Workflow` button and double click on the nodes to see the input and output items.

--- Workflow: 0230_N8Ntrainingcustomermessenger_Wait_Create_Triggered.json ---
Name: N/A
Description: ## 2. Wait for an external event
Use this operation when an external step is needed in order to continue with the rest of the workflow.
For example - a workflow sends a purchase approval link to the merchant (using Gmail, Slack etc..) and waits for the merchant to click on it before continuing with the rest of the steps.

In this example, the `Customer Messenger` node mimics the email or messaging node.


--- Workflow: 0231_Telegram_Nasa_Send_Scheduled.json ---
Name: Send the Astronomy Picture of the day daily to a Telegram channel
Description: No description found in sticky notes.

--- Workflow: 0232_Respondtowebhook_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## Create a simple API endpoint

In this workflow we show how to create a simple API endpoint with `Webhook` and `Respond to Webhook` nodes



--- Workflow: 0233_Manual_N8Ntrainingcustomerdatastore_Create_Triggered.json ---
Name: N/A
Description: ### Very often your data is not in the right format to insert in a node. you can use the set node to fix it.

### Click the `Execute Workflow` button and double click on the nodes to see the input and output items.

--- Workflow: 0234_GoogleSheets_Cron_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0235_GoogleSheets_Cron_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0236_Manual_GoogleSheets_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0237_GoogleSheets_Spreadsheetfile_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0238_GoogleSheets_Respondtowebhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0239_Code_Typeform_Create_Triggered.json ---
Name: N/A
Description: ## Format Typeform inputs to Pipedrive
In this example, we ask for the number of employees at a company. 

To map this to Pipedrive, we need the unique item number coming from Pipedrive for each of these sections. This is what the function node does. 

In the Pipedrive: Organization, we map this under the custom property.










--- Workflow: 0240_Manual_Gmail_Create_Triggered.json ---
Name: Get messages with a certain label, remove the label, and add a new one
Description: No description found in sticky notes.

--- Workflow: 0241_Asana_Notion_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0242_Manual_Brandfetch_Import_Triggered.json ---
Name: Get the logo, icon, and information of a company and store it in Airtable
Description: No description found in sticky notes.

--- Workflow: 0243_HubSpot_Mailchimp_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0244_HubSpot_Mailchimp_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0245_HTTP_Stripe_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0246_Functionitem_Pipedrive_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0247_Functionitem_HTTP_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0248_Openai_Telegram_Automate_Triggered.json ---
Name: Telegram AI-bot
Description: ## Error fallback for unsupported commands

--- Workflow: 0249_Pipedrive_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ### Find a different ideal buyer:
In "Datagma - Enrich Company" node - change "employeeTitle" value with the keywords of your ideal buyer (-> Head of Marketing)

--- Workflow: 0250_Manual_Baserow_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0251_Pipedrive_Spreadsheetfile_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0252_HTTP_GitHub_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0253_HTTP_GitHub_Send_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0254_Manual_Mattermost_Create_Triggered.json ---
Name: Create a channel, add a member, and post a message to the channel
Description: No description found in sticky notes.

--- Workflow: 0255_Functionitem_Manual_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0256_GoogleSheets_Readbinaryfile_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0257_Manual_GoogleSheets_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0258_Microsoftexcel_Manual_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0259_Manual_HTTP_Create_Webhook.json ---
Name: N/A
Description: ## Downloading a file
In this example workflow, the spreadsheet file is downloaded from an HTTP location.

Depending on your scenario you might want to swap the HTTP Request node downloading the file with another node fetching the file from another source (such as an FTP service, cloud storage, your local filesystem or an email for example).

--- Workflow: 0260_Webhook_Respondtowebhook_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0261_Manual_Googlefirebasecloudfirestore_Create_Triggered.json ---
Name: Create, update, and get a document in Google Cloud Firestore
Description: No description found in sticky notes.

--- Workflow: 0262_Typeform_Spreadsheetfile_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0263_Postgres_Code_Automation_Webhook.json ---
Name: Auto WordPress Blog Generator (GPT + Postgres + WP Media)
Description: # ü§ñ WordPress Blog Automation Workflow

## üõ† SETUP (do once before running the flow)

### 1 ¬∑ DOMAIN  
Add one variable anywhere **before** the workflow starts (via Set node, `.env`, or instance config):
```
DOMAIN=https://your-wordpress-site.com
```
This will be used in all WordPress REST API calls.

---

### 2 ¬∑ CREDENTIALS (create in **n8n ‚Üí Credentials**)
| Credential Name | Purpose | Minimum Scope |
|-----------------|---------|---------------|
| `YOUR_WORDPRESS_CREDENTIAL` | WordPress API | `POST /media`, `POST /posts` |
| `YOUR_POSTGRES_CREDENTIAL` | PostgreSQL access for used categories | DB + table created in step 3 |
| `YOUR_OPENAI_CREDENTIAL` | OpenAI key for GPT | GPT-4-mini or better |

üß† Keep the names **exactly** ‚Äî the workflow references them directly.

---

### 3 ¬∑ POSTGRESQL (one-time bootstrap)

### üñ•Ô∏è Terminal method (fastest ‚Äî paste into `sudo -u postgres psql`)

```sql
-- 3-A ¬∑ Create database and user
CREATE DATABASE n8n_blog;
CREATE USER n8n_writer WITH PASSWORD 'S3cur3-Pa55';
GRANT ALL PRIVILEGES ON DATABASE n8n_blog TO n8n_writer;
\c n8n_blog n8n_writer  -- Reconnect to DB as the new user

-- 3-B ¬∑ Create the tracking table
CREATE TABLE IF NOT EXISTS public.used_categories (
  category_id INTEGER PRIMARY KEY,
  name        TEXT,
  description TEXT,
  title       TEXT,
  used_at     TIMESTAMPTZ
);
GRANT INSERT, UPDATE, SELECT ON public.used_categories TO n8n_writer;
```

### üîó Then configure the credential in n8n

```
Name:       YOUR_POSTGRES_CREDENTIAL
Host:       127.0.0.1
Port:       5432
Database:   n8n_blog
User:       n8n_writer
Password:   S3cur3-Pa55
Schema:     public
```

üí° No terminal access?  
Create a temporary **Postgres ‚Üí Execute Query** node with the same SQL, run once, then delete it.

---

### 4 ¬∑ FIRST TEST  
Run the first 3‚Äì5 nodes manually to verify:
- ‚úÖ WordPress auth works  
- ‚úÖ DB connection + writing works  
- ‚úÖ GPT responds as expected  

Once confirmed, enable the **Schedule Trigger** to automate.

---

## ‚úÖ WHAT THIS WORKFLOW DOES

- Loads all WP categories and filters out excluded ones  
- Picks the **least-used category** from your DB  
- Generates a **unique, well-structured WP article** using GPT (TOC, blocks, CTA)  
- Generates a **cover image** and uploads it to `/media`  
- Publishes the post to `/posts` and updates usage in your PostgreSQL DB

--- Workflow: 0264_GitHub_Stickynote_Create_Triggered.json ---
Name: N/A
Description: ## IF & Switch
Depends on what action was taken on an issue in GitHub.

--- Workflow: 0265_Shopify_HubSpot_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0266_Functionitem_Zendesk_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0267_Functionitem_Zendesk_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0268_Shopify_Zendesk_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0269_Shopify_Zendesk_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0270_Webhook_Discord_Automate_Webhook.json ---
Name: Discord AI bot
Description: No description found in sticky notes.

--- Workflow: 0271_Manual_HTTP_Create_Webhook.json ---
Name: N/A
Description: ## n8n version

This workflow was created using n8n version 0.197.1 and uses a new [expression syntax](https://docs.n8n.io/code-examples/methods-variables-reference/) as well as a new version of the Merge node. Make sure you're also using n8n version 0.197.1 or newer when running this workflow.

--- Workflow: 0272_Notion_GoogleDrive_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0273_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: ## Sync Zendesk tickets to Slack threads
### Setup
1. Add your [Zendesk credential](https://docs.n8n.io/integrations/builtin/credentials/zendesk/) to the `Get ticket` and `Update ticket` nodes.
2. Add your [Slack credential](https://docs.n8n.io/integrations/builtin/credentials/slack/) to `Create Thread` and `Create reply on existing thread` nodes.
3. Open `Configure` node and change "Slack channel" value to your slack channel (like #zendesk-updates).
4. Activate the workflow so it runs automatically each time a Zendesk ticket is created.

--- Workflow: 0274_Zendesk_Asana_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0275_Mautic_Mondaycom_Create_Triggered.json ---
Name: N/A
Description: ## How to add more fields to Monday
By default, this `Create item` node only adds the name of the item and the email to Monday (provided that there is an email field already created).

Ideally, you would like to share more fields than just the name and email. Refer to the [community discussion here](https://community.n8n.io/t/change-multiple-column-values-with-monday/4262) for more information on how to set up more column values in the `Create item` Monday node.

--- Workflow: 0276_Microsoftonedrive_Readbinaryfile_Automation_Webhook.json ---
Name: N/A
Description: ## Working with Excel files
1. Load the spreadsheet file into the workflow (.xls, .xlsx, .csv).
2. Convert the file with **Spreadsheet File** node. This allows other nodes to access the data.
3. Transform and manipulate the spreadsheet data as needed
4. [Optional] Convert back to a spreadsheet file
5. [Optional] Save file locally or upload to a server



‚ÑπÔ∏è This template shows how to work with spreadsheet files themselves. Use the **Microsoft Excel 365** node to interact with the Microsoft Office 365 cloud platform. 

--- Workflow: 0277_Calendly_Mautic_Create_Triggered.json ---
Name: N/A
Description: ### Create/update Mautic contact on a new Calendly event
1. `On new event` triggers on new Calendly events.
2. `Create/update contact` will create a contact in Mautic or update the contact's first name. If the contact's email is already in Mautic, then the first name will be overwritten to the new first name.

--- Workflow: 0278_Shopify_Mautic_Create_Triggered.json ---
Name: N/A
Description: ### Add more fields to Mautic
By default, the first name, last name and email are pushed to Mautic. If you require more fields, add it in the `Create contact` node.

--- Workflow: 0279_Zendesk_GitHub_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0280_Zendesk_Jira_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0281_Stickynote_Notion_Create_Webhook.json ---
Name: N/A
Description: ## Send new Clockify invoice to Notion database
### How it works
1. `On new invoice in Clockify` webhook node will trigger when a new invoice is created in Clockify. Setup is involved.
2. `Create database page` Notion node will create a database page with the information specified from the Clockify trigger. You can add additional fields if required by following the setup.

### Setup
1. Create a Clockify webhook by going to the [webhooks section in Clockify](https://app.clockify.me/webhooks).
2. Create the webhook specifying the "Invoice created" event and paste in the URL provided from `On new invoice in Clockify` webhook step.
3. Now go to Notion and create a new database where we will store our Clockify invoices.
4. In the new Notion database, create the following fields:
    - Invoice number (renamed from "Name" field)
    - Issue date (date field)
    - Due date (date field)
    - Amount (number field)
5. If you want to add more fields to Notion, create those fields in Notion and map it accordingly in `Create database page` node.

--- Workflow: 0282_Clickup_Notion_Update_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0283_Lemlist_Slack_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0284_Manual_Readbinaryfile_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0285_Zendesk_HubSpot_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0286_Zendesk_HubSpot_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0287_HTTP_Rabbitmq_Update_Scheduled.json ---
Name: Send updates about the position of the ISS every minute to a topic in RabbitMQ
Description: No description found in sticky notes.

--- Workflow: 0288_Code_Schedule_Create_Webhook.json ---
Name: N/A
Description: ### `Merge data`
More specifically, we merge the Stripe data from `Get charges` and `Get customer` nodes. Only the charges with customers on them will continue.

--- Workflow: 0289_GitHub_Stickynote_Update_Triggered.json ---
Name: N/A
Description: ## Turn on a light to a specific color on any update in GitHub repository
This workflow turns a light red when an update is made to a GitHub repository. By default, updates include pull requests, issues, pushes just to name a few.

### How it works
1. Triggers off on the `On any update in repository` node.
2. Uses Home Assistant to turn on a light and then configure the light to turn red.

--- Workflow: 0290_Wait_Code_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0291_Noop_Rabbitmq_Send_Triggered.json ---
Name: Receive messages from a queue via RabbitMQ and send an SMS
Description: No description found in sticky notes.

--- Workflow: 0292_Manual_Stickynote_Export_Triggered.json ---
Name: N/A
Description: ## Save SQL table as a binary XLSX file
### You can send it via e-mail, upload to the file storage or download on your computer.
### Just connect one or two extra n8n Nodes here!

--- Workflow: 0293_Manual_Woocommerce_Create_Triggered.json ---
Name: Create, update and get a product from WooCommerce
Description: No description found in sticky notes.

--- Workflow: 0294_Mattermost_Woocommerce_Create_Triggered.json ---
Name: Send a message on Mattermost when an order is created in WooCommerce
Description: No description found in sticky notes.

--- Workflow: 0295_Webhook_Dropcontact_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0296_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: # ‚ö†Ô∏è When and how to use this workflow

If you previously upgraded to n8n version `0.214.3`, some of your workflows might have accidentally been re-wired in the wrong way. This affected nodes which have more than 1 output, such as `If`, `Switch`, and `Compare Datasets`.

This workflow helps you identify potentially affected workflows and nodes that you should  check.

**‚ùóÔ∏èPlease ensure to run this workflow as the instance owner‚ùóÔ∏è**

1. Configure the "Get all workflows" node to use your n8n API key. (You can find/create your API key under "Settings > n8n API")
2. If you have community nodes installed that have more than 1 output, add them to the constant `MULTI_OUTPUT_NODES` in the "Parse potentially affected workflows" code node.
3. Activate the workflow
4. Visit `{YOUR_INSTANCE_URL}/webhooks/affected-workflows` from your browser
5. The report will list potentially affected workflows/nodes.
    1. The square brackets after the workflow name list the potentially affected nodes
    2. Inspect each reported workflow individually (you can click on a row to open it in a new tab)
    3. **Verify that the correct outbound connectors are used to connect subsequent nodes.**

--- Workflow: 0297_Manual_Openai_Export_Triggered.json ---
Name: N/A
Description: ## What this workflow does
‚úîÔ∏é 1) Get posts from reddit that might be about n8n
    - Filter for the most relevant posts (posted in last 7 days and more than 5 upvotes and is original content)

‚úîÔ∏é 2) Check if the post is actually about n8n

‚úîÔ∏é 3) if it is, categorise with OpenAi.


--- Workflow: 0298_Code_Readpdf_Send_Triggered.json ---
Name: N/A
Description: ## Send specific PDF attachments from Gmail to Google Drive using OpenAI

_**DISCLAIMER**: You may have varying success when using this workflow so be prepared to validate the correctness of OpenAI's results._

This workflow reads PDF textual content and sends the text to OpenAI. Attachments of interest will then be uploaded to a specified Google Drive folder. For example, you may wish to send invoices received from an email to an inbox folder in Google Drive for later processing. This workflow has been designed to easily change the search term to match your needs. See the workflow for more details.

### How it works
1. Triggers off on the `On email received` node.
2. Iterates over the attachments in the email.
3. Uses the `OpenAI` node to filter out the attachments that do not match the search term set in the `Configure` node. You could match on various PDF files (i.e. invoice, receipt, or contract).
4. If the PDF attachment matches the search term, the workflow uses the `Google Drive` node to upload the PDF attachment to a specific Google Drive folder.


Workflow written by [David Sha](https://davidsha.me).

--- Workflow: 0299_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: ### Configuration
If you decide to use your own spreadsheet, it is up to you to ensure all columns are present before running this workflow. A good way to do this is to run this workflow once with **empty** `spreadsheetid` and `worksheetId` variables (see the `Configure` node). Then map the output from `Store spreadsheet ID` to this node.

It is recommended that you specify the `spreadsheetId` and `worksheetId`, since relying solely on a workflow's static data is considered bad practice.
















__`spreadsheetId`__: The ID of the spreadsheet where Pipedrive deals will be stored.
__`worksheetId`__: The ID of the worksheet where Pipedrive deals will be stored.
__`spreadsheetName`(required)__: The human readable name of the spreadsheet where Pipedrive deals will be stored.
__`worksheetName`(required)__: The human readable name of the worksheet in the spreadsheet where Pipedrive deals will be stored.
__`recipients`(required)__: Comma-separated list of email recipients to send ChatGPT emails to. Use `*` to send ChatGPT response to every email address.
__`maxTokenSize`(required)__: The maximum token size for the model you choose. See possible models from OpenAI [here](https://platform.openai.com/docs/models/gpt-3).
__`replyTokenSize`(required)__: The reply's maximum token size. Default is 300. This determines how much text the AI will reply with.

--- Workflow: 0300_Manual_Egoi_Create_Triggered.json ---
Name: Create, update, and get a subscriber using the e-goi node
Description: No description found in sticky notes.

--- Workflow: 0301_Mattermost_Noop_Automation_Webhook.json ---
Name: Gender Inclusive Language
Description: No description found in sticky notes.

--- Workflow: 0302_Manual_N8Ntrainingcustomerdatastore_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0303_Manual_Stickynote_Export_Triggered.json ---
Name: N/A
Description: ## Save SQL table as a CSV file
### You can send it via e-mail, upload to the file storage or download on your computer.
### Just connect one or two extra n8n Nodes here!

--- Workflow: 0304_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Example data
These nodes simply download some example files to work with.

--- Workflow: 0305_Manual_Telegram_Create_Triggered.json ---
Name: Create a screenshot of a website and send it to a telegram channel
Description: No description found in sticky notes.

--- Workflow: 0306_HTTP_Respondtowebhook_Import_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0307_Code_Postgres_Automate_Triggered.json ---
Name: N/A
Description: ## üëã How to use this template
This template shows how to sync data from one service to another. In this example we're saving a new qualified lead to a Google Sheets file. Here's how you can test the template:

1. Duplicate our [Google Sheets](https://docs.google.com/spreadsheets/d/1gVfyernVtgYXD-oPboxOSJYQ-HEfAguEryZ7gTtK0V8/edit?usp=sharing) file
2. Double click the `Google Sheets` node and create a credential by signing in.
3. Select the correct Google Sheets document and sheet.
4. Click the `Execute Workflow` button and double click the nodes to see the input and output data

### To customize it to you needs, just do the following:
1. Enable or exchange the `Postgres trigger` with any service that fits your use case.
2. Change the `Filter` to fit your needs
3. Adjust the Google Sheets node as described above
4. Disable or remove the `On clicking "Execute Node"` and `Code` node


--- Workflow: 0308_Code_Schedule_Automate_Scheduled.json ---
Name: N/A
Description: ## üëã How to use this template
This template shows how you can create reports on data in an app and share a summary in another app. Here's how to use it:

1. Double click the `Slack` node and create a credential by signing in.
2. Change the channel name in the `Slack` node to a channel you have in Slack.
2. Click the `Execute Workflow` button and double click the nodes to see the input and output data

### To customize it to you needs, just do the following:
1. Enable or exchange the `Notion` node with any service that fits your use case.
2. Change the `2. Filter and transform your data` section to fit your needs
3. Adjust the Slack node or exchange it with any node that fits your use case
4. Disable or remove the `Mock Data` node


--- Workflow: 0309_Code_Filter_Automate_Triggered.json ---
Name: N/A
Description: ## üëã How to use this template
This template shows how you can take any event from any service, transform its data and send an alert to your desired app. Here's how to use it:

1. Double click the `Slack` node and connect to your Slack account by creating a Credential.
2. Change the channel name in the `Slack` node to a channel or user you have in Slack.
2. Click the `Execute Workflow` button, then double click the nodes to see their input and output data

### To customize this template to you needs:
1. Enable or swap the `Linear trigger` with any service that fits your use case.
2. Change the data transformation to fit your needs
3. Adjust the Slack node or swap it with any node that fits your use case
4. Disable or remove the `When clicking "Execute Workflow"` and `Code` node


--- Workflow: 0310_HTTP_Manual_Automation_Webhook.json ---
Name: N/A
Description: ### JSON to Google Sheets
We map data from the HTTP Request directly in the `Google Sheets` node, so we don't need a `Set` node before to transform the incoming data.

--- Workflow: 0311_Datetime_Schedule_Create_Webhook.json ---
Name: N/A
Description: ## Send labeled email to a Notion database
This workflow sends the contents of an email to a Notion database. The email must be labeled with a specific label for the workflow to trigger. The email subject will be the title of the Notion page, and a snippet of the email body will be the content of the Notion page. The email link will be added to the Notion page as a property.

### How it works
On scheduled intervals, find all emails with a specific label. For each email, check if the email already exists in the Notion database. If it does not exist, create a new page in the Notion database, otherwise do nothing. When the task in the Notion database is checked off, the label will be removed from the email.

### Setup
This workflow requires that you set up a Notion database or use an existing one with at least the following fields:
- Title (title)
- Thread ID (text)
- Email thread (URL)


Additionally, create a label that will be used to trigger the workflow in Gmail. In this workflow, the label is called "Notion".

--- Workflow: 0312_Manual_HTTP_Create_Webhook.json ---
Name: Create, add an attachment, and send a draft using the Microsoft Outlook node
Description: No description found in sticky notes.

--- Workflow: 0313_HTTP_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ### Configuration













__`guild_id`__: the server ID in Discord. See how to get that [from this Wikipedia tutorial](https://en.wikipedia.org/wiki/Template:Discord_server#:~:text=Getting%20Guild%20ID,to%20get%20the%20guild%20ID.).

--- Workflow: 0314_GoogleSheets_Discord_Create_Triggered.json ---
Name: N/A
Description: ## Send Google Sheets data as a message to a Discord channel
This workflow sends a message to a Discord channel when a new row is added or a row is updated in a Google Sheet. The message will send all data rows in the Google Sheet.

### How it works
Using a code node, we can use the obtained Google Sheet data to create a custom message that will be sent to Discord. The message will be sent to the Discord channel specified in the Discord node.

### Setup
This workflow requires that you set up a Discord webhook and have an existing Google Sheet with data. See how to set up a Discord webhook [here](https://docs.n8n.io/integrations/builtin/credentials/discord/#creating-a-webhook-in-discord).


--- Workflow: 0315_Manual_Comparedatasets_Automate_Triggered.json ---
Name: N/A
Description: ## Comparing data with the Compare Datasets node

The [Compare Datasets](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.comparedatasets/) node compares data streams before merging them. It outputs up to four different branches.

Click the **Execute Workflow** button, then double click on the nodes to see the input and output items.

--- Workflow: 0316_Datetime_Schedule_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0317_Manual_Movebinarydata_Process_Triggered.json ---
Name: N/A
Description: ## Simple conversion to XML

--- Workflow: 0318_Splitout_Limit_Automation_Webhook.json ---
Name: N/A
Description: ## Scrape latest Paul Graham essays

--- Workflow: 0319_Gmail_Googlecalendartool_Send_Triggered.json ---
Name: N/A
Description: ## Check if incoming email is about appointment
We use LLM to check subject and body of the email and determine if it's an appointment request. 

--- Workflow: 0320_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0321_Manual_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: ## Self-coded LLM Chain Node

--- Workflow: 0322_Splitout_Code_Send_Triggered.json ---
Name: N/A
Description: ## Chunk the transcript into several parts, and refine-summarize it 

--- Workflow: 0323_Manual_Stickynote_Process_Triggered.json ---
Name: N/A
Description: ### Parser which defines the output format and which gets used to validate the output

--- Workflow: 0324_Manual_Stickynote_Update_Triggered.json ---
Name: N/A
Description: ### Q&A on data returned from a workflow

--- Workflow: 0325_Stickynote_Send_Triggered.json ---
Name: N/A
Description: ### The conversation history (last 20 messages) is stored in a buffer memory

--- Workflow: 0326_Manual_Stickynote_Send_Triggered.json ---
Name: N/A
Description: ### Load data into database
Fetch file from Google Drive, split it into chunks and insert into Pinecone index

--- Workflow: 0327_Noop_Slack_Send_Webhook.json ---
Name: N/A
Description: ### Slack POSTs to Webhook on every message so we need to filter-out bot messages

--- Workflow: 0328_Manual_GoogleDrive_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0329_Manual_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0330_Wait_Webhook_Send_Webhook.json ---
Name: N/A
Description: ## Form Input Overview

- **Purpose**: 
  - Instead of forcing other departments to use a full threat platform, simplify the interaction with our Threat Intel workflow which allows other departments to submit items via URL-accessible forms.

- **Form Access URLs**:
  - **Execute Mode**: `https://n8n.domain.com/webhook/test/url-scan-form` - Use this to execute the workflow interactively within the n8n canvas. Hit the 'Execute Workflow' button to see real-time execution results.
  - **Silent Mode**: `https://n8n.domain.com/webhook/url-scan-form` - Use this for background execution without canvas updates. Results will be logged silently and can be reviewed in the 'Executions' tab.

## Details and Best Practices
When using the form, ensure that all inputs match the required format, like valid URLs for scans, to prevent any workflow interruptions. Keep in mind these forms are not performing input sanitation so incorrectly entered values will trigger an error workflow. Should there be any issues upon form submission, such as an absence of a confirmation message, or if the workflow fails, you can find detailed error information in the 'Executions' tab. 

--- Workflow: 0331_Stopanderror_Extractfromfile_Send_Webhook.json ---
Name: N/A
Description: ## Get and prepare Dummy Data

--- Workflow: 0332_Stickynote_Send_Triggered.json ---
Name: N/A
Description: ## This is an example of basic LLM Chain connected to an open-source model
### The Chain is connected to the Mistral-7B-Instruct-v0.1 model, but you can change this

Please note the initial prompt that guides the model:
```
You are a helpful assistant.
Please reply politely to the users.
Use emojis and a text.
Q: {{ $json.input }}
A: 
```

This way the model "knows" that it needs to answer the question right after the `A: `.

Since Hugging Face node is this is an inference mode, it does not support LangChain Agents at the moment. Please use [Ollama Chat Model](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/) node for that

--- Workflow: 0333_Stopanderror_Webhook_Create_Webhook.json ---
Name: N/A
Description: ## Get all files of subfolders
In this segment of the workflow, all files located within subfolders are collected. This includes the exploration of subfolders within subfolders, ensuring the identification of every file throughout the entire folder structure. Additionally, a corresponding folder is created in the destination structure for each identified subfolder.

--- Workflow: 0334_Openai_Form_Create_Triggered.json ---
Name: N/A
Description: ## Send customer feedback to OpenAI for sentiment analysis

--- Workflow: 0335_Filter_Telegram_Send_Triggered.json ---
Name: N/A
Description: ### Switch depending on content
0 = if command contains the word "marketing"
1 = if command contains the word "sales"

--- Workflow: 0336_Manual_Snowflake_Automation_Webhook.json ---
Name: Snowflake CSV
Description: No description found in sticky notes.

--- Workflow: 0337_Manual_Stickynote_Automation_Webhook.json ---
Name: Structured Data Extract, Data Mining with Bright Data & Google Gemini
Description: ## Note

This workflow deals with the structured data extraction by utilizing Bright Data Web Unlocker Product.

The Basic LLM Chain, Information Extraction, are being used to demonstrate the usage of the N8N AI capabilities.

**Please make sure to set the web URL of your interest within the "Set URL and Bright Data Zone" node and update the Webhook Notification URL**

--- Workflow: 0338_Manual_Stickynote_Export_Webhook.json ---
Name: Capture Website Screenshots with Bright Data Web Unlocker and Save to Disk
Description: ## Note

The "**Set URL, Filename and Bright Data Zone**" node must be updated with the appropriate url, file name and **Bright Data Proxies & Infrastructure** zone.

The "**Write a file to disk**" node has the location to download the website screenshot. Please make sure to set the path

--- Workflow: 0339_Splitout_Code_Update_Webhook.json ---
Name: Printify Automation - Update Title and Description - AlexK1919
Description: # AlexK1919 
![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)

#### I‚Äôm Alex Kim, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.


### About Me
https://beacons.ai/alexk1919

### Products Used 
[OpenAI](https://openai.com)
[Printify](https://printify.com/)

[Google Sheets Template for this Workflow](https://docs.google.com/spreadsheets/d/12Y7M5YSUW1e8UUOjupzctOrEtgMK-0Wb32zcVpNcfjk/edit?gid=0#gid=0)

--- Workflow: 0340_Telegram_Automation_Webhook.json ---
Name: Blockchain DEX Screener Insights Agent
Description: No description found in sticky notes.

--- Workflow: 0341_Code_Filter_Import_Webhook.json ---
Name: [1/3 - anomaly detection] [1/2 - KNN classification] Batch upload dataset to Qdrant (crops dataset)
Description: In the next workflow, we're going to use Qdrant to get the number of images belonging to each crop type defined by `crop_name` (for example, *"cucumber"*). 
To get this information about counts in payload fields, we need to create an index on that field to optimise the resources (it needs to be done once). That's what is happening here

--- Workflow: 0342_Manual_GoogleCalendar_Create_Triggered.json ---
Name: Add a event to Calender
Description: No description found in sticky notes.

--- Workflow: 0343_Manual_Editimage_Create_Webhook.json ---
Name: Add text to an image downloaded from the internet
Description: No description found in sticky notes.

--- Workflow: 0344_HTTP_Emailreadimap_Create_Webhook.json ---
Name: Create Nextcloud Deck card from email
Description: No description found in sticky notes.

--- Workflow: 0345_Mailchimp_Cron_Create_Scheduled.json ---
Name: Create entry in Mailchimp from Airtable
Description: No description found in sticky notes.

--- Workflow: 0346_Telegram_Cron_Automation_Scheduled.json ---
Name: Daily Journal Reminder
Description: No description found in sticky notes.

--- Workflow: 0347_HTTP_GoogleSheets_Sync_Webhook.json ---
Name: Dialpad to Syncro
Description: No description found in sticky notes.

--- Workflow: 0348_Datetime_GoogleCalendar_Automation_Scheduled.json ---
Name: Google Cal to Zoom meeting
Description: No description found in sticky notes.

--- Workflow: 0349_Manual_GoogleSheets_Automation_Scheduled.json ---
Name: Google Sheet to Mailchimp
Description: No description found in sticky notes.

--- Workflow: 0350_HTTP_Emailreadimap_Send_Webhook.json ---
Name: ImapEmail, XmlToJson, POST-HTTP-Request
Description: No description found in sticky notes.

--- Workflow: 0351_Readbinaryfile_Manual_Automate_Triggered.json ---
Name: My workflow
Description: No description found in sticky notes.

--- Workflow: 0352_Readbinaryfile_Spreadsheetfile_Create.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0353_Manual_Twilio_Send_Triggered.json ---
Name: Send SMS to numbers stored in Airtable with Twilio
Description: No description found in sticky notes.

--- Workflow: 0354_Twilio_Typeform_Send_Triggered.json ---
Name: Send Typeforms leads via Whatsapp (Twilio)
Description: No description found in sticky notes.

--- Workflow: 0355_Manual_Twake_Send_Triggered.json ---
Name: Send a message on Twake
Description: No description found in sticky notes.

--- Workflow: 0356_Manual_Twitter_Automate_Scheduled.json ---
Name: TwitterWorkflow
Description: No description found in sticky notes.

--- Workflow: 0357_Mattermost_Twitter_Automation_Scheduled.json ---
Name: Twitter notifications
Description: No description found in sticky notes.

--- Workflow: 0358_HTTP_Discord_Monitor_Scheduled.json ---
Name: Website check
Description: No description found in sticky notes.

--- Workflow: 0359_Manual_Wordpress_Automation_Triggered.json ---
Name: Wordpress-to-csv
Description: No description found in sticky notes.

--- Workflow: 0360_Discord_Cron_Automation_Scheduled.json ---
Name: cheems
Description: No description found in sticky notes.

--- Workflow: 0361_Hunter_Noop_Send_Triggered.json ---
Name: Email form
Description: ## Automate Email List Building with n8n and Hunter io

üí° Read the [case study here](https://rumjahn.com/create-email-capture-forms-for-free-using-n8n-and-sendgrid-and-easily-grow-your-subscriber-list/).

üì∫ Watch the [youtube tutorial here](https://www.youtube.com/watch?v=NgvEHwu19Rs&t=2s)



--- Workflow: 0362_Code_HTTP_Send_Webhook.json ---
Name: xSend and check TTS (Text-to-speech) voice calls end email verification
Description: ## STEP 1
[Register here to ClickSend](https://clicksend.com/?u=586989) and obtain your API Key and 2 ‚Ç¨ of free credits

In the node "Send Voice" create a "Basic Auth" with the username you registered and the API Key provided as your password

--- Workflow: 0363_HTTP_Executeworkflow_Automate_Webhook.json ---
Name: N/A
Description: ### Convert the query string into JSON, apply the limit for a page length

--- Workflow: 0364_HTTP_Twilio_Automate_Webhook.json ---
Name: BillBot
Description: No description found in sticky notes.

--- Workflow: 0365_Code_Manual_Send_Webhook.json ---
Name: N/A
Description: ## Email search with Icypeas (bulk search)


This workflow demonstrates how to perform email searches (bulk search) using Icypeas. Visit https://icypeas.com to create your account.

--- Workflow: 0366_Code_Manual_Automation_Webhook.json ---
Name: N/A
Description: ## Domain scan with Icypeas (bulk search)


This workflow demonstrates how to perform domain scans (bulk search) using Icypeas. Visit https://icypeas.com to create your account.

--- Workflow: 0367_Code_Manual_Send_Webhook.json ---
Name: N/A
Description: ## Perform Batch Processing of Email verifications with Icypeas 


This workflow demonstrates how to perform email verifications (bulk search) using Icypeas. Visit https://icypeas.com to create your account.

--- Workflow: 0368_Stickynote_Webhook_Automate_Webhook.json ---
Name: N/A
Description: ## Real-time listening and processing of search results with Icypeas.

‚Äç

This workflow, with the webhook, allows you to retrieve the results of your searches with Icypeas (https://www.icypeas.com/) and redirect them wherever you want.

--- Workflow: 0369_Manual_Airtable_Automation_Triggered.json ---
Name: Store the output of a phantom in Airtable
Description: No description found in sticky notes.

--- Workflow: 0370_Code_Schedule_Create_Webhook.json ---
Name: N/A
Description: Add your API key here

1. Sign up here
https://app.scrapingbee.com/

2. Get your API key

3. Paste it the node

--- Workflow: 0371_Executeworkflow_Summarize_Send_Triggered.json ---
Name: N/A
Description: ## Sub-workflow: Return the capitals of fictional countries
It can either list the countries it knows about or return the capital of a specific country

--- Workflow: 0372_Executeworkflow_Hackernews_Create_Triggered.json ---
Name: N/A
Description: ### Replace me
with any other service, e.g. fetching your own data

--- Workflow: 0373_Code_Webhook_Automation_Webhook.json ---
Name: N/A
Description: ### Webhook Node (Shopify Listener)
Setup Requirement: First, add the "Inventory Level Update" event in Shopify

Purpose: Listens for inventory updates from Shopify

Setup: Configured in Shopify settings; linked to n8n URL

Action: Triggers workflow on inventory level changes

Note: Ensure correct URL setup in Shopify for accurate triggers

--- Workflow: 0374_Manual_Stickynote_Send_Webhook.json ---
Name: N/A
Description: ## ‚ÑπÔ∏è Replacing the initial nodes

These nodes fetch your account and mailbox IDs. Consider saving these values instead of querying them on every execution to improve performance and reduce the load on the JMAP API.

--- Workflow: 0375_Webhook_Code_Send_Webhook.json ---
Name: N/A
Description: ## Read me

This workflow will allow you to enrich in real-time a form submission from Webflow. 

Based on the result of this workflow, a specific Calendly link will be shown on the website.

If the process outcome is '1', a link for a one-on-one demo will be provided.
If the process outcome is '2', a link for a group demo will be shown.

Full guide here: [Real-time Lead Routing](https://lempire.notion.site/Real-time-lead-routing-9fc55c9a5a17415ba736cbdbf5d43a30?pvs=4)


--- Workflow: 0376_Webhook_Code_Create_Webhook.json ---
Name: N/A
Description: ## Send DingTalk message on new Azure DevOps Pull Request
This template automates sending a DingTalk message on new Azure Dev Ops Pull Request Created Events. It uses a MySQL database to store mappings between Azure users and DingTalk users; so the right users get notified. 

### Set up instructions
1. Define the path value of ReceiveTfsPullRequestCreatedMessage Webhook node of your own, copy the webhook url to create a Azure DevOps ServiceHook that call webhook with Pull Request Created event.
2. In order to configure the LoadDingTalkAccountMap node, you need to create a MySQL table as below:
|Name|Type|Length|Key|
|-|-|-|-|
|TfsAccount|varchar|255|
|UserName|varchar|255|
|DingTalkMobile|varchar|255|
3. You can customize the Ding Talk message content by editing the BuildDingTalkWebHookData node.
4. Define the URL of SendDingTalkMessageViaWebHook Http Request node as your Ding Talk group chat robot webhook URL.
5. Send test of production message from Azure DevOps to test.



--- Workflow: 0377_Manual_Stickynote_Update_Triggered.json ---
Name: N/A
Description: ## Read me
Super simple workflow to upload image URLs as attachments in Airtable. [Here's the example Airtable database I used for this workflow.](https://airtable.com/app5TBVbHPs64w5lE/shrcqQJEC56DV3I9b/tblTVTofgqfzqyIZk)

1. Set up your Airtable database with one text field which contains image URLs, and an attachment field. 
![Source example](https://i.imgur.com/IVIPQoo.png/<IMAGE-NAME>.png#full-width)

2. In each Airtable node, add your Airtable credentials and connect to the base and table you want to modify.

3. In the "Get all records with an image URL" node under "Filter by Formula", change the field name from "Image Source URL" to whatever your URL field name is.
![Source example](https://i.imgur.com/32Z7DqX.png/<IMAGE-NAME>.png)

4. In the third node "Update attachment field with images", update the expression with the correct field name for the URL field. 
![Source example](https://i.imgur.com/hUeZgxX.png/<IMAGE-NAME>.png)

5. Click "Execute Workflow" and watch the magic happen!



--- Workflow: 0378_Stickynote_Notion_Automate_Webhook.json ---
Name: N/A
Description: ## Webhook Trigger
This node listens for the event on the bookmarklet we are going to create.
The settings for this should be POST 

--- Workflow: 0379_Code_Pipedrive_Create_Triggered.json ---
Name: N/A
Description: ## About the workflow
The workflow reads every reply that is received from a cold email campaign and qualifies if the lead is interested in a meeting. If the lead is interested, a deal is made in pipedrive. You can add as many email inboxes as you need!

## Setup:
- Add credentials to the Gmail, OpenAI and Pipedrive Nodes.
- Add a in_campaign field in Pipedrive for persons. In Pipedrive click on your credentials at the top right, go to company settings > Data fields > Person and click on add custom field. Single option [TRUE/FALSE].
- If you have only one email inbox, you can delete one of the Gmail nodes.
- If you have more than two email inboxes, you can duplicate a Gmail node as many times as you like. Just connect it to the Get email node, and you are good to go!
- In the Gmail inbox nodes, select Inbox under label names and uncheck Simplify.

--- Workflow: 0380_Code_Manual_Create_Triggered.json ---
Name: N/A
Description: ## Example Output:
```JSON
{
"link": "https://drive.google.com/u/3/uc?id=1hojqPfXchNTY8YRTNkxSo-8txK9re-V4&export=download&confirm=t&authuser=0",
"name": "firefox_rNjA0ybKu7.png",
"kind": "drive#permission",
"id": "anyoneWithLink",
"type": "anyone",
"role": "reader",
"allowFileDiscovery": false
}
```





















### You can store the output data with any data store node you want
### for example save them into Excel Sheet or Airtable etc...

--- Workflow: 0381_Telegram_Code_Update_Webhook.json ---
Name: N/A
Description: ### Workflow Setup Steps:
1. Ensure the **_Schedule Trigger_** is active to desired cron time (Default 5 minutes).
2. [_Optional_] Configure the **_Binance 24h Price Change_** node with your API details (Default one is Free Public API Call - Free).
3. Set up your **Telegram bot** token in the **Telegram node credentials**.
4. Update the **_Chat ID_** in the **_Send Telegram Message_** node.
5. Test the workflow to ensure everything is set up correctly.
* **Notes**: Detailed telegram bot setup instructions are available in the [workflow's n8n page](https://n8n.io/workflows/2043-crypto-market-alert-system-with-binance-and-telegram-integration).

--- Workflow: 0382_Schedule_Spotify_Create_Scheduled.json ---
Name: N/A
Description: #### Purpose

Compares tracks using `Combine` operation to output **non-matching** Discover Weekly tracks to ensure that duplicates are not appended to the Archive playlist

--- Workflow: 0383_Telegram_Wait_Create_Webhook.json ---
Name: N/A
Description: ## Use **Config Bot** to setup your telegram details, like:
1- Telegram Group ID (Don't forget add bot as admin)
2- Telegram Channel ID (Don't forget add bot as admin)
3- Your telegram Bot Token. (Generate through @BotFather)





















## Setup data & filter & route to the correct Side.
0- None of them - Soon - Wait V2
1- Chat Type (`Private`)
2- Chat Type (`Supergroup`)
3- Chat Type (`Channel`)































## Remember:
* Do not make your support group public. Every message sent in the group on various topics will be forwarded to the user's ticket.
* There is no need to promote your broadcasting channel; the main reason for the channel is to organize and broadcast messages.
* You can host a Redis database without any coding/server management skills through Coolify.io.
* In the next version, I will add the **edit messages** feature, where the forwarded messages will be updated with the new edited one.

## Why use this method?
* If you deal with Telegram P2P, anyone can delete messages from both sides. If you run a business, then one of your clients may delete all messages, causing you to lose the history. This solution prevents people from deleting messages; every message forwarded into the support group will not be possible to delete by the sender.
* Team collaboration: Why share one account when you can convert the whole group into a ticketing system? With this project, you can invite all your coworkers to reply and provide support to your clients through Telegram.
* Integrate with third-party services? Using N8N will pave the way for integrating your Telegram users' data into a CRM. In V2, we will enable the option to force new users to share their leads before receiving support.

--- Workflow: 0384_HTTP_Manual_Create_Webhook.json ---
Name: N/A
Description: ## List NMs
to change parameters read [Docs](https://developers.cloudflare.com/api/operations/workers-kv-namespace-list-namespaces)

--- Workflow: 0385_Wait_Code_Send_Scheduled.json ---
Name: N/A
Description: ### Setup your location link and receiver email(s) here

--- Workflow: 0386_Splitout_Filter_Update_Scheduled.json ---
Name: N/A
Description: ## USDT TRC20 Wallet Tracker
**This workflow** Is a basic concept of integrating your TRC20 wallet with n8n nodes.



--- Workflow: 0387_Redis_Code_Create_Scheduled.json ---
Name: N/A
Description: ## Pulling in Info 
This section pulls in all the data we will need to see any possible errors and generate our alert


--- Workflow: 0388_Telegram_Code_Create_Triggered.json ---
Name: N/A
Description: ## Facebook API

To get the API Key you need to follow these steps:
https://developers.facebook.com/docs/commerce-platform/setup/api-setup/

--- Workflow: 0389_Manual_Googleanalytics_Import_Triggered.json ---
Name: Get analytics of a website and store it Airtable
Description: No description found in sticky notes.

--- Workflow: 0390_HTTP_Manual_Automation_Webhook.json ---
Name: N/A
Description: ## Usage 
**How to use me** This workflow gets all the posts from your WordPress site and sorts them into a clear format before publishing them to medium.

Step 1. Set up the HTTP node and set the URL of the source destination. This will be the URL of the blog you want to use. We shall be using https://mailsafi.com/blog for this.

Step 2. Extract the URLs of all the blogs on the page
This gets all the blog titles and their URLs. Its an easy way to sort ou which blogs to share and which not to share.

Step 3. Split the entries for easy sorting or a cleaner view.

Step 4. Set a new https node with all the blog URLs that we got from the previous steps. 

Step 5. Extract the contents of the blog

Step 6. Add the medium node and then set the contents that you want to be shared out.

Execute your work flow and you are good to go




--- Workflow: 0391_Code_Filter_Create_Scheduled.json ---
Name: N/A
Description: ## Adjust frequency to your own needs

--- Workflow: 0392_Stopanderror_GitHub_Automate_Webhook.json ---
Name: [n8n] Advanced URL Parsing and Shortening Workflow - Switchy.io Integration
Description: ## URL META TAGS DATA
**This part** is used to parse long link data like title, descraption, image all them served in header with tags called. [URL metadata](https://ogp.me/)

--- Workflow: 0393_Code_Slack_Create_Webhook.json ---
Name: N/A
Description: ## Resources
The Airtable template can be found here - https://www.airtable.com/universe/expDZ9rbZ9ZwZuTmX/recurring-tasks-automation

--- Workflow: 0394_HTTP_Spreadsheetfile_Create_Webhook.json ---
Name: N/A
Description: ## Confirm the key names and column references




When adapting this to your own base and Google Sheets (CSV) template, make sure to modify this node accordingly, as key values you will need to set the Airtable Fields, and the Expressions need to match the Read File column names

















Make sure that the fields have the correct data type (Strings, Integers (numbers), etc)

--- Workflow: 0395_Error_Mondaycom_Update_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0396_Datetime_Schedule_Automation_Scheduled.json ---
Name: N/A
Description: MOVE CURRENT BACKUPS TO OLD FOLDER

--- Workflow: 0397_Code_Schedule_Import_Scheduled.json ---
Name: N/A
Description: ## Read me

This workflow will scrape recent fundraising events from Crunchbase, and add them in Google Sheets.

Full guide here: https://lempire.notion.site/Get-recent-fundraising-in-Google-Sheets-dafbbda2635544b4925c4fb04abac8f5?pvs=74


--- Workflow: 0398_Telegram_Wait_Send_Webhook.json ---
Name: N/A
Description: ## Simple Conversion of Emails into HTML Webpages
To-do:
* Configure your GitHub credentials through `Predefined Credential Type` => `GitHub API`.
* Add your Telegram credentials by providing your `Chat ID`.
* [**Optional**] You can host this [small project](https://github.com/Automations-Project/Emails/tree/main) on your own domain using GitHub Pages.

 ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå  ‚Äå ‚Äå ‚Äå  ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ![image](https://cdn.statically.io/gh/Automations-Project/Emails/main/iloven8n.min.svg)







 ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå  ‚Äå ‚Äå ‚Äå  ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ‚Äå ![image](https://cdn.statically.io/gh/Automations-Project/Emails/main/iloven8n%E2%80%8C.min.svg)

--- Workflow: 0399_Manual_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: Before executing, replace `YOUR_API_KEY` with an API key for searchapi.io

--- Workflow: 0400_Manual_Code_Create_Webhook.json ---
Name: N/A
Description: 1] In ElevenLabs, add a voice to your [voice lab](https://elevenlabs.io/voice-lab) and copy its ID. Open this node and add the ID there

--- Workflow: 0401_Code_Filter_Send_Triggered.json ---
Name: N/A
Description: ### Sub-workflow: Custom tool
This can be called by the agent above. It returns three different types of data from the Google Sheet, which can be used together for more complex queries without returning the whole sheet (which might be too big for GPT to handle)

--- Workflow: 0402_Schedule_Filter_Update_Scheduled.json ---
Name: N/A
Description: # Node Descriptions

## Retrieve Customer Messages Data (Google Sheets Node ):
**Purpose and Use Cases:**
The primary purpose of this node is to retrieve data from a Google Sheets document that contains information about messages to customers. This could be used in various scenarios, such as:

- Compiling a list of customer contacts for outreach campaigns.
- Gathering feedback or responses stored in a spreadsheet.
- Automating the process of updating customer records or tracking communications.


## Filter Items by Current Date Node:
- **Purpose:** Filters input items based on comparison with the current date.
- **Parameters:**
  - **JavaScript Code:** Compares item dates with the current date for filtering.
- **Functionality:** Ensures only items with dates matching the current date are passed along.

 ### Note : The date format should be in this form (year/month/day) to be accepted.

## Gmail Node:
- **Purpose:** Likely sends emails using Gmail based on filtered items.
- **Parameters:**
  - **Recipient:** Extracted from input data.
  - **Subject:** Extracted from input data.
  - **Email Content:** Extracted from input data.

## Update Message Status(Google Sheets Node ):
- **Purpose:** Updates specific columns in the Google Sheets document.
- **Parameters:**
  - **Operation:** Update mode.
  - **Columns:** Defines which columns to update with values from input data.

## Filter Status (Waiting for sending) Node:
- **Purpose:** Filters items based on specific status criteria.
- **Parameters:**
  - **Conditions:** Filters based on status, title, subject, email, name, and date.

## Set data Node:
- **Purpose:** Sets specified fields with extracted values from input data.

## Merge feild Node:
- **Purpose:** Merges fields from different sources based on position.

Feel free to utilize these detailed descriptions to understand and enhance the workflow further.


--- Workflow: 0403_Beeminder_Strava_Create_Triggered.json ---
Name: Add a datapoint to Beeminder when new activity is added to Strava
Description: No description found in sticky notes.

--- Workflow: 0404_Postgrestool_Stickynote_Send_Triggered.json ---
Name: N/A
Description: ## Try me out
Click the 'chat' button at the bottom of the canvas and paste in:

_Which tables are available?_

--- Workflow: 0405_HTTP_Executeworkflow_Send_Webhook.json ---
Name: N/A
Description: ### Sub-workflow: Custom tool
The agent above can call this workflow. It calls an example API called "Bored API" and returns a string with an activity idea.

--- Workflow: 0406_Executeworkflow_Slack_Send_Triggered.json ---
Name: N/A
Description: ### Sub-workflow: Custom tool
The agent above can call this workflow. It checks if the user has supplied an email address. If they haven't it prompts them to provide one. If they have, it messages a customer support channel for help.

--- Workflow: 0407_Stickynote_Send_Triggered.json ---
Name: N/A
Description: Call the assistant, passing in the previous chat messages

--- Workflow: 0408_Manual_Sendgrid_Create_Triggered.json ---
Name: Create, update and get a contact using the SendGrid node
Description: No description found in sticky notes.

--- Workflow: 0409_Manual_Googlecontacts_Create_Triggered.json ---
Name: Create, update and get a contact in Google Contacts
Description: No description found in sticky notes.

--- Workflow: 0410_Webhook_Filter_Update_Webhook.json ---
Name: N/A
Description: ## Setup
1. Add your Google Sheets and Discord credentials.
2. Create a Google Sheets document that contains `ID` as a column. We're using this to remember which member we received last.
3. Edit the fields in the setup node `Setup: Edit this to get started`. *You can read up on how to get the Discord IDs via [this link](https://www.pythondiscord.com/pages/guides/pydis-guides/contributing/obtaining-discord-ids/).*
4. Link to your Discord server in the Discord nodes
5. Activate the workflow
6. Call the production webhook URL in your browser

--- Workflow: 0411_Filter_Form_Send_Triggered.json ---
Name: N/A
Description: ### Setup
1. Add the `Clearbit` and `Gmail` credentials
2. Click on `Test Workflow`
3. Enter your own email (which needs to be a business email to work) in the Form
4. Check your email
5. Once you're happy don't forget to activate this workflow

--- Workflow: 0412_Schedule_HTTP_Update_Scheduled.json ---
Name: N/A
Description: - Utilized the following API: 
  - [Prospeo.io LinkedIn Email Finder API](https://prospeo.io/api/linkedin-email-finder)

- **Benefit:**
  - The benefit of this API is to provide an efficient way to find email addresses of users on LinkedIn, aiding in updating and enriching data more accurately and comprehensively in Google Sheets or any other system used in the workflow.


--- Workflow: 0413_Intercom_Code_Create_Webhook.json ---
Name: N/A
Description: ## On User created event in Intercom

1. Setup webhook url in intercom
2. Make sure `contact.user.created` is enabled

--- Workflow: 0414_Webhook_Filter_Create_Webhook.json ---
Name: N/A
Description: **üëà Optional**
If the workflow ends here, the email wasn't found in Clearbit. Consider checking with another enrichment service or sending a Slack message for manual verification.

--- Workflow: 0415_Code_GoogleCalendar_Create_Webhook.json ---
Name: N/A
Description: ### Latest company news before a call

This workflow will send you a list of latest news about a company for every meeting in your calendar each day, keeping you up to date with your leads and meeting partners.


--- Workflow: 0416_Noop_HubSpot_Create_Webhook.json ---
Name: N/A
Description: ## On User created in HubSpot

1. Setup Oauth2 creds using n8n docs
https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.hubspottrigger

### Be careful with scopes. Scopes must be exactly as defined in the docs

--- Workflow: 0417_Schedule_Gmail_Send_Scheduled.json ---
Name: N/A
Description: ## Search for all contacts that last contact date for is unknown

1. Setup Oauth2 creds using n8n docs
https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.hubspottrigger/

### Be careful with scopes. Scopes must be exactly as defined in the n8n docs

--- Workflow: 0418_Splitout_Filter_Export_Scheduled.json ---
Name: N/A
Description: ### Setup
1. Add your **Leedfeeder** credentials. The name should be `Authorization` and the value `Token token=yourapitoken`. You can find your token via **Settings -> Personal -> API-Token**
2. Add your **Google Sheet** credentials
3. Save the **Leedfeeder** account names you want to use in the `Setup` node
4. Copy the [Google Sheets Template](https://docs.google.com/spreadsheets/d/1a2gfBjZZpN0jiD7apR8fPplRp2aPHVy2_5lp4Yzp778/edit?usp=sharing) and add its URL to the `Setup` node

--- Workflow: 0419_Telegram_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0420_Hunter_Form_Create_Triggered.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add you **Hunter**, **Clearbit** and **Hubspot** credentials
2. Click the Test Workflow button, enter your email and check your Hubspot
3. Activate the workflow and use the form trigger production URL to collect your leads in a smart way 

--- Workflow: 0421_Splitout_Schedule_Import_Webhook.json ---
Name: N/A
Description: ## Setup
1. Add your **Hubspot** credentials
2. Customize your criterias for assigning deals in the `Assign by Region` and the following `Assign` nodes
3. Make sure deals are assigned to the right salesrep in the Hubspot nodes at the end
4. Activate the workflow

--- Workflow: 0422_Schedule_HTTP_Send_Webhook.json ---
Name: N/A
Description: ## Search for all contacts that last contact date for is known

1. Setup Oauth2 creds using n8n docs
https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.hubspottrigger/

### Be careful with scopes. Scopes must be exactly as defined in the n8n docs
















### To make this more effective, we sort ascending by last contact date.

--- Workflow: 0423_Slack_Hunter_Send_Webhook.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add you **MadKudu**, **Hunter**, and **Slack** credentials 
2. Set the Slack channel
3. Click the Test Workflow button, enter your email and check the Slack channel
4. Activate the workflow and use the form trigger production URL to collect your leads in a smart way 

--- Workflow: 0424_Hunter_Form_Send_Webhook.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add you **MadKudu**, **Hunter**, and **Email** credentials 
2. Set the email where you want the alert
3. Click the Test Workflow button, enter your email and check the Slack channel
4. Activate the workflow and use the form trigger production URL to collect your leads in a smart way 

--- Workflow: 0425_Telegram_Hunter_Send_Webhook.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add you **MadKudu**, **Hunter**, and **Telegram** credentials 
2. Set the chat id in Telegram
3. Click the Test Workflow button, enter your email and check your Telegram chat
4. Activate the workflow and use the form trigger production URL to collect your leads in a smart way 

--- Workflow: 0426_Hunter_Form_Send_Webhook.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add you **MadKudu**, **Hunter**, and **Gmail** credentials 
2. Setup your **HubSpot** Oauth2 creds using [n8n docs](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.hubspottrigger/)
3. Set the email content and subject
4. Click the Test Workflow button, enter your email and check the Slack channel
5. Activate the workflow and use the form trigger production URL to collect your leads in a smart way 

--- Workflow: 0427_Stopanderror_Wait_Monitor_Webhook.json ---
Name: N/A
Description: ## Simple indexing workflow using the Google Indexing API

This workflow is the simplest indexing workflow. It simply extracts a sitemap, converts it to a JSON, and loops through each URL. It will output an error if your quota is reached.

*Joachim*

--- Workflow: 0428_Splitout_GoogleCalendar_Send_Webhook.json ---
Name: N/A
Description: ## Start here
1Ô∏è‚É£ Register on [RapidAPI](https://rapidapi.com) and subscribe to these two APIs:
- [Fresh LinkedIn Profile Data](https://rapidapi.com/freshdata-freshdata-default/api/fresh-linkedin-profile-data)
- [Twitter](https://rapidapi.com/omarmhaimdat/api/twitter154)


2Ô∏è‚É£ Set API keys for these two in `linkedInAPIKey` and `twitterAPIKey`fields of this node

3Ô∏è‚É£ Set email addresses that should receive the list in the `emails` field of this node

--- Workflow: 0429_Splitout_GoogleCalendar_Send_Webhook.json ---
Name: N/A
Description: ## Start here
1Ô∏è‚É£ Register on [RapidAPI](https://rapidapi.com) and subscribe to these two APIs:
- [Fresh LinkedIn Profile Data](https://rapidapi.com/freshdata-freshdata-default/api/fresh-linkedin-profile-data)
- [Twitter](https://rapidapi.com/omarmhaimdat/api/twitter154)


2Ô∏è‚É£ Set API keys for these two in `linkedInAPIKey` and `twitterAPIKey`fields of this node

3Ô∏è‚É£ Set email addresses that should receive the list in the `emails` field of this node

--- Workflow: 0430_Calendly_Filter_Create_Triggered.json ---
Name: N/A
Description: ## Setup
1. Add `Clearbit`, `Hubspot`, and `Calendly` credentials
2. Click on `Test workflow`
3. Book meeting on Calendly so the event starts the workflow

--- Workflow: 0431_Filter_Convertkit_Create_Triggered.json ---
Name: N/A
Description: ## Setup
1. Add `Clearbit`, `Hubspot`, and `ConvertKit` credentials
2. Click on `Test workflow`
3. Subscribe user to form/list so the event starts the workflow

--- Workflow: 0432_Schedule_Filter_Create_Scheduled.json ---
Name: N/A
Description: ## Setup
1. Add `Hubspot` and `Slack` credentials.
2. Adjust polling time.
3. Enable the workflow.

--- Workflow: 0433_Splitout_Webhook_Update_Webhook.json ---
Name: N/A
Description: ## Note
* The HTTP request adds a randomized URL parameter to ensure getting the latest data by prevent caching.
* The provided data is XML-formatted and therefore converted to JSON formatting.

Read more about Euro foreign exchange reference rates [here](https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html).

--- Workflow: 0434_Splitout_Webhook_Automation_Webhook.json ---
Name: N/A
Description: 
* Scraping emails from websites using an api

--- Workflow: 0435_Splitout_Filter_Create_Webhook.json ---
Name: N/A
Description: ## Setup
1. Go to Company Settings -> Data fields -> Organization and add `Domain` as a custom field
2. Go to Company Settings -> Data fields -> Leads and add `Enriched at` as a custom date field
2. Add your `Pipedrive`, `Clearbit` and `Slack` credentials.
3. Fill the `setup` node below. To get the ID of your custom domain fields, simply run the `Show only custom organization fields` and `Show only custom lead fields` nodes below and copy the keys of your domain and enriched at field.

--- Workflow: 0436_Hunter_Pipedrive_Create_Triggered.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add your **Hunter.io**, **Clearbit** and **Pipedrive** credentials 
2. Click the test workflow button
3. Activate the workflow and use the form trigger production URL to collect your leads in a smart way 

--- Workflow: 0437_Code_Filter_Create_Scheduled.json ---
Name: N/A
Description: Follow-up is due if:
- All the messages in the thread are automated (no-one has replied yet)
- Enough time has passed for the next message to be sent

--- Workflow: 0438_Code_Filter_Create_Webhook.json ---
Name: N/A
Description: ### Figure out issue assignee and title (shortening if necessary)

--- Workflow: 0439_Manual_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## Scheduled posting 
Write a tweet every 6 hours and randomize the minutes that it's posted at to make it seem natural.


--- Workflow: 0440_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## Needed pre-work: Add a Slack App
1. Visit https://api.slack.com/apps, click on `New App` and choose a name and workspace.
2. Click on `OAuth & Permissions` and scroll down to Scopes -> Bot token Scopes
3. Add the `chat:write` scope
4. Head over to `Slash Commands` and click on `Create New Command`
5. Use `/idea` as the command
6. Copy the test URL from the **Webhook** node into `Request URL`
7. Add whatever feels best to the description and usage hint
8. Go to `Install app` and click install

--- Workflow: 0441_HTTP_GoogleSheets_Create_Webhook.json ---
Name: N/A
Description: ## Needed pre-work: Add a Slack App
1. Visit https://api.slack.com/apps, click on `New App` and choose a name and workspace.
2. Click on `OAuth & Permissions` and scroll down to Scopes -> Bot token Scopes
3. Add the `chat:write` scope
4. Head over to `Slash Commands` and click on `Create New Command`
5. Use `/idea` as the command
6. Copy the test URL from the **Webhook** node into `Request URL`
7. Add whatever feels best to the description and usage hint
8. Go to `Install app` and click install

--- Workflow: 0442_Splitout_Schedule_Send_Scheduled.json ---
Name: N/A
Description: üëÜ Add your RSS feeds urls here.

--- Workflow: 0443_Schedule_Filter_Automation_Scheduled.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add your Gmail creds

--- Workflow: 0444_Datetime_Todoist_Create_Webhook.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add your Todoist creds
2. Create a Todoist project called `snoozed`
3. Set the project ids in the relevant nodes
4. Add due dates to your tasks in Inbox. Watch them disappear to `snoozed`. Set their date to tomorrow, watch it return to inbox.

--- Workflow: 0445_Splitout_Code_Import_Scheduled.json ---
Name: N/A
Description: üëáüèΩ Set your team name here in the filter. 
(Our team's name is Adore)

--- Workflow: 0446_Code_Todoist_Create_Scheduled.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add Todoist creds
2. Create a `template` list to copy from in Todoist. Add days and due times on each task as necessary.
3. Set the projects to copy from and to write to in each **Todoist** node

--- Workflow: 0447_Error_Slack_Send_Triggered.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add Slack creds
2. Add this error workflow to other workflows
https://docs.n8n.io/flow-logic/error-handling/#create-and-set-an-error-workflow

--- Workflow: 0448_Schedule_HTTP_Create_Webhook.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add your n8n api creds
2. Add your notion creds
3. create notion database with fields `env id` as `text`, `isActive (dev)` as `boolean`, `URL (dev)` as `url`, `Workflow created at` as `date`, `Workflow updated at` as `date`, `Error workflow setup` as `boolean`
4. Add tag `sync-to-notion` to some workflows

--- Workflow: 0449_Splitout_Webhook_Create_Webhook.json ---
Name: N/A
Description: 













Example response üëá
![](https://i.ibb.co/7VZVFBh/error-response.png#full-width)

--- Workflow: 0450_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## Needed pre-work: Add a Slack App
1. Visit https://api.slack.com/apps, click on `New App` and choose a name and workspace.
2. Click on `OAuth & Permissions` and scroll down to Scopes -> Bot token Scopes
3. Add the `chat:write` scope
4. Head over to `Slash Commands` and click on `Create New Command`
5. Use `/bug` as the command
6. Copy the test URL from the **Webhook** node into `Request URL`
7. Add whatever feels best to the description and usage hint
8. Go to `Install app` and click install

--- Workflow: 0451_Filter_Slack_Update_Webhook.json ---
Name: N/A
Description: ### When does this fire?
In our setup we have a general team in Linear where we post new tickets to. Additionally, the bug needs to have a certain label and the description needs to be filled. 
You're of course free to adjust this to your needs
üëá

--- Workflow: 0452_Splitout_Webhook_Create_Webhook.json ---
Name: N/A
Description: * Generating keywords for your SEO

--- Workflow: 0453_Webhook_Code_Create_Webhook.json ---
Name: N/A
Description: ## üë®‚Äçüé§ Setup
1. Add Slack command and point it up to the webhook
2. Add the following to the **Set config** node
- `alerts_channel` with alerts channel to start threads on
- `instance_url` with this instance url to make it easy to debug
- `slack_token` with slack bot token to validate request
- `slack_secret_signature` with slack secret signature to validate request
- `help_docs_url` with help url to help users understand the commands 
3. Build other workflows to call and add them to `commands` in **Set Config**. Each command must be mapped to a workflow id with an `Execute Workflow Trigger` node
4. Activate workflow üöÄ

--- Workflow: 0454_Error_Telegram_Send_Triggered.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add Telegram creds
2. Set chat id in **Telegram** node
2. Add this error workflow to other workflows
https://docs.n8n.io/flow-logic/error-handling/#create-and-set-an-error-workflow

--- Workflow: 0455_Manual_Gsuiteadmin_Create_Triggered.json ---
Name: Create, update, and get a user using the G Suite Admin node
Description: No description found in sticky notes.

--- Workflow: 0456_Error_Gmail_Send_Triggered.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
1. Add your Gmail creds
2. Add your target email
2. Add this error workflow to other workflows
https://docs.n8n.io/flow-logic/error-handling/#create-and-set-an-error-workflow

--- Workflow: 0457_Splitout_Webhook_Create_Webhook.json ---
Name: N/A
Description: ## Find WooCommerce User-ID
User-ID is required to query past orders

--- Workflow: 0458_Manual_Code_Create_Triggered.json ---
Name: N/A
Description: ## 1. Setup: Fetch file from Google Drive, split it into chunks and insert into a vector database
Note that running this part multiple times will insert multiple copies into your DB

--- Workflow: 0459_Splitout_Webhook_Update_Webhook.json ---
Name: N/A
Description: ## Edit your own prompt ‚¨áÔ∏è


--- Workflow: 0460_Postgres_Filter_Import_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0461_Graphql_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0462_Telegram_Code_Create_Webhook.json ---
Name: N/A
Description: ### Add chat ID
Remember to set your actual ID to trigger automation from Telegram.

--- Workflow: 0463_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## Purpose 
To verify the mailing address for new contacts in HighLevel. 

Whenever I add a new contact to HighLevel, I run this automation to ensure I have a valid mailing address. It also helps me check for misspellings if the contact address was manually entered.

Quick Video Overview:
https://www.loom.com/share/8995ca0b41ce473ebbad9c1973109c0f


--- Workflow: 0464_Openai_Form_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0465_Telegram_Filter_Send_Scheduled.json ---
Name: N/A
Description: ### üë®‚Äçüé§ Setup
You will need:
1. API token to your n8n instance (settings)
2. Paste the API token in new n8n credentials
3. Add telegram credentials as well

--- Workflow: 0466_Wait_Filter_Send_Webhook.json ---
Name: N/A
Description: ### Available source and target languages`*`:

`BG` - üáßüá¨ Bulgarian
`CS` - üá®üáø Czech
`DA` - üá©üá∞ Danish
`DE` - üá©üá™ German
`EL` - üá¨üá∑ Greek
`EN-GB` - üá¨üáß English (British)
`EN-US` - üá∫üá∏ English (American)
`ES` - üá™üá∏ Spanish
`ET` - üá™üá™ Estonian
`FI` - üá´üáÆ Finnish
`FR` - üá´üá∑ French
`HU` - üá≠üá∫ Hungarian
`ID` - üáÆüá© Indonesian
`IT` - üáÆüáπ Italian
`JA` - üáØüáµ Japanese
`KO` - üá∞üá∑ Korean
`LT` - üá±üáπ Lithuanian
`LV` - üá±üáª Latvian
`NB` - üá≥üá¥ Norwegian (Bokm√•l)
`NL` - üá≥üá± Dutch
`PL` - üáµüá± Polish
`PT-BR` - üáßüá∑ Portuguese (Brazilian)
`PT-PT` - üáµüáπ Portuguese
`RO` - üá∑üá¥ Romanian
`RU` - üá∑üá∫ Russian
`SK` - üá∏üá∞ Slovak
`SL` - üá∏üáÆ Slovenian
`SV` - üá∏üá™ Swedish
`TR` - üáπüá∑ Turkish
`UK` - üá∫üá¶ Ukrainian
`ZH` - üá®üá≥ Chinese (simplified)

`*` For more up-to-date list, please consult the official DeepL [API documentation](https://www.deepl.com/docs-api/documents/translate-document)

--- Workflow: 0467_Webhook_Respondtowebhook_Send_Webhook.json ---
Name: N/A
Description: ## Step 2: Setup the Q&A 
### The incoming message from the webhook is queried from the Supabase Vector Store.  The response is provided in the response webhook.  

--- Workflow: 0468_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Data check

--- Workflow: 0469_Clickup_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ## Create new tasks to airtable from a slack command

--- Workflow: 0470_HTTP_GoogleSheets_Update_Webhook.json ---
Name: N/A
Description: ## Check email deliverability 

--- Workflow: 0471_HTTP_Form_Create_Webhook.json ---
Name: N/A
Description: # Setup
### 1/ Add Your credentials
[Stripe](https://docs.n8n.io/integrations/builtin/credentials/stripe/)

### 2/ And fill the config node
# üëá

--- Workflow: 0472_Aggregate_Gmail_Create_Triggered.json ---
Name: N/A
Description: ## Add AI labels to Gmail messages
With this workflow you can automatically set labels for your Gmail message according to its content. 

In this workflow available are 3 labels: "Partnership", "Inquiry" and "Notification". Feel free to adjust labels according to your needs. 

**Please remember to set label names both in your Gmail account and workflow.**

--- Workflow: 0473_Limit_Code_Create_Scheduled.json ---
Name: N/A
Description: ## Reply draft with OpenAI Assistant
This workflow automatically transfers content of incoming email messages with specific labels into OpenAI Assitant and returns reply draft. After draft is composed, trigger label is deleted from the thread.

**Please remember to configure your OpenAI Assistant first.**

--- Workflow: 0474_Schedule_GoogleSheets_Automation_Scheduled.json ---
Name: N/A
Description: # Setup
### 1/ Add Your credentials
[Google - Sheet](https://docs.n8n.io/integrations/builtin/credentials/google/)
[X - Twitter](https://docs.n8n.io/integrations/builtin/credentials/twitter/)

### 2/ Create a new Google Spread Sheet, with one sheet named Tweets and in the first cell, write tweet.

### 3/ Define your desire frequency

# üëá

--- Workflow: 0475_Googleanalytics_Code_Automate_Scheduled.json ---
Name: Automate Google Analytics Reporting - AlexK1919
Description: # Aggregate Google Analytics data and Email the results

This workflow will check for country views, page engagement and google search console results. It will take this week's data and compare it to last week's data.

[Credit to Keith Rumjahn for the original workflow, which I modified.](https://rumjahn.com/how-i-used-a-i-to-be-an-seo-expert-and-analyzed-my-google-analytics-data-in-n8n-and-make-com/)

--- Workflow: 0476_Manual_Youtube_Create_Triggered.json ---
Name: Upload video, create playlist and add video to playlist
Description: No description found in sticky notes.

--- Workflow: 0477_Manual_Youtube_Create_Triggered.json ---
Name: N/A
Description: # Setup
### 1/ Add Your credentials
[Youtube](https://docs.n8n.io/integrations/builtin/credentials/google/)

### 2/ Define in the config node the delimiter and the text you want to add to all your videos. 

# üëá

--- Workflow: 0478_Schedule_HTTP_Create_Webhook.json ---
Name: N/A
Description: # Setup
### 1/ Add Your credentials
[Google SHeet](https://docs.n8n.io/integrations/builtin/credentials/google/)

### 2/ Create a Google Spreadsheet that will be your database.
Copy this template: 
https://docs.google.com/spreadsheets/d/1sM66Rk10ZOhQKbawVB-xZ2WYhBeSr6wnJqvX6Aspbkg/edit?usp=sharing

### 3/ Add products to monitor from this form 
# üëá

--- Workflow: 0479_Grist_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## Confirmation-based
In the source table there is a boolean column "Confirmed" that will trigger the transfer.
This way there is a manual check involved & it's a conscious step to trigger the workflow.

--- Workflow: 0480_Aggregate_Telegram_Automate_Triggered.json ---
Name: N/A
Description: 
# N8N Workflow: AI-Enhanced Image Processing and Communication

## Description:
This n8n workflow integrates artificial intelligence to optimize image processing tasks and streamline communication via Telegram. Each node in the workflow provides specific benefits that contribute to enhancing user engagement and facilitating efficient communication.

## Title:
AI-Enhanced Image Processing and Communication Workflow with n8n

## Node Names and Benefits:


3. Set up the necessary credentials for the Telegram account and OpenAI API.
4. Configure each node in the workflow to maximize its benefits and optimize user engagement.
5. Run the workflow to leverage AI-enhanced image processing and communication capabilities for enhanced user interactions.
6. Monitor the workflow execution for any errors or issues that may arise during processing.
7. Customize the workflow nodes, parameters, or AI models to align with specific business objectives and user engagement strategies.
8. Embrace the power of AI-driven image processing and interactive communication on Telegram to elevate user engagement and satisfaction levels.

## Elevate your user engagement strategies with AI-powered image processing and seamless communication on Telegram using n8n!


--- Workflow: 0481_Telegram_Code_Automation_Webhook.json ---
Name: N/A
Description: 

--- Workflow: 0482_Code_Respondtowebhook_Automation_Webhook.json ---
Name: [n8n] YouTube Channel Advanced RSS Feeds Generator
Description: ## ‚ÑπÔ∏è **Workarounds And Information**

### - **No need to acquire Google Cloud API** to retrieve channel data. I have implemented a free workaround method.
### - The workflow code has been **tested and proven to work** with all YouTube methods, whether for videos or channels. Regardless of whether you input URLs or usernames, the result will always be the channel ID.
### - Please be aware that the provided workarounds may become **obsolete or non-functional** in the future. I will ensure to stay updated; however, if this workflow does not work for you, please reach out to me on the n8n community.
### - We have utilized a 3rd party method to generate **multiple syntaxes of RSS feeds** as outlined below. (*The mentioned source is also capable of constructing multi-channel YouTube RSS feeds*, which I will create later for BULK channel RSS.)

--- Workflow: 0483_Webhook_Extractfromfile_Update_Webhook.json ---
Name: N/A
Description: ## Testing 

Testing can be done with CURL or similar.

For File posting using Form Data
curl -X POST -F file=@filepath.xml <WEBHOOK_URL>

This can also be tested using the Test workflow

--- Workflow: 0484_Form_Stickynote_Automation_Webhook.json ---
Name: Dynamic credentials using expressions
Description: This workflow shows how to set credentials dynamically using expressions.


First, set up your NASA credential: 

1. Create a new NASA credential.
1. Hover over **API Key**.
1. Toggle **Expression** on.
1. In the **API Key** field, enter `{{ $json["Enter your NASA API key"] }}`.


Then, test the workflow:

1. Get an [API key from NASA](https://api.nasa.gov/)
2. Select **Test workflow**
3. Enter your key using the form.
4. The workflow runs and sends you to the NASA picture of the day.


For more information on expressions, refer to [n8n documentation | Expressions](https://docs.n8n.io/code/expressions/).

--- Workflow: 0485_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## Purpose 
To verify the mailing address for new contacts in Groundhogg CRM. 

Whenever I add a new contact to Groundhogg CRM, I run this automation to ensure I have a valid mailing address. It also helps me check for misspellings if the contact address was manually entered.

Quick Video Overview:

https://www.youtube.com/watch?v=nrV0P0Yz8FI

--- Workflow: 0486_Schedule_Telegram_Create_Scheduled.json ---
Name: N/A
Description: ### Setting Up a Workflow for "AI-Powered Children's English Storytelling on Telegram"

In this guide, we will walk you through the process of setting up a workflow to create and share captivating children's stories using the provided configuration. Let's dive into the steps required to bring these imaginative tales to life on your Telegram channel:

#### Steps to Setup the Workflow:
1. **Import the Workflow:**
   - Copy the provided workflow JSON configuration.
   - In your n8n instance, go to Workflows and select "Import from JSON."
   - Paste the configuration and import the workflow.

2. **Configure Node Credentials:**
   - For nodes requiring API credentials (OpenAI and Telegram), create credentials with the appropriate API keys or tokens.

3. **Set Node Parameters:**
   - Modify node parameters as needed, such as chat IDs, prompts, and intervals.
   - Change the chatId in Config node to the ID of the chat you want the story to be posted.

4. **Ensure Data Flow:**
   - Check the connections between nodes to ensure a smooth flow of data and actions.

5. **Execute Once:**
   - Activate the "executeOnce" option in nodes where necessary to trigger actions only once during setup.

6. **Test the Workflow:**
   - Run the workflow to verify that each node functions correctly and data is processed as expected.

7. **Enable Recurring Triggers:**
   - Confirm that the Schedule Trigger node is set to trigger the workflow at the desired interval (every 12 hours).

8. **Initiate Workflow:**
   - Once everything is configured correctly, activate the workflow to start generating and sharing children's stories on Telegram.

By following these steps meticulously, you can seamlessly establish and operate the workflow designed to create captivating children's stories for your audience. Embrace the power of automation to inspire young minds and foster a love for storytelling through engaging narratives shared on Telegram.


--- Workflow: 0487_Schedule_Telegram_Create_Scheduled.json ---
Name: N/A
Description: # Template for Kids' Story in Arabic

The n8n template for creating kids' stories in Arabic provides a versatile platform for storytellers to captivate young audiences with educational and interactive tales. Along with its core functionalities, this template allows for customization to suit various use cases and can be set up effortlessly.

Check this example: [https://t.me/st0ries95](https://t.me/st0ries95)


## Node Functionalities


## Automated Storytelling Process


## Use Cases
1. **Educational Platforms**:
   Educational platforms can automate the creation and distribution of educational stories in Arabic for children using this template. By incorporating visual and auditory elements into the storytelling process, educational platforms can enhance learning experiences and engage young learners effectively.

2. **Children's Libraries**:
   Children's libraries can utilize this template to curate and share a diverse collection of Arabic stories with young readers. The automated generation of visual content and audio files enhances the storytelling experience, encouraging children to immerse themselves in new worlds and characters through captivating narratives.

3. **Language Learning Apps**:
   Language learning apps focused on Arabic can integrate this template to offer culturally rich storytelling experiences for children learning the language. By translating stories into Arabic and supplementing them with visual and auditory components, these apps can facilitate language acquisition in an enjoyable and interactive manner.

## Configuration Guide for Nodes

### OpenAI Chat Model Nodes:
- **Credentials**: Provide the necessary API credentials for the OpenAI GPT-4 Turbo model.
- **Options**: Configure any specific options required for the chat model.

### Create a Prompt for DALL-E Node:
- **Prompts Customization**: Customize prompts to generate relevant visual content for the stories.
- **Summarization Method and Prompts**: Define the summarization method and prompts for generating visual content without text.

### Generate an Image for the Story Node:
- **Resource**: Specify the type of resource (image).
- **Prompt**: Set up the prompt for producing an image without text within the visual content.

### Generate Audio for the Story Node:
- **Resource**: Select the type of resource (audio).
- **Input**: Define the input text for generating audio files.

### Translate the Story to Arabic Node:
- **Chunking Mode**: Choose the chunking mode (advanced).
- **Summarization Method and Prompts**: Set the summarization method and prompts for translating the story into Arabic.

### Send the Story To Channel Node:
- **Chat ID**: Provide the chat ID where the story text will be sent.
- **Text**: Configure the text to be sent to the channel.

By configuring each node as per the guidelines above, users can effectively set up and customize the n8n template for kids' stories in Arabic, tailoring it to specific use cases and delivering a seamless and engaging storytelling experience for young audiences.


--- Workflow: 0488_Telegram_Stickynote_Update_Triggered.json ---
Name: N/A
Description: # Automated Image Analysis and Response via Telegram

## Example: @SubAlertMe_Bot

## Summary:
The automated image analysis and response workflow using n8n is a sophisticated solution designed to streamline the process of analyzing images sent via Telegram and delivering insightful responses based on the analysis outcomes. This cutting-edge workflow employs a series of meticulously orchestrated nodes to ensure seamless automation and efficiency in image processing tasks.

## Use Cases:
This advanced workflow caters to a myriad of scenarios where real-time image analysis and response mechanisms are paramount. The use cases include:
- Providing immediate feedback on images shared within Telegram groups.
- Enabling automated content moderation based on the analysis of image content.
- Facilitating rapid categorization and tagging of images based on the results of the analysis.

## Detailed Workflow Setup:
To effectively implement this workflow, users must adhere to a meticulous setup process, which includes:
- Access to the versatile n8n platform, ensuring seamless workflow orchestration.
- Integration of a Telegram account to facilitate image reception and communication.
- Utilization of an OpenAI account for sophisticated image analysis capabilities.
- Configuration of Telegram and OpenAI credentials within the n8n environment for seamless integration.
- Proficiency in creating and interconnecting nodes within the n8n workflow for optimal functionality.

## Detailed Node Description:
1. **Get the Image (Telegram Trigger):**
   - Actively triggers upon receipt of an image via Telegram, ensuring prompt processing.
   - Extracts essential information from the received image message to initiate further actions.

2. **Merge all fields To get data from trigger:**
   - Seamlessly amalgamates all relevant data fields extracted from the trigger node for comprehensive data consolidation.

3. **Analyze Image (OpenAI):**
   - Harnesses the powerful capabilities of OpenAI services to conduct in-depth analysis of the received image.
   - Processes the image data in base64 format to derive meaningful insights from the visual content.

4. **Aggregate all fields:**
   - Compiles and consolidates all data items for subsequent processing and analysis, ensuring comprehensive data aggregation.

5. **Send Content for the Analyzed Image (Telegram):**
   - Transmits the analyzed content back to the Telegram chat interface for seamless communication.
   - Delivers the analyzed information in textual format, enhancing user understanding and interaction.

6. **Switch Node:**
   - The Switch node is pivotal for decision-making based on predefined conditions within the workflow.
   - It evaluates incoming data to determine the existence or absence of specific elements, such as images in this context.
   - Utilizes a set of rules to assess the presence of image data in the message payload and distinguishes between cases where images are detected and when they are not.
   - This crucial node plays a pivotal role in directing the flow of the workflow based on the outcomes of its evaluations.



## Conclusion:
The automation of image analysis processes through this sophisticated workflow not only enhances operational efficiency but also revolutionizes communication dynamics within Telegram interactions. By incorporating this advanced workflow solution, users can optimize their image analysis workflows, bolster communication efficacy, and unlock new levels of automation in image processing tasks.


--- Workflow: 0489_Manual_Debughelper_Create_Triggered.json ---
Name: N/A
Description: ## Email Validation and extract domain
** This workflow is aimed at making email validation and domain extract using the native functionalities in n8n

** Replace the debugger node with your actual data source to validate your own emails

--- Workflow: 0490_Mautic_Gmail_Send_Triggered.json ---
Name: Unsubscribe Mautic contacts from automated unsubscribe emails
Description: ## Step 1
Set your email address and unsubscribe message in the edit fields node

--- Workflow: 0491_Code_Webhook_Monitor_Webhook.json ---
Name: N/A
Description: ## Dynamically Replace Images in Google Slides
This workflow exposes an API endpoint that lets you dynamically replace an image in Google Slides, perfect for automating deck presentations like updating backgrounds or client logos.

### Step 1: Set Up a Key Identifier in Google Slides
Add a unique key identifier to the images you want to replace.
1. Click on the image.
2. Go to **Format Options** and then **Alt Text**.
3. Enter your unique identifier, like `client_logo` or `background`.

### Step 2: Use a POST Request to Update the Image
Send a POST request to the workflow endpoint with the following parameters in the body:
- `presentation_id`: The ID of your Google Slides presentation.
You can find it in the URL of your Google presentation : `https://docs.google.com/presentation/d/{this-part}/edit#slide=id.p`)
- `image_key`: The unique identifier you created.
- `image_url`: The URL of the new image.

That's it! The specified image in your Google Slides presentation will be replaced with the new one from the provided URL.

This workflow is designed to be flexible, allowing you to use the same identifier across multiple slides and presentations. I hope it streamlines your slide automation process!

Happy automating!
The n8Ninja

--- Workflow: 0492_HTTP_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ## Generate Text-to-Speech Using Elevenlabs via API
This workflow provides an API endpoint to generate speech from text using [Elevenlabs.io](https://elevenlabs.io/), a popular text-to-speech service.

### Step 1: Configure Custom Credentials in n8n
To set up your credentials in n8n, create a new custom authentication entry with the following JSON structure:
```json
{
  "headers": {
    "xi-api-key": "your-elevenlabs-api-key"
  }
}
```
Replace `"your-elevenlabs-api-key"` with your actual Elevenlabs API key.

### Step 2: Send a POST Request to the Webhook
Send a POST request to the workflow's webhook endpoint with these two parameters:
- `voice_id`: The ID of the voice from Elevenlabs that you want to use.
- `text`: The text you want to convert to speech.

This workflow has been a significant time-saver in my video production tasks. I hope it proves just as useful to you!

Happy automating!  
The n8Ninja

--- Workflow: 0493_HTTP_Keap_Create_Webhook.json ---
Name: N/A
Description: ## Purpose 
To verify the mailing address for new contacts in Keap. 

Whenever I add a new contact to Keap, I run this automation to ensure I have a valid mailing address. It also helps me check for misspellings if the contact address was manually entered.

Quick Video Overview:

https://www.youtube.com/watch?v=YyIpQw5gyhk


--- Workflow: 0494_HTTP_Htmlextract_Send_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0495_Manual_HTTP_Update_Webhook.json ---
Name: N/A
Description: ## How to use the workflow
1. Set a Base in Airtable with a table with the following structure:
  `url`, `title tag`, `meta desc`
2. Connect Airtable to the nodes and, with the following formula, get all the records that miss `title tag` and `meta desc`.
3. Put a bunch of url in the table in the field `url` and let the workflow work.

## Extra

* You can also calculate the length for title tag and meta desc using formula field inside Airtable. This is the formula:
  `LEN({title tag})` or `LEN({meta desc})`
* You can automate the process calling a Webhook from Airtable. For this, you need an Airtable paid plan.

--- Workflow: 0496_GoogleSheets_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0497_Redis_Schedule_Import_Scheduled.json ---
Name: N/A
Description: ## Troubleshooting
Unplanned server outage? Need to reset the flag? Disable the schedule trigger, activate these nodes and run the **Reset to Idle** node manually.

--- Workflow: 0498_Wait_Splitout_Process_Scheduled.json ---
Name: N/A
Description: ## DROPCONTACT 250 BATCH ASYNCHRONOUSLY 
## 1500/HOUR REQUESTS
**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)

--- Workflow: 0499_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ### Flow starts when receiving a get http call

--- Workflow: 0500_Splitout_Schedule_Send_Scheduled.json ---
Name: N/A
Description: Change **url** for Github Repo here

--- Workflow: 0501_Manual_Extractfromfile_Send_Webhook.json ---
Name: N/A
Description: Gets a random image from the internet. Replace this with your image (should be called 'data')

--- Workflow: 0502_Wordpress_Filter_Update_Scheduled.json ---
Name: N/A
Description: ## Automating Posting content to WordPress and setting up the featured Image
This workflow aims to simplify the process by which we share content on Wordpress sites with n8n from airtable

### Usage
1. Get the content from AirTable. SInce we have this as a markdown, we will have to convert it to a html format to make it easier to publish and manage on WordPress
2. Upload the blog post with the content, title and all other relevant information needed for an optimized blog
3. Once the post is posted, we need to upload the image and set it as a features image for the blogs

--- Workflow: 0503_Splitout_Code_Create_Scheduled.json ---
Name: N/A
Description: ## Set Globals
Define the `download_limit` of how many songs should be kept in the Downloads playlist.
*This setup currently supports a maximum of 50.*

--- Workflow: 0504_Lemlist_Slack_Create_Webhook.json ---
Name: N/A
Description: ### Get your lemlist API key

1. Go to your lemlist account or create one [HERE](https://app.lemlist.com/create-account)

2. Go to Settings -> Integrations

3. Generate your API Key and copy it

4. On this node, click on create new credential and paste your API key

--- Workflow: 0505_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## CaptainVerify 
**Verify your email !** To reduce bounce email for your future campains. [Link](https://captainverify.com)

Change **YOURAPIKEY** with yours

--- Workflow: 0506_Code_Filter_Create_Scheduled.json ---
Name: N/A
Description: ## Workflow installation
* Add a "slug" text property to each blog post (this parameter will be synced with Webflow and will be used to determine if a post is new or already present in your Webflow collection)
* Add a "Sync to Webflow?" checkbox to each blog post
* Connect your accounts and run a test to fill Webflow nodes with the right fields

[![image.png](https://i.postimg.cc/xCymVp7w/image.png)](https://postimg.cc/BLbbxpJp)

--- Workflow: 0507_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

Create a query auth credential with __secret__ as name and your secret from the convertAPI dashboard as value

--- Workflow: 0508_Converttofile_Manual_Process_Triggered.json ---
Name: N/A
Description: ## Get all executions
**Workflow and Status Filters can be applied here**

--- Workflow: 0509_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

Create a query auth credential with `secret` as name and your secret from the convertAPI dashboard as value

--- Workflow: 0510_HTTP_Schedule_Automation_Webhook.json ---
Name: N/A
Description: ## Test Data 

Using n8n.io as test url.

For production use, you have to connect your data here.

--- Workflow: 0511_Mongodbtool_Stickynote_Automation_Triggered.json ---
Name: MongoDB Agent
Description: ## AI Agent powered by OpenAI and MongoDB 

This flow is designed to work as an AI autonomous agent that can get chat messages, query data from MongoDB using the aggregation framework.

Following by augmenting the results from the sample movies collection and allowing storing my favorite movies back to the database using an "insert" flow. 

--- Workflow: 0512_Splitout_Code_Update_Webhook.json ---
Name: N/A
Description: Check information for all workflows or a single workflow, activate corresponding node

--- Workflow: 0513_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 0514_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 0515_Manual_HTTP_Automation_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 0516_Code_GitHub_Create_Scheduled.json ---
Name: N/A
Description: ## Subworkflow

--- Workflow: 0517_HTTP_Stickynote_Process_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 0518_Error_Code_Update_Scheduled.json ---
Name: N/A
Description: ## Default Error Handler

Update this to your preferred notification mechanism

--- Workflow: 0519_Code_Manual_Create_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 0520_Splitout_Filter_Create_Webhook.json ---
Name: N/A
Description: 

--- Workflow: 0521_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 0522_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 0523_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## 2. Advanced PDF Processing with LlamaParse
[Read more about using HTTP Requests](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)

LlamaIndex's LlamaCloud is a cloud-based service that allows you to upload,
parse, and index document. LlamaParse is a tool offered by LlamaCloud
to parse for complex PDFs with embedded objects ie PDF Tables and figures.

At time of writing, you can parse 1000 pdfs/day with LlamaCloud's free plan
by signing up at [https://cloud.llamaindex.ai/](https://cloud.llamaindex.ai/?ref=n8n.io).

--- Workflow: 0524_Googledocs_Webhook_Create_Webhook.json ---
Name: N/A
Description: ## 1. API to Trigger Workflow
[Read more about using Webhooks](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)

This workflow requires the user to submit the RFP document via an API request. It's a common pattern to use the webhook node for this purpose. Be sure to secure this webhook endpoint in production!

--- Workflow: 0525_Bannerbear_Discord_Create_Webhook.json ---
Name: N/A
Description: ## 1. Start with n8n Forms
[Read more about using forms](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/)

For this demo, we'll use the form trigger for simple data capture but you could use webhooks for better customisation and/or integration into other workflows.

--- Workflow: 0526_Schedule_Slack_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Query Slack for Messages 
[Read more about the Slack Trigger](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack)

Slack API search uses the same search syntax found in the app. Here, we'll use it to filter the latest messages with the ticket emoji within our designated channel called #n8n-tickets. 

--- Workflow: 0527_Schedule_Manual_Update_Scheduled.json ---
Name: N/A
Description: ## Read Me

This workflow allows you to do account research with the web using AI.

The advanced AI module has 2 capabilities: 
- Research Google using SerpAPI
- Visit and get website content using a sub-workflow


From an unstructured input like a domain or a company name. 

It will return the following properties: 
- domain
- company Linkedin Url
- cheapest plan
- has free trial
- has entreprise plan
- has API
- market (B2B or B2C)


The strength of n8n here is that you can adapt this workflow to research whatever information you need.

You just have to precise it in the prompt and to precise the output format in the "Strutured Output Parser" module.

[Click here to find more detailed instructions with video guide.](https://lempire.notion.site/AI-Web-research-with-n8n-a25aae3258d0423481a08bd102f16906)


--- Workflow: 0528_Splitout_GoogleCalendar_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Pull Messages from Slack Channel
[Read more about using the Slack](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack/)

Using the Slack Node, we're able to filter all top level messages marked with the calendar emoji signifying a request that a calendar event is created. Be sure to configure your slack app with all the required permissions for your workspace.

--- Workflow: 0529_Schedule_Slack_Update_Webhook.json ---
Name: N/A
Description: ## 1. Setting a Schedule
[Read more about Scheduling Workflows](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/)

Since we expect downtime to be a rare occurance, our monitor should only check infrequently during the day. We'll use a schedule trigger for this purpose.

Once the schdule activates, we'll pull a list of sites to check from our google sheet.

--- Workflow: 0530_Splitout_GoogleCalendar_Create_Webhook.json ---
Name: N/A
Description: ## 4. This Tool Creates Calendar Events
This tool, given event details and a list of attendees, will create a new Google calendar event and add the attendees to it.

--- Workflow: 0531_Manual_HTTP_Update_Webhook.json ---
Name: N/A
Description: ## 1. Use Airtable to Capture Survey Photos
[Read more about AirTable](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable)

To enable this workflow, we need a database where we can retreive the title and photo to analyse and write the generate values back to. Airtable is perfect for this since it has a robust API we can work with.

For this demo, we'll manually trigger but this can be changed for forms or other triggers.

--- Workflow: 0532_Splitout_Elasticsearch_Create_Webhook.json ---
Name: N/A
Description: ## 1. Get Source Image
[Read more about setting variables for your workflow](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)

For this demo, we'll manually define an image to process. In production however, this image can come from a variety of sources such as drives, webhooks and more.

--- Workflow: 0533_Wait_Code_Export_Webhook.json ---
Name: N/A
Description: ## Step 1. Fetch Available Courses For the Current Week

To populate our vectorstore, we'll scrape the weekly menu off the HelloFresh Website. The pages are quite large so may take a while so please be patient.

--- Workflow: 0534_Executecommand_Localfile_Process_Triggered.json ---
Name: N/A
Description: ## Step 1. Select the target folder
[Read more about local file trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

In this workflow, we'll monitor a specific folder on disk that n8n has access to. Since we're using docker, we can either use the n8n volume or mount a folder from the host machine.

The local file trigger is useful to execute the workflow whenever changes are made to our target folder.

--- Workflow: 0535_Localfile_Manual_Create_Webhook.json ---
Name: N/A
Description: ## Step 1. Select the target folder
[Read more about local file trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

In this workflow, we'll monitor a specific folder on disk that n8n has access to. Since we're using docker, we can either use the n8n volume or mount a folder from the host machine.

The local file trigger is useful to execute the workflow whenever changes are made to our target folder.

--- Workflow: 0536_Localfile_Splitout_Send_Triggered.json ---
Name: N/A
Description: ## Step 1. Wait For Incoming Bank Statements
[Read more about the local file triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

For this demo, we'll show that n8n is more than capable working with the local filesystem. This gives great benefits in terms of privacy and data security.

For our datastore, we're using a locally hosted XLSX Excel file which we'll query and update throughout this workflow.

--- Workflow: 0537_Localfile_Wait_Create_Triggered.json ---
Name: N/A
Description: ## Step 1. Watch Folder and Import New Documents
[Read more about Local File Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

With n8n's local file trigger, we're able to trigger the workflow when files are created in our target folder. We still have to import them however as the trigger will only give the file's path. The "Extract From" node is used to get at the file's contents.

--- Workflow: 0538_Wait_Splitout_Send_Webhook.json ---
Name: N/A
Description: ## Step 1. Download the Tax Code PDF
[Read more about handling Zip Files](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.compression/)

Let's begin by pulling a zip file containing all the tax codes as separate PDF files. We can unzip on the fly with n8n's compression node.

--- Workflow: 0539_Schedule_Twilio_Create_Webhook.json ---
Name: N/A
Description: ## Step 6. Filter Open Enquiries from Airtable

### üí°Criteria For Follow Up Candidates
* No Scheduled Appointment
* No Request to STOP
* No Previous Follow-up in Past 3 days
* Follow-up is less than 3 times

--- Workflow: 0540_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ### AI agent that can scrape webpages
Remake of https://n8n.io/workflows/2006-ai-agent-that-can-scrape-webpages/

**Changes**:
* Replaces Execute Workflow Tool and Subworkflow
* Replaces Response Formatting

--- Workflow: 0541_Manual_Stickynote_Update_Triggered.json ---
Name: N/A
Description: ### Get Color Channels
[Source: https://www.pinecone.io/learn/series/image-search/color-histograms/](https://www.pinecone.io/learn/series/image-search/color-histograms/)

--- Workflow: 0542_Wait_Redis_Create_Triggered.json ---
Name: N/A
Description: ## Step 2. Buffer Incoming Messages
[Learn more about using Redis](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis)

* New messages are captured into a list.
* After X seconds, we get a fresh copy of this list
* If the last message on the list is the same as the incoming message, then we know no new follow-on messages were sent within the last 5 seconds. Hence the user should be waiting and it is safe to reply.
* But if the reverse is true, then we will abort the execution here.

--- Workflow: 0543_Manual_N8N_Export_Triggered.json ---
Name: N/A
Description: 













### üö®Required
You'll need an n8n API key. Note: available workflows will be scoped to your key.

--- Workflow: 0544_Gmail_GoogleDrive_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0545_Error_N8N_Import_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0546_Code_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ### Setup repos here to check releases for.

Add a new json object to the array setting the org and repo, these will be used by the following nodes

--- Workflow: 0547_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## Try It Out!

### This workflow builds a competitor research agent using Exa.ai as a starting point. The HTTP Request tool is used to demonstrate how you can build powerful agents with minimal effort.

* Using Exa's findSimilar search, we ask it to look for similar companies ie. competitors, to our source company.
* This list of competitors is sent to 3 agents to scour the internet to find company overview, product offering and customer reviews.
* A report is then compiled from the output of all 3 agents into a notion table.

### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

Happy Hacking!

--- Workflow: 0548_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: ![h](https://i.postimg.cc/9XLvL5dL/slide-sf-talk.png#full-width)

--- Workflow: 0549_HTTP_Filter_Monitor_Webhook.json ---
Name: N/A
Description: ## Retrieve all checkout sessions from the last 7 days.

You can adjust the period by changing the "created" value.

[üîç Learn more about the "created" parameter](https://docs.stripe.com/api/checkout/sessions/list?lang=curl#list_checkout_sessions-created)


And this node uses pagination to get all results. You want to keep those settings at the bottom.

--- Workflow: 0550_HTTP_Slack_Create_Webhook.json ---
Name: N/A
Description: # Replicate Line Items on New Deal in HubSpot Workflow

## Use Case
This workflow solves the problem of manually copying line items from one deal to another in HubSpot, reducing manual work and minimizing errors.

## What this workflow does
- **Triggers** upon receiving a webhook with deal IDs.
- **Retrieves** the IDs of the won and created deals.
- **Fetches** line items associated with the won deal.
- **Extracts** product SKUs from the retrieved line items.
- **Fetches** product details based on SKUs.
- **Creates** new line items for the created deal and associates them.
- **Sends** a Slack notification with success details.

## Step up steps
1. Create a HubSpot Deal Workflow
 1.1 Set up your trigger (ex: when deal stage = Won)
 1.2 Add step : Create Record (deal)
 1.3 Add Step : Send webhook. The webhook should be a Get to your n8n first trigger. Set two query parameter : 
   - `deal_id_won` as the Record ID of the deal triggering the HubSpot Workflow
    - `deal_id_create` as the Record ID of the deal created above. Click Insert Data -> The created object
2. Set up your HubSpot App token in HubSpot -> Settings -> Integration -> Private Apps
3. Set up your HubSpot Token integration using the predefined model.
4. Set up your Slack connection
5. Add an error Workflow to monitor errors

--- Workflow: 0551_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ### Use this to get all your contacts üëâ

--- Workflow: 0552_Slack_Stickynote_Send_Webhook.json ---
Name: N/A
Description: ## This is a POST Webhook endpoint

Make sure to configure this webhook using a https:// wraper and dont use the default http://localhost:5678 as that will not be recognized by your slack webhook


Once the data has been sent to your webhook, the next step will be passing it via an AI Agent to process data based on the queries we pass to our agent.

To have some sort of a memory, be sure to set the slack token to the memory node. This way you can refer to other chats from the history.

The final message is relayed back to slack as a new message. Since we can not wait longer than 3000 ms for slack response, we will create anew message with reference to the input we passed.

We can advance this using the tools or data sources for it to be more custom tailored for your company.


--- Workflow: 0553_Code_Schedule_Send_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0554_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Step 1. Import Survey Responses
[Read more about Google Sheets](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets)

Our approach requires to import all participant responses as vectors with metadata linking them to the questions being answered. To do this, we'll generate questiona and answer pairs from the survey.

--- Workflow: 0555_Splitout_Code_Export_Webhook.json ---
Name: N/A
Description: ## Step 1. Starting Fresh
For this demo, we'll clear any existing records in our Qdrant vector store for the selected company. We do this using the Qdrant's delete points API.

--- Workflow: 0556_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Step 4. Trigger Insights SubWorkflow
[Learn more about Workflow Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow)

A subworkflow is used to trigger the analysis for the survey. This separation is optional but used here to better demonstrate the two part process.

--- Workflow: 0557_Gitlab_Filter_Create_Scheduled.json ---
Name: N/A
Description: ## Gather Gitlab Info

--- Workflow: 0558_Manual_Stickynote_Automation_Triggered.json ---
Name: TOTP VALIDATION (WITHOUT CREATING CREDENTIAL)
Description: ## TOTP Validation with Function Node

This template allows you to verify if a 6-digit TOTP code is valid using the corresponding TOTP secret. It can be used in an authentication system.
### Example usage:
- You retrieve the user's TOTP secret from a database, then you want to verify if the 2FA code provided by the user is valid.

## Setup Guidelines

You only need the "TOTP VALIDATION" node.
You will need to modify lines 39 and 40 of the "TOTP VALIDATION" node with the correct values for your specific context.

## Testing the Template
You can define a sample secret and code in the "EXAMPLE FIELDS" node below, then click "Test Workflow".
If the code is valid for the provided secret, the flow will proceed to the "true" branch of the "IF CODE IS VALID" node. Otherwise, it will go to the "false" branch.

--- Workflow: 0559_HTTP_Webhook_Create_Webhook.json ---
Name: N/A
Description: ## Create Atlassian Confluence page from template

Creates a new page in Confluence from a space template.

### Setup
All parameters you need to change are defined in the _Set parameters_ node
For detailled setup instructions and explanation how it all works --> [üé• Video](https://www.tella.tv/video/automate-confluence-page-creation-e994)

### Credentials
As the password for the basic auth credential, you need to use an API key. 
Documentation on those is [here](https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/).
[Here's](https://id.atlassian.com/manage-profile/security/api-tokens) where you create and manage Atlassian API keys.

--- Workflow: 0560_Splitout_Filter_Import_Webhook.json ---
Name: N/A
Description: ### Receive MQTT message from IKEA 5-button Switch, and route actions.

--- Workflow: 0561_Gitlab_Code_Create_Triggered.json ---
Name: N/A
Description: ## Check file
Get the file.
Use error output as normal output.
Some code to analyse the file and set a status.

--- Workflow: 0562_Splitout_Filter_Create_Webhook.json ---
Name: N/A
Description: ## Setup
1. Setup your **Gmail** and **Google Drive** credentials
1. Create a free account at https://pdflayer.com/
2. Insert your **pdflayer** API key into the `Setup` node
3. Insert the URL to the wanted drive folder into the setup node (make sure to remove everything after the `?`)

--- Workflow: 0563_Schedule_Filter_Update_Scheduled.json ---
Name: N/A
Description: ## üí´ To setup this template

1. Add your Todoist credentials
2. Add your OpenAI credentials
3. Set your project names and add priority

--- Workflow: 0564_Supabase_Stickynote_Create_Triggered.json ---
Name: N/A
Description: # INSERTING

- it's important to use the same embedding model when for any interaction with your vector database (inserting, upserting and retrieval)

--- Workflow: 0565_Webhook_Slack_Automation_Webhook.json ---
Name: N/A
Description: ![Imgur](https://i.imgur.com/iKyMV0N.png)
## Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). The second node responds to the periodic security challenges that Slack sends to ensure the N8n webhook is still active. 

--- Workflow: 0566_HTTP_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ![n8n](https://i.imgur.com/lKnBNnH.png)
## Receive Query from Parent Workflow
This node receives input from the AI Agent in the top level workflow where it passes just the Slack Message directly to this workflow.

--- Workflow: 0567_Wait_Code_Export_Webhook.json ---
Name: Backup n8n Workflows to Bitbucket
Description: No description found in sticky notes.

--- Workflow: 0568_Manual_Zendesk_Automation_Scheduled.json ---
Name: Zendesk-to-slack
Description: No description found in sticky notes.

--- Workflow: 0569_Executeworkflow_Telegram_Update_Triggered.json ---
Name: N/A
Description: ## Callback

--- Workflow: 0570_Splitout_Datetime_Create_Webhook.json ---
Name: N/A
Description: ## Credential

Information required to access Contabo API

- CLIENT_ID
- CLIENT_SECRET
- API_USER
- API_PASSWORD

[Contabo Credential](https://my.contabo.com/api/details)

[Contabo API Doc](https://api.contabo.com/)

--- Workflow: 0571_Code_Webhook_Send_Webhook.json ---
Name: N/A
Description: ### New order is sent to the Webhook via POST with params {orderID, orderPrice}

--- Workflow: 0572_Filter_Schedule_Send_Scheduled.json ---
Name: N/A
Description: ## Triggers
Current schedule is every monday at 9 am.

--- Workflow: 0573_Stickynote_Notion_Send_Webhook.json ---
Name: N/A
Description: ## Notion knowledge base assistant [v1]
Built as part of the [30 Day AI Sprint](https://30dayaisprint.notion.site/) by [@maxtkacz](https://x.com/maxtkacz)


--- Workflow: 0574_Stickynote_Notion_Create_Triggered.json ---
Name: N/A
Description: # Generate new workflow version for specific notion db schema
Input a Notion database URL and get an AI Assistant chatbot workflow for it based on this template: https://n8n.io/workflows/2413-notion-knowledge-base-ai-assistant/

Project in notion: https://www.notion.so/n8n/Chat-with-notion-database-84eec91b74dd4e36ba97edda17c2c306

--- Workflow: 0575_Editimage_Manual_Update_Webhook.json ---
Name: N/A
Description: ## Try me out!

### This workflow converts a Candidate Resume PDF to an image which is then "read" by a Vision Language Model (VLM). The VLM assesses if the candidate's CV is a fit for the desired role.

This approach can be employed to combat "hidden prompts" planted in resumes to bypass and/or manipulate automated ATS systems using AI.


### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!


--- Workflow: 0576_Respondtowebhook_Form_Automation_Webhook.json ---
Name: N/A
Description: ### Set style prompt
Each Edit fields node after the Switch sets `stylePrompt`, used in huggingface node.

--- Workflow: 0577_Code_Editimage_Update_Webhook.json ---
Name: N/A
Description: ## Try it out!

### This workflow takes an image and generates a caption for it using AI. The OpenAI node has been able to do this for a while but this workflow demonstrates how to achieve the same with other multimodal vision models such as Google's Gemini.

Additional, we'll use the Edit Image node to overlay the generated caption onto the image. This can be useful for publications or can be repurposed for copyrights and/or watermarks.

### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!


--- Workflow: 0578_Wait_Schedule_Create_Webhook.json ---
Name: N/A
Description: ### Part A. Generate Base Images
Before we can run our visual regression tests, we must generate a series of base screenshots to compare against. This part of the workflow uses an external website screenshotting service, [Apify.com](https://www.apify.com?fpr=414q6), to achieve this. This part of the workflow should only be run when we want to update our base screenshots.

--- Workflow: 0579_Splitout_Editimage_Update_Triggered.json ---
Name: N/A
Description: ## 1. Import Photos To Validate
[Read more about using Google Drive](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive)

In this demonstration, we'll import 5 different portraits to test our AI vision model. For convenience, we'll use Google Drive but feel free to swap this out for other sources such as other storage or by using webhooks.

--- Workflow: 0580_Code_Editimage_Import_Webhook.json ---
Name: N/A
Description: ## Try Me Out!

### This workflow converts a bank statement to markdown, faithfully capturing the details using the power of Vision Language Models ("VLMs"). The resulting markdown can then be parsed again by your standard LLM to extract data such as identifying all deposit table rows in the document.

This workflow is able to handle both downloaded PDFs as well as scanned PDFs. Be sure to protect sensitive data before running this workflow.

### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

--- Workflow: 0581_Webhook_Slack_Create_Webhook.json ---
Name: N/A
Description: ![Imgur](https://i.imgur.com/iKyMV0N.png)
## Events Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). 

The second node extracts the payload from slack into an object that n8n can understand.  

--- Workflow: 0582_Wait_Dropbox_Create_Webhook.json ---
Name: N/A
Description: # Adobe API Wrapper

See Adobe documentation:
- https://developer.adobe.com/document-services/docs/overview/pdf-services-api/howtos/
- https://developer.adobe.com/document-services/docs/overview/pdf-extract-api/gettingstarted/

In short, this workflow does the following steps :

- Authentication
- Upload an asset (pdf) to adobe
- Wait for the asset to be processed by Adobe
- Download the result

## Credential

Credentials are not "predefined" and you'll have to create 2 custom credentials, detailed in the workflow.

## Result

The result will depend on the transformation requested. It could be 1 of various files (json, zip...) accessible via download URL returned by the workflow.

Workflow can be tested with a PDF filed fetched with Dorpbox for example or any storage provider. 

--- Workflow: 0583_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## Daily Podcast Summary
### This workflow will summarize the content in the day's top podcasts for a certain genre, then send you the podcasts with summaries by email

## Setup:
 1. Create a free API key on Taddy here: https://taddy.org/signup/developers
 2. Input your user number and API key into the `TaddyTopDaily` node in the header parameters X-USER-ID and X-API-KEY respectively.
 3. Create access credentials for your Gmail as described here: https://developers.google.com/workspace/guides/create-credentials. Use the credentials from your *client_secret.json* in the `Gmail` node.
 4. In the `Genre` node, set the genre of podcasts you want a summary for. Valid values are: TECHNOLOGY, NEWS, ARTS, COMEDY, SPORTS, FICTION, etc. Look at api.taddy.org for the full list (they will be displayed in the help docs as PODCASTSERIES_TECHNOLOGY, PODCASTSERIES_NEWS, etc.)
 5. Enter your email address in the `Gmail` node.
 6. Change the schedule time for sending email from `Schedule` to whichever time you want to receive the email.
 

## Test:
- Link a `Test Workflow` node in place of the `Schedule` node.
- Hit Test Workflow.
- Check your email for the results.

--- Workflow: 0584_Strapi_Splitout_Create_Webhook.json ---
Name: N/A
Description: 

















### üö® Set Destination Folders Here

--- Workflow: 0585_Telegram_Splitout_Automation_Webhook.json ---
Name: N/A
Description: # Monitor Multiple Github Repos
This workflow allows you to monitor multiple Github repos simultaneously without polling due to use of Webhooks. It programmatically allows for adding and deleting of repos to your watchlist to make management convenient.



--- Workflow: 0586_Respondtowebhook_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ![Siri Template Thumbnail](https://uploads.n8n.io/devrel/wf-siri-header.png#full-width)
## "Hey Siri, Ask Agent" workflow
**Made by [Max Tkacz](https://www.linkedin.com/in/maxtkacz) during the [30 Day AI Sprint](https://30dayaisprint.notion.site/)**

This template integrates with Apple Shortcuts to trigger an n8n AI Agent via a "Hey Siri" command. The shortcut prompts for spoken input, transcribes it, and sends it to the workflow's `When Called by Apple Shortcut` Webhook trigger. The AI Agent processes the input and Siri dictates the response back to you.

The workflow also passes the current date and time to the `AI Agent`, which you can extend with additional context, like data from an App node, for more customized responses.



--- Workflow: 0587_Splitout_Filter_Send_Webhook.json ---
Name: N/A
Description: ## Workflow Description:
This n8n workflow automates the drafting of email replies for Fastmail using OpenAI's GPT-4 model. Here‚Äôs the overall process:

1. **Email Monitoring**: The workflow continuously monitors a specified IMAP inbox for new, unread emails.
2. **Email Data Extraction**: When a new email is detected, it extracts relevant details such as the sender, subject, email body, and metadata.
3. **AI Response Generation**: The extracted email content is sent to OpenAI's GPT-4, which generates a personalized draft response.
4. **Get Fastmail Session and Mailbox IDs**: Connects to the Fastmail API to retrieve necessary session details and mailbox IDs.
5. **Draft Identification**: Identifies the "Drafts" folder in the mailbox.
6. **Draft Preparation**: Compiles all the necessary information to create the draft, including the generated response, original email details, and specified recipient.
7. **Draft Uploading**: Uploads the prepared draft email to the "Drafts" folder in the Fastmail mailbox.

--- Workflow: 0588_HTTP_Schedule_Create_Webhook.json ---
Name: N/A
Description: ## 1. Retrieve existing or get new auth token for webhook.site

--- Workflow: 0589_Manual_Filter_Update_Webhook.json ---
Name: N/A
Description: Get from Zotero Web > Settings > Security:

https://www.zotero.org/settings/security


--- Workflow: 0590_Respondtowebhook_Stickynote_Send_Webhook.json ---
Name: N/A
Description: ## Sub-Agent for scheduling calendar events

--- Workflow: 0591_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ## Template Description

This n8n workflow is designed to manage Fastmail masked email addresses using the Fastmail API. The workflow provides the following functionalities:

1. **Retrieve all masked emails**: Fetches all masked email addresses associated with the Fastmail account.
2. **Create masked email**: Allows creating a new masked email with a specified state (`pending`, `enabled`, etc.).
3. **Update masked email state**: Updates the state of a masked email such as enabling, disabling, or deleting it.
4. **Generate HTML template**: Constructs an HTML table to display the masked emails in a user-friendly format.

## Steps to Make it Work

1. **Webhook Node**: 
   - This node listens for incoming requests to manage masked emails.
   - Needs Basic Authentication credentials to secure the endpoint.

2. **Session Node**: 
   - Sends a request to obtain session information from Fastmail's API.
   - Requires an HTTP Header Auth credential with your Fastmail API token.

3. **Switch Node**: 
   - Routes the workflow based on the state of the incoming masked email request (`pending`, `enabled`, `disabled`, `deleted`).
   
4. **HTTP Request Nodes**:
   - These nodes handle various Fastmail API calls for masked emails (get, set, update, delete).
   - All HTTP Request nodes require an HTTP Header Auth credential attached, using the Fastmail API token.

5. **Set Node**: 
   - Gathers the retrieved masked email list into an array for further processing.

6. **HTML Node**: 
   - Generates an HTML template to render the masked email addresses in a table format.

7. **Respond to Webhook Node**: 
   - Sends back the HTML table to the client in response to the webhook request.

### Needed Credentials

1. **Fastmail Masked E-Mail Addresses**:
   - An API token from Fastmail's API.
   - Each HTTP call to Fastmail requires this credential for authentication.

## Note

- Ensure that you correctly configure authentication for the API calls and webhook security.
- Use your actual Fastmail API credentials with the correct scope.
- The workflow assumes that the Fastmail API is correctly configured and accessible from your n8n instance.
- Update URLs and credentials IDs according to your n8n configuration.

--- Workflow: 0592_Stopanderror_Awss3_Automation_Webhook.json ---
Name: N/A
Description: ## üëá  Configure here
















`folderName` *(optional)* = Subfolder for your Invoices, otherwise it will create in root. e.g: "invoices"

`bucketName` *(required)* = the S3 Bucket Name, where invoices will be synced in

`year` (automatic or hardcore) = 
the expression makes sure it will be exporting "last month". Or define a custom year for manual export.

`month` (automatic or hardcore) = 
the expression makes sure it will be exporting "last month". Or define a custom month for manual export.


**EVERYTHING** greater then the **provided date** will be exported. The Day will be always the first of month.

--- Workflow: 0593_Awss3_Compression_Automate_Triggered.json ---
Name: N/A
Description: ## Instructions

This workflow downloads all Files from a specific folder in a S3 Bucket and compresses them so you can download it via n8n or do further processings.

Fill in your **Credentials and Settings** in the Nodes marked with _"*"_.

![Image](https://let-the-work-flow.com/logo-64.png)
Enjoy the Workflow! ‚ù§Ô∏è 
https://let-the-work-flow.com
Workflow Automation & Development

--- Workflow: 0594_HTTP_Telegram_Create_Webhook.json ---
Name: N/A
Description: SQL query to create table in Supabase:

```
create table
  public.telegram_users (
    id uuid not null default gen_random_uuid (),
    date_created timestamp with time zone not null default (now() at time zone 'utc'::text),
    telegram_id bigint null,
    openai_thread_id text null,
    constraint telegram_users_pkey primary key (id)
  ) tablespace pg_default;
```

--- Workflow: 0595_Filter_Manual_Send_Triggered.json ---
Name: N/A
Description: # Auto Categorise Outlook Emails with AI
Built by [Wayne Simpson](https://www.linkedin.com/in/simpsonwayne/) at [nocodecreative.io](https://nocodecreative.io)

--- Workflow: 0596_Wait_Code_Import_Webhook.json ---
Name: N/A
Description: # Amadeus Flight Bargains
Every day checks for bargain flights for an itinerary and price target of your choosing, and emails you if it finds a match.

## Setup
1. Create an api account on https://developers.amadeus.com/
2. In **Amadeus Flight Search**, connect to Oauth2 API:
  -- Grant Type - Client Credentials
  -- Access Token URL - https://test.api.amadeus.com/v1/security/oauth2/token
  -- Client ID/Secret - from your account
3. Set your details in **Gmail**
4. Set your desired Origin/Destination airports in FromTo
5. Set the dates ahead you wish to search in **Get Dates** (default is 7 days and 14 days)
6. Set the price target in **Under Price**

## Test
Hit 'Test workflow'!

--- Workflow: 0597_Respondtowebhook_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ## Workflow: Text automations using Apple Shortcuts

**Overview**
- This workflow answers user requests sent via Apple Shortcuts
- Several Shortcuts call the same webhook, with a query and a type of query
- Types of query are:
  - translate to english
  - translate to spanish
  - correct grammar (without changing the actual content)
  - make content shorter
  - make content longer


**How it works**
- Select a text you are writing
- Launch the shortcut
- The text is sent to the webhook
- Depending on the type of request, a different prompt is used
- Each request is sent to an OpenAI node
- The workflow responds to the request with the response from GPT
- Shortcut replace the selected text with the new one

**How to use it**
- Activate the workflow
- Download [this Shortcut template](https://drive.usercontent.google.com/u/0/uc?id=16zs5iJX7KeX_4e0SoV49_KfbU7-EF0NE&export=download)
- Install the shortcut
- In step 2 of the shortcut, change the url of the Webhook
- In Shortcut details, "add Keyboard Shortcut" with the key you want to use to launch the shortcut
- Go to settings, advanced, check "Allow running scripts"
- You are ready to use the shortcut. Select a text and hit the keyboard shortcut you just defined


**Notes**
- If you use rich formatting, you'll have to test multiple ways to replace characters in the output. For example, you might use `{{ $json.message.content.output.replaceAll('\n', "<br/>") }}` in the "Respond to Shortcut" node depending on the app you use most.
- This is a basic example that you can extend and modify at your will
- You can duplicate and modify the example shortcut based on your need, as well as making new automations in this workflow.

--- Workflow: 0598_Code_Editimage_Update_Webhook.json ---
Name: N/A
Description: ## Retrieve the Background Image and fetch Meta from the File
### Like Sizes, to properly place the "Top Image" a.k.a "Watermark" a.k.a "Overlay" above the "Background"-Image

--- Workflow: 0599_Telegram_Gmailtool_Send_Triggered.json ---
Name: N/A
Description: ## Process Telegram Request


--- Workflow: 0600_Code_Extractfromfile_Create_Webhook.json ---
Name: N/A
Description: ## 3. Split PDF Pages into Seperate Images

Currently, the vision model we'll be using can't accept raw PDFs so we'll have to convert our PDF to a image in order to use it. To achieve this, we'll use the free [Stirling PDF webservice](https://stirlingpdf.io/) for convenience but if we need data privacy (recommended!), we could self-host our own [Stirling PDF instance](https://github.com/Stirling-Tools/Stirling-PDF/) instead. Alternatively, feel free to swap this service out for one of your own as long as it can convert PDFs into images!

We will ask the PDF service to return each page of our statement as separate images, which it does so as a zip file. Next steps is to just unzip the file and convert the output as a list of images.

--- Workflow: 0601_Extractfromfile_Manual_Create_Webhook.json ---
Name: N/A
Description: ## 1. Download Product Brochure PDF
[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

Import your marketing PDF document to build your vector store. This will be used as the knowledgebase by the Sales AI Agent.

For this demonstration, we'll use the HTTP request node to import the YAMAHA POWERED LOUDSPEAKERS 2024 brochure ([Source](https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf)) and an Extract from File node to extract the text contents. 

--- Workflow: 0602_Wait_Splitout_Send_Webhook.json ---
Name: N/A
Description: ## 1. WhatsApp Trigger
[Learn more about the WhatsApp Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger)

To start receiving WhatsApp messages in your workflow, there are quite a few steps involved so be sure to follow the n8n documentation. When we recieve WhatsApp messages, we'll split out the messages part of the payload and handle them depending on the message type using the Switch node.

--- Workflow: 0603_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## Try It Out!

### This n8n template takes a video and extracts frames from it which are used with a multimodal LLM to generate a script. The script is then passed to the same multimodal LLM to generate a voiceover clip.

This template was inspired by [Processing and narrating a video with GPT's visual capabilities and the TTS API](https://cookbook.openai.com/examples/gpt_with_vision_for_video_understanding)

* Video is downloaded using the HTTP node.
* Python code node is used to extract the frames using OpenCV.
* Loop node is used o batch the frames for the LLM to generate partial scripts.
* All partial scripts are combined to form the full script which is then sent to OpenAI to generate audio from it.
* The finished voiceover clip is uploaded to Google Drive.

Sample the finished product here: https://drive.google.com/file/d/1-XCoii0leGB2MffBMPpCZoxboVyeyeIX/view?usp=sharing


### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

--- Workflow: 0604_Jiratool_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Search For Unresolved Long-lived JIRA Issues
[Learn more about the JIRA node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.jira)

In this demonstration, we'll define "long-lived" as any issue which is unresolved after 7 days. Adjust to fit your own criteria.

We'll also use the Execute Workflow node to run the issues separate in parallel. This is a performance optimisation and if not required, the alternative is to use a loop node instead.

--- Workflow: 0605_Code_Itemlists_Create_Scheduled.json ---
Name: N/A
Description: MOVE CURRENT BACKUPS TO OLD FOLDER

--- Workflow: 0606_HTTP_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ### Template Description
This n8n workflow template allows you to create a masked email address using the Fastmail API, triggered by a webhook. This is especially useful for generating disposable email addresses for privacy-conscious users or for testing purposes.

#### Workflow Details:
1. **Webhook Trigger**: The workflow is initiated by sending a POST request to a specific webhook. You can include `state` and `description` in your request body to customize the masked email's state and description.
2. **Session Retrieval**: The workflow makes an HTTP request to the Fastmail API to retrieve session information. It uses this data to authenticate further requests.
3. **Create Masked Email**: Using the retrieved session data, the workflow sends a POST request to Fastmail's JMAP API to create a masked email. It uses the provided state and description from the webhook payload.
4. **Prepare Output**: Once the masked email is successfully created, the workflow extracts the email address and attaches the description for further processing.
5. **Respond to Webhook**: Finally, the workflow responds to the original POST request with the newly created masked email and its description.

#### Requirements:
- **Fastmail API Access**: You will need valid API credentials for Fastmail configured with HTTP Header Authentication.
- **Authorization Setup**: Optionally set up authorization if your webhook is exposed to the internet to prevent misuse.
- **Custom Webhook Request**: Use a tool like `curl` or create a shortcut on macOS/iOS to send the POST request to the webhook with the necessary JSON payload, like so:
  
  ```bash
  curl -X POST -H 'Content-Type: application/json' https://your-n8n-instance/webhook/87f9abd1-2c9b-4d1f-8c7f-2261f4698c3c -d '{"state": "pending", "description": "my mega fancy masked email"}'
  ```

This template simplifies the process of integrating masked email functionality into your projects or workflows and can be extended for various use cases.

--- Workflow: 0607_Splitout_Aggregate_Automate_Triggered.json ---
Name: N/A
Description: ## Generate SEO Seed Keywords Using AI

This flow uses an AI node to generate Seed Keywords to focus SEO efforts on based on your ideal customer profile

**Outputs:** 
- List of 20 Seed Keywords


**Pre-requisites / Dependencies:**
- You know your ideal customer profile (ICP)
- An AI API account (either OpenAI or Anthropic recommended)

--- Workflow: 0608_Splitout_Code_Import_Webhook.json ---
Name: N/A
Description: **Get data from airtable and check if already done** 

--- Workflow: 0609_Wait_Limit_Import_Webhook.json ---
Name: N/A
Description: **40 at a time seems to be the memory limit on my server - run until complete with batches of 40 or increase based on your server memory**


--- Workflow: 0610_Noop_Twilio_Automate_Scheduled.json ---
Name: Congratulations Workflow
Description: No description found in sticky notes.

--- Workflow: 0611_HTTP_Filter_Automation_Scheduled.json ---
Name: N/A
Description: ## Trigger workflow every 48 hours

This node triggers the workflow to run every 48 hours. You can adjust the frequency if needed to suit your snapshot management requirements.

--- Workflow: 0612_Filter_Slack_Send_Scheduled.json ---
Name: N/A
Description: ## Schedule Mon - Friday @ 09:00am
Triggers the workflow every weekday at 9:00 AM. This ensures that the reminders are sent at the start of the day.


--- Workflow: 0613_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: 

















## 1. Get advice articles from a Google search**
Uses an HTTP request to perform a Google search for LinkedIn advice articles based on a predefined query.

## 2. Extract Article links for LinkedIn advice articles
This Code node extracts LinkedIn article URLs from the Google search results by using a regular expression. It pulls all article links related to LinkedIn advice.

## 3. Split Out all links for LinkedIn advice articles
Splits the list of extracted LinkedIn article links into individual items. This allows each article to be processed one at a time in the following steps.


--- Workflow: 0614_Splitout_Manual_Import_Webhook.json ---
Name: N/A
Description: ## Generate SEO Keyword Search Volume Data using Google API

## Use Case
Generate accurate search volume data for SEO keyword research:
- You have a list of potential keywords to target for your website SEO but don't know their actual search volume
- You need historical data to identify seasonal trends in keyword popularity
- You want to assess keyword difficulty to prioritize your content strategy
- You need data-driven insights for planning your SEO campaigns

## What this Workflow Does
The workflow connects to Google's Keyword Planner API to retrieve keyword metrics for your SEO research:

- Fetches monthly search volume for each keyword
- Provides historical trends data for the past 12 months
- Calculates keyword difficulty scores
- Delivers competition metrics from Google Ads


## Setup
1. Fill the `Set 20 Keywords` with up to 20 Keywords of your choosing in an array e.g. ["keyword 1", "keyword 2",...]
2. Create a Google Ads API account and add credentials to `Get Search Data` node
3. Replace the `Connect to your own database` with your own database for the output


## How to Adjust it to Your Needs
- Change the `Set 20 Keywords` node input to a source of your choosing e.g. Airtable database with 20 keywords
- Connect to output source of your choosing 


Made by Simon @ automake.io

--- Workflow: 0615_Webhook_Filemaker_Create_Webhook.json ---
Name: N/A
Description: ## Script Parameter
Passes the record id as script parameter to be used in your processWebhook script

--- Workflow: 0616_Elasticsearch_Cron_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0617_Manual_Noop_Automation_Webhook.json ---
Name: N/A
Description: **Find and replace image in docx. Connect to a datasource with an image URL you want to insert into the Docx file**

--- Workflow: 0618_Splitout_Code_Create_Scheduled.json ---
Name: N/A
Description: # Monthly Spotify Track Archiving and Playlist Classification

This n8n workflow allows you to automatically archive your monthly Spotify liked tracks in a Google Sheet, along with playlist details and descriptions. Based on this data, Claude 3.5 is used to classify each track into multiple playlists and add them in bulk.

## Who is this template for?
This workflow template is perfect for Spotify users who want to systematically archive their listening history and organize their tracks into custom playlists.

## What problem does this workflow solve?
It automates the monthly process of tracking, storing, and categorizing Spotify tracks into relevant playlists, helping users maintain well-organized music collections and keep a historical record of their listening habits.

## Workflow Overview
- **Trigger Options**: Can be initiated manually or on a set schedule.
- **Spotify Playlists Retrieval**: Fetches the current playlists and filters them by owner.
- **Track Details Collection**: Retrieves information such as track ID and popularity from the user‚Äôs library.
- **Audio Features Fetching**: Uses Spotify's API to get audio features for each track.
- **Data Merging**: Combines track information with their audio features.
- **Duplicate Checking**: Filters out tracks that have already been logged in Google Sheets.
- **Data Logging**: Archives new tracks into a Google Sheet.
- **AI Classification**: Uses an AI model to classify tracks into suitable playlists.
- **Playlist Updates**: Adds classified tracks to the corresponding playlists.

## Setup Instructions
1. **Credentials Setup**:  
   Make sure you have valid Spotify OAuth2 and Google Sheets access credentials.
2. **Trigger Configuration**:  
   Choose between manual or scheduled triggers to start the workflow.
3. **Google Sheets Preparation**:  
   Set up a Google Sheet with the necessary structure for logging track details.
4. **Spotify Playlists Setup**:  
   Have a diverse range of playlists and exhaustive description (see example) ready to accommodate different music genres and moods.

## Customization Options
- **Adjust Playlist Conditions**:  
   Modify the AI model‚Äôs classification criteria to align with your personal music preferences.
- **Enhance Track Analysis**:  
   Incorporate additional audio features or external data sources for more refined track categorization.
- **Personalize Data Logging**:  
   Customize which track attributes to log in Google Sheets based on your archival preferences.
- **Configure Scheduling**:  
   Set a preferred schedule for periodic track archiving, e.g., monthly or weekly.

## Cost Estimate 
For 300 tracks, the token usage amounts to approximately 60,000 tokens (58,000 for input and 2,000 for completion), costing around 20 cents with Claude 3.5 Sonnet (as of October 2024).

--- Workflow: 0619_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ![Imgur](https://uploads.n8n.io/templates/slack.png)
## Events Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). 

The second node extracts the payload from slack into an object that n8n can understand.  

--- Workflow: 0620_Wait_Slack_Automate_Webhook.json ---
Name: N/A
Description: ![Imgur](https://uploads.n8n.io/templates/qualys.png)
For more information about the query that is being performed on the Qualys end, check out the [Manage Scans Documentation](https://qualysguard.qg2.apps.qualys.com/qwebhelp/fo_portal/api_doc/scans/index.htm#t=vm_scans%2Fmanage_vm_scans.htm). The results are returned in XML, which n8n can natively convert to JSON. This allows for easy checking of the status in n8n. 

--- Workflow: 0621_Wait_Slack_Monitor_Webhook.json ---
Name: N/A
Description: ![Slack](https://uploads.n8n.io/templates/slack.png)
## Triggered from Slack Parent Workflow

This section is triggered by the parent n8n workflow, `Qualys Slack Shortcut Bot`. It is triggered when a user fills out the slack modal popup with data and hits the submit button. 

These modals can be customized to perform various actions and are designed to be mobile-friendly, ensuring flexibility and ease of use. 

--- Workflow: 0622_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: **Image Prompt**

Prompt takes input of image description from the `set image description` node and generates using OpenAI

--- Workflow: 0623_Comparedatasets_Manual_Create_Triggered.json ---
Name: N/A
Description: ## Workflow Overview

This workflow automates the process of updating a Spotify playlist with tracks from a YouTube playlist, ensuring no duplicates are added.

## Key Components

1. **Manual Trigger**: Starts the workflow when you click ‚ÄòTest workflow‚Äô.
   
2. **Spotify Integration**: Retrieves tracks from a specified Spotify playlist.

3. **YouTube Integration**: Fetches tracks from a designated YouTube playlist.

4. **Batch Processing**: Processes tracks in batches to handle multiple items efficiently.

5. **Track Search**: Searches for YouTube tracks on Spotify to find corresponding IDs.

6. **Comparison**: Compares existing Spotify tracks with YouTube tracks to identify which ones to add.

7. **Track Addition**: Adds new Spotify tracks to the playlist that are not already included.

If you have any questions or need clarification, feel free to ask!


--- Workflow: 0624_HTTP_Schedule_Send_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0625_Splitout_Code_Create_Triggered.json ---
Name: N/A
Description: ## Overview
### This workflow automates the generation of high-quality content using AI and integrates with tools like Google Drive and Google Sheets for content management and organization.

## Key Features:
- ### **Form-Based Content Input**: Collects user inputs via a form, including title, word count, keywords, and additional instructions.
- ### **AI-Generated Content Outline**: Creates an outline using AI based on user inputs.
- ### **Detailed Section Processing**: Each section of the content is refined individually.
- ### **Content Aggregation**: Combines all sections into a cohesive article.
- ### **Document Management**:
      - Saves generated content and outlines to Google Drive.
      - Updates links to generated content in Google Sheets.

## Prerequisites:
- ### Google Drive and Google Sheets API: Ensure the respective OAuth2 credentials are configured in n8n.
- ### OpenAI API Key: Required for AI-powered content generation.

--- Workflow: 0626_HTTP_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## Never expose or hard code below values 
**tenant_id,client_id,client_secret** 

Always save these either in secure vault like hashicorp or GCP Secret Manager.

--- Workflow: 0627_Wait_Splitout_Create_Scheduled.json ---
Name: N/A
Description: ![Qualys](https://uploads.n8n.io/templates/qualys.png)
Create a new case in TheHive
In this section, we create a new case in TheHive as a container for our PDF report. The case must be created first to have a case ID to use to upload the file as an attachment. 

Each new report generates a case in TheHive, ensuring that the report is properly attached to the created case for better tracking and organization.

For more information about this endpoint, visit the [API quick reference](https://cdn2.qualys.com/docs/qualys-api-quick-reference.pdf)

--- Workflow: 0628_Code_Schedule_Export_Scheduled.json ---
Name: Backup workflows to git repository
Description: Workflow changes committed to the repository

--- Workflow: 0629_Wait_Code_Update_Webhook.json ---
Name: N/A
Description: ### Start Multiple Sub-Workflows Asynchronously
* Note: Callback/Webhook "internal" Base-URL should be configured in the n8n instance to reference the k8s service name and internal port.

--- Workflow: 0630_Code_Webhook_Create_Scheduled.json ---
Name: N/A
Description: # StaticData Demo


This workflow demonstrates how to use the [`workflowStaticData()` function](https://docs.n8n.io/code/cookbook/builtin/get-workflow-static-data/
) to set any type of variable that will persist within workflow executions. 

This can be useful for working with access tokens that expire after a certain time period. 

https://docs.n8n.io/code/cookbook/builtin/get-workflow-static-data/

## Important

Static Data only persists across **_production_** executions, i.e. triggered by Webhooks or Schedule Triggers (not manual executions!)
For this the workflow will have to be activated. 





--- Workflow: 0631_Schedule_Wordpress_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0632_Webhook_Manual_Create_Webhook.json ---
Name: N/A
Description: **Replace API key in Header, webhook from 2nd scenario, change settings if needed**

--- Workflow: 0633_Form_GoogleSheets_Create_Triggered.json ---
Name: N/A
Description: ## Adding to GSheet-List, Creating a OTP / Verification Code



--- Workflow: 0634_Splitout_Manual_Export_Webhook.json ---
Name: N/A
Description: ## Start here: Step-by Step Youtube Tutorial :star:

[![AI Powered Web Scraping : the EASY way with n8n and Jina.ai (no-code!)](https://img.youtube.com/vi/f3AJYXHirr8/sddefault.jpg)](https://youtu.be/f3AJYXHirr8)

[Google Sheet Example](https://docs.google.com/spreadsheets/d/1VDbfi2PpeheD2ZlO6feX3RdMeSsm0XukQlNVW8uVcuo/edit?usp=sharing)




--- Workflow: 0635_GoogleSheets_Webflow_Create_Triggered.json ---
Name: N/A
Description: 1 line of code to take the data object (adding date as a plus)

--- Workflow: 0636_HTTP_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ### Overview  
- This workflow aims to provide data visualization capabilities to a native SQL Agent.  
- Together, they can help foster data analysis and data visualization within a team.  
- It uses the native SQL Agent that works well and adds visualization capabilities thanks to OpenAI‚Äôs Structured Output and Quickchart.io.  

### How it works  
1. Information Extraction:  
   - The Information Extractor identifies and extracts the user's question.  
   - If the question includes a visualization aspect, the SQL Agent alone may not respond accurately.  
2. SQL Querying:  
   - It leverages a regular SQL Agent: it connects to a database, queries it, and translates the response into a human-readable format.  
3. Chart Decision:  
   - The Text Classifier determines whether the user would benefit from a chart to support the SQL Agent's response.  
4. Chart Generation:  
   - If a chart is needed, the sub-workflow dynamically generates a chart and appends it to the SQL Agent‚Äôs response.  
   - If not, the SQL Agent‚Äôs response is output as is.  
5. Calling OpenAI for Chart Definition:  
   - The sub-workflow calls OpenAI via the HTTP Request node to retrieve a chart definition.  
6. Building and Returning the Chart:  
   - In the "Set Response" node, the chart definition is appended to a Quickchart.io URL, generating the final chart image.  
   - The AI Agent returns the response along with the chart.  

### How to use it  
- Use an existing database or create a new one.  
- For example, I've used [this Kaggle dataset](https://www.kaggle.com/datasets/ihelon/coffee-sales/versions/15?resource=download) and uploaded it to a Supabase DB.  
- Add the PostgreSQL or MySQL credentials.  
- Alternatively, you can use SQLite binary files (check [this template](https://n8n.io/workflows/2292-talk-to-your-sqlite-database-with-a-langchain-ai-agent/)).  
- Activate the workflow.  
- Start chatting with the AI SQL Agent.  
- If the Text Classifier determines a chart would be useful, it will generate one in addition to the SQL Agent's response.  

### Notes  
- The full Quickchart.io specifications have not been fully integrated, so there may be some glitches (e.g., radar graphs may not display properly due to size limitations).  

--- Workflow: 0637_HTTP_Schedule_Automation_Webhook.json ---
Name: N/A
Description: ![](https://raw.githubusercontent.com/2innnnn0/30-Days-of-ChatGPT/refs/heads/main/datapopcorn_logo_50px.png)
# Daily Cartoon (w/ AI Translate)

### How it works
- Automates the retrieval of Calvin and Hobbes daily comics.
- Extracts the comic image URL from the website.
- Translates comic dialogues to English and Korean(Other Language)
- Posts the comic and translations to Discord daily.

### Set up steps
- Estimated setup time: ~10-15 minutes.
- Use a **Schedule Trigger** to automate the workflow at 9 AM daily.
- Add nodes for parameter setup, HTTP request, data extraction, and integration with Discord.
- Add detailed notes to each node in the workflow for easy understanding.

--- Workflow: 0638_Splitout_Redis_Create_Webhook.json ---
Name: N/A
Description: 














### üö® Set Interview Topic Here!

--- Workflow: 0639_Wait_Splitout_Send_Webhook.json ---
Name: Google Maps Email Scraper Template
Description: ## üõ† Setup
1. Setup your list of queries in the "Run workflow" manual trigger node. Watch  this [video](https://youtu.be/HaiO-UeiKBA) on how to generate the queries with ChatGPT.
3. Choose a sheet to populate with data in the **Google Sheets node**
4. Run the workflow and start getting leads into your Google Sheets document

--- Workflow: 0640_Wait_Splitout_Create_Scheduled.json ---
Name: N/A
Description: ### 2. Define your welcome message and link here

--- Workflow: 0641_HTTP_Rssfeedread_Create_Webhook.json ---
Name: N/A
Description: ### Configure your credentials
Create [an app password](https://bsky.app/settings/app-passwords) first

--- Workflow: 0642_HTTP_Extractfromfile_Process_Webhook.json ---
Name: N/A
Description: **Add direct link to CV and Job description**

--- Workflow: 0643_Splitout_Snowflake_Import_Scheduled.json ---
Name: Import Productboard Notes, Companies and Features into Snowflake
Description: ## Preview Slack Message
:productboard: Weekly Update in :snowflake_logo: Completed
27 new insights added in the last 7 days.
88 insights remain unprocessed.
You can view the updated :metabase: dashboard below:
<link metabase>


--- Workflow: 0644_Webhook_Slack_Create_Webhook.json ---
Name: N/A
Description: ![slack](https://uploads.n8n.io/templates/slack.png)
## Events Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). The second node extracts the payload from slack into an object that n8n can understand.  

--- Workflow: 0645_Splitout_Code_Sync_Webhook.json ---
Name: Linear Project Status and End Date to Productboard feature Sync
Description: ## Tips
- Avoid copying and pasting the Linear node; instead, add a new one from the menu.
- Remember to configure the custom Productboard field in the "Get Productboard Feature ID" node.

--- Workflow: 0646_Extractfromfile_Form_Export_Webhook.json ---
Name: N/A
Description: ## 1. Application Form To Upload CV
[Learn more the Form Trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/)

Our application process starts with a simple file upload to get the applicant's CV for processing.

--- Workflow: 0647_GoogleCalendar_Form_Create_Triggered.json ---
Name: N/A
Description: ## 1. Qualify Enquiries Using AI
[Learn more about the text classifier](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier/)

With n8n's multi-forms, you‚Äôre no longer stuck creating long, overwhelming forms. Instead, you have more flexibility and control to design smarter, more engaging form experiences.

In this demo, we‚Äôll explore an appointment request scenario where a user wants to schedule a call to discuss their inquiry. However, not all inquiries require a meeting, making it a perfect use case for AI to pre-qualify the request. We can handle this validation using the text classifier node.

--- Workflow: 0648_Form_GoogleSheets_Create_Triggered.json ---
Name: N/A
Description: ## 1. Easy Lead Capture with n8n Forms
[Learn more about Form Triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger)

Previously, the n8n form experience was quite limited as you were only given one form page to work with. Now with multi-page forms where its possible to link between them, you can get creative on providing a richer form experience for your users.

Here, we start by capturing the most important information first - the user's email address - and saving it to our Google Sheet. We can then follow-up with an optional short onboarding survey to capture more details about the user if they are willing.

--- Workflow: 0649_Splitout_GoogleCalendar_Create_Webhook.json ---
Name: N/A
Description: ## 1. Periodically Search For Upcoming Meetings
[Read about the Scheduled Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger)

Let's use the Scheduled Trigger node to trigger our Assistant to notify about upcoming meetings. Here, we'll set it for 1 hour intervals to check for meetings scheduled in our Google Calendar. You may need to play with the intervals and frequency depending on how many meetings you typically have.

--- Workflow: 0650_Splitout_Webhook_Create_Webhook.json ---
Name: N/A
Description: ![Imgur](https://i.imgur.com/iKyMV0N.png)
## Events Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). 

The second node extracts the payload from slack into an object that n8n can understand.  

--- Workflow: 0651_Code_Schedule_Create_Webhook.json ---
Name: N/A
Description: ## Trigger
Set the trigger to run when you like

--- Workflow: 0652_Splitout_Schedule_Create_Scheduled.json ---
Name: N/A
Description: Change **url** for Github Repo here

--- Workflow: 0653_Manual_Convertkit_Create_Triggered.json ---
Name: Add subscriber to form, create tag and subscriber to the tag
Description: No description found in sticky notes.

--- Workflow: 0654_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Try It Out!
### This template is an example of how you could replace Airtable or Baserow forms with n8n forms. Though debateable whether this is actually useful, it is a cool demo of how someone would approach this if it every became a problem.

## How it works
* A form trigger is used to dynamically select a database/table from which to build the n8n form from.
* the table's schema is imported into the workflow and using the code node, is converted into the n8n form fields schema.
* This let's us dynamically build the fields in our n8n form when we choose to define the form using the JSON option.
* Once the n8n form submits, we convert the values back into our table's API schema so that we can create a new row.
* Note any files/attachments fields are removed as they need to be handled separately.
* Files are processed separately as they may first need to be stored. Once complete, the reference is saved into the newly created row.


**Check out the example Airtable here** - [https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU](https://airtable.com/appfP15Xd0aVZR9xV/shrGFgXLyQ4Jg58SU)


‚≠êÔ∏è [**New to Airtable? Sign up here!**](https://airtable.com/invite/r/cKzxFYVc)

## How to use
* The n8n form is autogenerated which means you only need provide access to the table. Using this approach, this template can be reused for any number of Airtable and/or Baserow tables.

### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

Happy Hacking!


--- Workflow: 0655_Code_Postgres_Update_Scheduled.json ---
Name: N/A
Description: ## HUBSPOT LIFECYCLESTAGE (LEAD STATUS)

--- Workflow: 0656_Postgrestool_Stickynote_Send_Triggered.json ---
Name: N/A
Description: **Replace password and username for Supabase**

--- Workflow: 0657_Splitout_Schedule_Update_Webhook.json ---
Name: N/A
Description: 

--- Workflow: 0658_Code_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ### 4. Using Subworkflows to run executions concurrently
This configuration is desired when sequential execution is slow and unnecessary. Also if one email fails, it doesn't fail the execution for everyone else.

--- Workflow: 0659_Splitout_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Fetch Latest AI Grants, Ignore Those Already Seen
[Learn more about the Remove Duplicates node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/)

A cool feature of n8n's remove duplicates node is that it works across executions. What this means for this template is that the node will help us keep track of grant IDs to know if we've already processed them and if so, filter them out so we won't have duplicate alerts.

--- Workflow: 0660_Calendly_Noop_Create_Triggered.json ---
Name: N/A
Description: ### Introduction
This workflow streamlines the integration between Calendly and KlickTipp, managing bookings and cancellations dynamically while ensuring accurate data transformation and seamless synchronization. Input data is validated and formatted to meet KlickTipp‚Äôs API requirements, including handling guests, rescheduling, and cancellations.

### Benefits
- **Improved scheduling management**: Automatically processes bookings and cancellations in Calendly, saving time and reducing errors. Contacts are automatically imported into KlickTipp and can be used immediately, saving time and increasing the conversion rate.
- **Automated processes**: Experts can start workflows directly, such as welcome emails or course admissions, reducing administrative effort.
- **Error-free data management**: The template ensures precise data mapping, avoids manual corrections, and reinforces a professional appearance.

### Key Features
- **Calendly Trigger**: Captures booking and cancellation events, including invitee and guest details.
- **Data Processing**: Validates and standardizes input fields:
  - Converts dates to UNIX timestamps for API compatibility.
  - Processes guests dynamically, splitting guest emails into individual records.
  - Validates invitee email addresses to ensure accuracy.
- **Subscriber Management in KlickTipp**: Adds or updates invitees and guests as subscribers in KlickTipp. Supports custom field mappings such as:
  - Invitee information: Name, email, booking details.
  - Event details: Start/end times, timezone, and guest emails.
- **Error Handling**: Differentiates between cancellations and rescheduling, preventing redundant or incorrect updates.

#### Setup Instructions
1. Install the required nodes:
   - Ensure the KlickTipp community node and its dependencies are installed.
2. Authenticate your Calendly and KlickTipp accounts.
3. Pre-create the following custom fields in KlickTipp to align with workflow requirements.
4. Open each KlickTipp node and map the fields to align with your setup.

![Screenshot Description](https://mail.cdndata.io/user/images/kt1073234/share_link_calendly_fields_v2.png)

### Testing and Deployment
1. Test the workflow by triggering a Calendly event.
2. Verify that the invitee and guest data is updated accurately in KlickTipp.

- **Customization**: Adjust field mappings within KlickTipp nodes to match your specific account setup.



--- Workflow: 0661_Calendly_Noop_Create_Triggered.json ---
Name: N/A
Description: ### Introduction
This workflow streamlines the integration between Calendly and KlickTipp, managing bookings and cancellations dynamically while ensuring accurate data transformation and seamless synchronization. Input data is validated and formatted to meet KlickTipp‚Äôs API requirements, including handling guests, rescheduling, and cancellations.

### Benefits
- **Improved scheduling management**: Automatically processes bookings and cancellations in Calendly, saving time and reducing errors. Contacts are automatically imported into KlickTipp and can be used immediately, saving time and increasing the conversion rate.
- **Automated processes**: Experts can start workflows directly, such as welcome emails or course admissions, reducing administrative effort.
- **Error-free data management**: The template ensures precise data mapping, avoids manual corrections, and reinforces a professional appearance.

### Key Features
- **Calendly Trigger**: Captures booking and cancellation events, including invitee and guest details.
- **Data Processing**: Validates and standardizes input fields:
  - Converts dates to UNIX timestamps for API compatibility.
  - Processes guests dynamically, splitting guest emails into individual records.
  - Validates invitee email addresses to ensure accuracy.
- **Subscriber Management in KlickTipp**: Adds or updates invitees and guests as subscribers in KlickTipp. Supports custom field mappings such as:
  - Invitee information: Name, email, booking details.
  - Event details: Start/end times, timezone, and guest emails.
- **Error Handling**: Differentiates between cancellations and rescheduling, preventing redundant or incorrect updates.

#### Setup Instructions
1. Install the required nodes:
   - Ensure the KlickTipp community node and its dependencies are installed.
2. Authenticate your Calendly and KlickTipp accounts.
3. Pre-create the following custom fields in KlickTipp to align with workflow requirements.
4. Open each KlickTipp node and map the fields to align with your setup.

![Screenshot Description](https://mail.cdndata.io/user/images/kt1073234/share_link_calendly_fields_v2.png)

### Testing and Deployment
1. Test the workflow by triggering a Calendly event.
2. Verify that the invitee and guest data is updated accurately in KlickTipp.

- **Customization**: Adjust field mappings within KlickTipp nodes to match your specific account setup.



--- Workflow: 0662_Manual_Schedule_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0663_Splitout_Schedule_Update_Scheduled.json ---
Name: N/A
Description: ## 1. Continuously Monitor Active Linear Issues
[Learn more about the GraphQL node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.graphql)

To keep up with the latest changes in our active Linear tickets, we'll need to use Linear's GraphQL endpoint because filtering is currently unavailable in the official Linear.app node.

For this demonstration, we'll check for updated tickets every 30mins.

--- Workflow: 0664_Splitout_Limit_Create_Webhook.json ---
Name: N/A
Description: ## 1. Import Existing Content
[Read more about the HTML node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)

First, we'll need to gather existing content for the brand voice we want to replicate. This content can be blogs, social media posts or internal documents - the idea is to use this content to "train" our AI to produce content from the provided examples. One call out is that the quality and consistency of the content is important to get the desired results.

In this demonstration, we'll grab the latest blog posts off a corporate blog to use as an example. Since, the blog articles are likely consistent because of the source and narrower focus of the medium, it'll serve well to showcase this workflow.

--- Workflow: 0665_Code_Editimage_Update_Webhook.json ---
Name: N/A
Description: Fig 1. Output of Object Detection
![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/download_1_qmqyyo#full-width)

--- Workflow: 0666_Postgres_Webhook_Create_Webhook.json ---
Name: N/A
Description: ### ... or watch set up video [10 min]
[![Youtube Thumbnail](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773273/Youtube%20Thumbs/Realtim%20AI%20Agent.png)](https://www.youtube.com/watch?v=rtaX6BMiTeo)


--- Workflow: 0667_Code_GitHub_Create_Scheduled.json ---
Name: N/A
Description: ## Subworkflow

--- Workflow: 0668_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## Stage 1 - Research for API Documentation
- Fetch a list of services pending research from Database (Google Sheet)
- Uses a search engine (Google) to find API Documentation for each service
- Uses Webscraper (Apify) to read the contents of search results to filter irrelevant pages
- Stores webpage contents and metadata into Vector Store (Qdrant)

--- Workflow: 0669_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: ## Scenario 1



--- Workflow: 0670_Code_Microsoftoutlook_Create_Webhook.json ---
Name: N/A
Description: ![Gmail](https://uploads.n8n.io/templates/gmail.png)
## Gmail Integration and Data Extraction

This section of the workflow connects to a Gmail account using the **Gmail Trigger** node, capturing incoming emails in real-time, with checks performed every minute. Once an email is detected, its key components‚Äîsuch as the subject, recipient, body, and headers‚Äîare extracted and assigned to variables using the **Set Gmail Variables** node. These variables are structured for subsequent analysis and processing in later steps.

--- Workflow: 0671_Code_Converttofile_Create_Webhook.json ---
Name: N/A
Description: ![hctiapi](https://uploads.n8n.io/templates/hctiapi2.png)
## Email Body Screenshot Creation

The **Screenshot HTML** node sends the email's HTML body to the **hcti.io** API, generating a screenshot that visually represents the email's layout. The **Retrieve Screenshot** node then fetches this image, making it available for attachment or review in subsequent steps. This dual-format processing ensures both clarity and flexibility in email analysis workflows.

--- Workflow: 0672_Webhook_Schedule_Update_Webhook.json ---
Name: N/A
Description: # Try me out !
## Dummy Ugly Workflow
---
Try mixing it up of changing some connections to see how this workflow gets positionned !

1. **Save this workfow** (Ctrl + S)
2. **Execute the Magic Positioning Node**
3. **Reload the page** (Ctrl + R)
..watch the magic !

--- Workflow: 0673_Limit_Code_Create_Webhook.json ---
Name: N/A
Description: ![](https://uploads.n8n.io/templates/outlook.png)
## **Testing Email Header Analysis Workflow**

This section of the workflow is designed for testing purposes to ensure that the setup functions correctly with your Outlook email client before deploying it as an API for third-party platforms. The process begins with the `Trigger on New Email` node, which monitors a specified folder in your Outlook mailbox and triggers the workflow whenever a new email arrives. Configured to poll every minute, it ensures timely detection and processing of incoming emails.

Once an email is detected, the `Retrieve Headers of Email` node uses the Microsoft Graph API to fetch the detailed headers of the new email. These headers contain critical metadata, such as routing information and authentication results, essential for the analysis of the email's origin and legitimacy.

Finally, the `Set Headers Here` node extracts and organizes the email headers into a standardized format as an array called `headers`. This structured format prepares the email data for further processing in the subsequent sections of the workflow. By validating these steps, you can confirm the workflow is functioning correctly before integrating it into broader use cases.

--- Workflow: 0674_Limit_Webhook_Automation_Webhook.json ---
Name: N/A
Description: ![](https://uploads.n8n.io/templates/gmaillogo.png)  
## **Testing Email Header Analysis Workflow**

This section of the workflow is designed for testing purposes to ensure that the setup functions correctly with your Gmail email client before deploying it as an API for third-party platforms. The process begins with the `Gmail Trigger` node, which monitors your Gmail inbox and triggers the workflow whenever a new email arrives.

Once an email is detected, the `Set Gmail Headers Here` node extracts the email headers from the detected email and organizes them into a standardized format as an object called `headers`. This prepares the email data for further processing in subsequent sections of the workflow. By validating these steps, you can confirm the workflow is functioning correctly before integrating it into broader use cases.

--- Workflow: 0675_Limit_Code_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0676_Telegram_Splitout_Import_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0677_Gmailtool_Splitout_Create_Webhook.json ---
Name: N/A
Description: ### Replace API key for Fireflies


--- Workflow: 0678_Manual_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: The document node serves as sample source for `twitch` username to check


--- Workflow: 0679_Telegram_Splitout_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0680_Splitout_HTTP_Send_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0681_Aggregate_HTTP_Create_Webhook.json ---
Name: N/A
Description: ### Replace Mapbox public key - <your_public_key> in code

--- Workflow: 0682_Datetime_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ![Slack](https://uploads.n8n.io/templates/slack.png)
## Sorting and Posting Incident Details to Slack

This section begins with the `Sort Incidents in Ascending Order` node, which organizes the retrieved ServiceNow incidents by their incident number in ascending order. This ensures that incidents are processed and displayed in a logical sequence. The sorted incidents are then passed to the `Post Incident Details to Slack Channel` node, which formats and sends a detailed message to a designated Slack channel. The message includes key information such as the incident ID, description, severity, caller, priority, state, category, and the date the incident was opened. A "View Incident" button is also provided, linking directly to the ServiceNow record for quick access. This section ensures clear, organized communication of incident details, enabling efficient team collaboration and resolution.

--- Workflow: 0683_Webhook_Telegram_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0684_Stickynote_Respondtowebhook_Send_Webhook.json ---
Name: N/A
Description: ![Slack](https://uploads.n8n.io/templates/slack.png)
## Receive Slack Webhook Slash Command

This section begins with the `Webhook` node, which listens for incoming Slack Slash Command requests. When triggered, it extracts the incident ID from the request payload using the `Extract Incident ID from Response` node. The incident ID is then passed forward for further processing. This setup allows users to initiate ServiceNow incident lookups directly from Slack.


--- Workflow: 0685_Limit_Webhook_Send_Webhook.json ---
Name: N/A
Description: ![Slack](https://uploads.n8n.io/templates/servicenowmodalinterface.png)
## Slack Modal Interface

When triggered, Slack will display this interface to allow Slack users to search ServiceNow for tickets based on priority and state, and then allow you to choose which channel to output the results. If no channel is found, the response will be sent to the Slack user via DM. 

--- Workflow: 0686_Code_Webhook_Update_Webhook.json ---
Name: N/A
Description: ## Testing 

Testing can be done with CURL or similar.

For File posting using Form Data
curl -X POST "https://yoururl.com/webhook-test/tool/csv-to-json" \
     -H "Content-Type: text/csv" \
     --data-binary @path/to/your/file.csv


This can also be tested using the Test workflow

--- Workflow: 0687_HTTP_Form_Automation_Webhook.json ---
Name: N/A
Description: **Summarize YouTube videos**

This project automates the summarization of YouTube videos, transforming lengthy content into concise, actionable insights. By leveraging AI and workflow automation, it extracts video transcripts, analyzes key points, and generates summaries, saving time for content creators, researchers, and professionals. Perfect for staying informed, conducting research, or repurposing video content efficiently.

--- Workflow: 0688_HTTP_Webhook_Process_Webhook.json ---
Name: Transform Image to Lego Style Using Line and Dall-E
Description: No description found in sticky notes.

--- Workflow: 0689_Stickynote_Gmail_Create_Triggered.json ---
Name: N/A
Description: ## Gmail trigger
Poll Gmail every x minutes, trigger when a new email is received.

- Gmail API

--- Workflow: 0690_Telegram_Webhook_Send_Webhook.json ---
Name: N/A
Description: ## API Key for Proxmox
** Create Credentails *** ensure to create credentials in Proxmox Data Center as API Key and then create credentails. 
** Add Credentials to n8n ** Click on Credentails, add new Credentails and Chose Header Auth
** In Header Auth Below will be used 
Name : Authorization
Value : PVEAPIToken=<user>@<realm>!<token-id>=<token-value>

Suppose my token id is n8n and key is 1234 so value will be as below

Value : PVEAPIToken=root@pam!n8n=1234


--- Workflow: 0691_Aggregate_Jotform_Create_Triggered.json ---
Name: N/A
Description: ### Introduction
This workflow streamlines the process of handling webinar registrations submitted via JotForm. It ensures the data is correctly formatted and seamlessly integrates with KlickTipp. Input data is validated and transformed to meet KlickTipp‚Äôs API requirements, including formatting phone numbers, converting dates, and validating URLs.

### Benefits
- **Efficient lead generation**: Contacts from forms are automatically imported into KlickTipp and can be used immediately, saving time and increasing the conversion rate.
- **Automated processes**: Experts can start workflows directly, such as welcome emails or course admissions, reducing administrative effort.
- **Error-free data management**: The template ensures precise data mapping, avoids manual corrections, and reinforces a professional appearance.

### Key Feature
- **JotForm Trigger**: Captures new form submissions, including participant details and webinar preferences.
- **Data Processing**: Standardizes and validates input fields:
  - Converts phone numbers to numeric-only format with international prefixes.
  - Transforms dates into UNIX timestamps.
  - Validates LinkedIn URLs and applies fallback URLs if validation fails.
  - Scales numerical fields, such as work experience, for specific use cases.
- **Subscriber Management in KlickTipp**: Adds or updates participants as subscribers in KlickTipp. Includes custom field mappings and tags, such as:
  - Personal information: Name, email, phone number.
  - Webinar details: Chosen webinar, start date/time.
  - Preferences: Reminder intervals, questions for presenters.
  - Contact segmentation: Creates new tags based on form submission if necessary and adds these dynamic tags as well as fixed tags to contacts.

- **Error Handling**: Validates critical fields like phone numbers, URLs, and dates to prevent incorrect data submissions.

#### Setup Instructions
1. Set up the JotForm and KlickTipp nodes in your n8n instance.
2. Authenticate your JotForm and KlickTipp accounts.
3. Create the necessary custom fields to match the data structure
4. Verify and customize field assignments in the workflow to align with your specific form and subscriber list setup.
![Source example](https://mail.cdndata.io/user/images/kt1073234/share_link_jotform_fields.png#full-width)

### Testing and Deployment:
1. Test the workflow by filling the form on JotForm.
2. Verify data updates in KlickTipp.

- **Customization**: Update field mappings within the KlickTipp nodes to align with your account setup. This ensures accurate data syncing.

--- Workflow: 0692_Webhook_Code_Update_Webhook.json ---
Name: N/A
Description: ### Get Apprropraite Data
These Nodes are to extract only the Required Data from the Webhook Node

--- Workflow: 0693_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: ### Filter the Lead
I have done only for theose which are open and where the source is Website. You can remove this if you want to have all leads.

--- Workflow: 0694_Extractfromfile_Manual_Automation_Webhook.json ---
Name: N/A
Description: ## Workflow: Extract data from PDF with Claude 3.5 Sonnet or Gemini 2.0 Flash

**Overview**
- This workflow helps you compare Claude 3.5 Sonnet and Gemini 2.0 Flash when extracting data from a PDF
- This workflow extracts and processes the data within a PDF in **one single step**, **instead of calling an OCR and then an LLM‚Äù**


**How it works**
- The initial 2 steps download the PDF and convert it to base64.
- This base64 string is then sent to both Claude 3.5 Sonnet and Gemini 2.0 Flash to extract information.
- This workflow is made to let you compare results, latency, and cost (in their dedicated dashboard).


**How to use it**
- Set up your Google Drive if not already done
- Select a document on your Google Drive
- Modify the prompt in "Define Prompt" to extract the information you need and transform it as wanted.
- Get a [Claude API key](https://console.anthropic.com/settings/keys) and/or [Gemini API key](https://aistudio.google.com/app/apikey)
- Note that you can deactivate one of the 2 API calls if you don't want to try both
- Test the Workflow


--- Workflow: 0695_Aggregate_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ### Introduction
This workflow facilitates seamless integration between Gravity Forms and KlickTipp, automating the process of handling customer feedback. By transforming raw form data into a format compatible with KlickTipp‚Äôs API, it eliminates manual data entry and ensures accurate, consistent information. The workflow relies on community nodes and is available exclusively for self-hosted n8n environments.

### Benefits
- **Efficient feedback management**: Automatically processes Gravity Forms submissions, saving time and ensuring timely data handling.
- **Automation of workflows**: Launch follow-up actions like sending thank-you emails or surveys without manual intervention.
- **Improved data accuracy**: Validates and transforms input data, minimizing errors and maintaining a professional database.

### Key Features
- **Gravity Forms Trigger**: Captures new form submissions using a webhook, including user feedback and preferences.
- **Data Processing and Transformation**:
  - Converts phone numbers to numeric-only format with international prefixes.
  - Transforms date fields (e.g., birthdays) into UNIX timestamps.
  - Scales numerical responses like feedback ratings to match desired formats.
- **Subscriber Management in KlickTipp**: Adds or updates participants as subscribers in KlickTipp. Includes custom field mappings and tags, such as:
  - Personal details (e.g., name, email, phone number).
  - Feedback specifics (e.g., webinar ratings, selected sessions).
  - Structured answers from Gravity Forms responses.
  - Contact segmentation: Creates new tags based on form submission if necessary and adds these dynamic tags as well as fixed tags to contacts.
- **Error Handling**: Ensures invalid or missing data does not disrupt the workflow, providing fallback values where needed.

### Setup Instructions
1. Set up the Webhook and KlickTipp nodes in your n8n instance.
2. Connect your Webhook to Gravity Forms and authenticate your KlickTipp account.
3. Create the necessary custom fields to match the data structure
4. Verify and customize field assignments in the workflow to align with your specific form and subscriber list setup.

![Source example](https://mail.cdndata.io/user/images/kt1073234/share_link_GravityForms_fields.png#full-width)

### Testing and Deployment
1. Test the workflow by submitting a form through Gravity Forms.
2. Verify that the data is correctly processed and updated in KlickTipp.
3. Simulate various scenarios (e.g., missing or invalid data) to ensure robust error handling.

- **Customization**: Update field mappings within the KlickTipp nodes to ensure alignment with your specific account setup.  



--- Workflow: 0696_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: ### 1. Get Table Schema
[Learn more about the Airtable node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable/)

For this operation, we'll use the handy Airtable node. I recommend getting familiar with this node for all your Airtable needs!


--- Workflow: 0697_Aggregate_Typeform_Create_Triggered.json ---
Name: N/A
Description: ### Introduction
This workflow facilitates seamless integration between Typeform and KlickTipp, automating the process of handling quiz responses. By transforming raw quiz data into a format compatible with KlickTipp‚Äôs API, it eliminates manual data entry and ensures accurate, consistent information. 

### Benefits
- **Efficient lead generation**: Contacts from forms are automatically imported into KlickTipp and can be used immediately, saving time and increasing the conversion rate.
- **Automated processes**: Experts can start workflows directly, such as welcome emails or course admissions, reducing administrative effort.
- **Error-free data management**: The template ensures precise data mapping, avoids manual corrections, and reinforces a professional appearance.

### Key Features
- **Typeform Trigger**: Captures new quiz submissions, including user details and quiz responses.
- **Data Processing and Transformation**:
  - Formats phone numbers to numeric-only format with international prefixes.
  - Converts dates (e.g., birthdays) to UNIX timestamps.
  - Maps multiple-choice quiz answers to string values for API compatibility.
  - Scales numeric quiz responses for tailored use cases.
- **Subscriber Management in KlickTipp**: Adds or updates participants as subscribers in KlickTipp. Includes custom field mappings and tags, such as:
  - Personal details (e.g., name, email, phone number, birthday).
  - Quiz responses (e.g., intended usage of KlickTipp, company location, and team size).
  - Contact segmentation: Creates new tags based on form submission if necessary and adds these dynamic tags as well as fixed tags to contacts.
- **Error Handling**: Handles empty or malformed data gracefully, ensuring clean submissions to KlickTipp.

### Setup Instructions
1. Set up the Typeform and KlickTipp nodes in your n8n instance.
2. Connect your Typeform webhook to capture quiz responses and authenticate your KlickTipp account.
3. Create the necessary custom fields to match the data structure:
4. Verify and customize field mappings in the workflow to align with your specific form and subscriber list setup.

![Source example](https://mail.cdndata.io/user/images/kt1073234/share_link_TypeForms_fields.png#full-width)

### Testing and Deployment
1. Test the workflow by submitting a quiz through Typeform.
2. Verify that the data is correctly processed and updated in KlickTipp.

- **Customization**: Update field mappings within the KlickTipp nodes to ensure alignment with your specific account setup.  

--- Workflow: 0698_Splitout_Code_Automation_Triggered.json ---
Name: N/A
Description: ## Remove PII from CSV Files
This workflow monitors a Google Drive folder for new CSV files, identifies and removes PII columns using OpenAI, and uploads the sanitized file back to the drive. It requires Google Drive and OpenAI integrations with API access enabled.

--- Workflow: 0699_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ### 1. Get Table Schema
[Learn more about the HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

For this operation, we'll have to use the Baserow API rather than the built-in node. However, this way does allow for more flexibility with query parameters.


--- Workflow: 0700_Code_Respondtowebhook_Send_Webhook.json ---
Name: N/A
Description: Ensure these referance this workflow, replace placeholders

--- Workflow: 0701_Code_Strava_Send_Triggered.json ---
Name: N/A
Description: ### Customer Experience Agent (AI)
The AI Triathlon Coach is an intelligent, data-driven virtual assistant designed to help triathletes optimize their training and performance across swimming, cycling, and running. Using advanced algorithms, it analyzes activity data from platforms like Strava and provides actionable insights tailored to the athlete‚Äôs goals, experience level, and specific disciplines.
This is connected to Gemini 2.0 Flash



--- Workflow: 0702_Webhook_GoogleCalendar_Create_Webhook.json ---
Name: N/A
Description: ![voiceflow](https://uploads.n8n.io/templates/voiceflow.png)
## Find Customer
This portion of the workflow queries the customer database and returns customer details to the AI agent if found. If not found, it returns NOT_FOUND for the customer details. 

--- Workflow: 0703_Manual_Sentryio_Create_Triggered.json ---
Name: Create a release and get all releases
Description: No description found in sticky notes.

--- Workflow: 0704_Telegram_Automate_Triggered.json ---
Name: N8N Espa√±ol - BOT
Description: No description found in sticky notes.

--- Workflow: 0705_Telegram_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0706_Code_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## Get Threads API Access Token

Get Threads Access Token Tutorial and ID/ÊïôÂ≠∏ [Link](https://nijialin.com/2024/08/17/python-threads-sdk-introduction/)

Please get your access token and Threads ID first before you start
(It only need to run once)

--- Workflow: 0707_HTTP_Stripe_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0708_Code_Filter_Update_Webhook.json ---
Name: N/A
Description: ## Create a Google sheet
With just one column named "linkedin_url" and fill it with the profiles you want to enrich

--- Workflow: 0709_Code_HTTP_Create_Webhook.json ---
Name: N/A
Description: ## Personalize here

### Set: 
- your name
- your company name
- your company activity, used to find a match with your leads
- your email, used as the sender

--- Workflow: 0710_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ## Credentials Setup

1/ Go to the perplexity dashboard, purchase some credits and create an API Key

https://www.perplexity.ai/settings/api

2/ In the perplexity Request node, use Generic Credentials, Header Auth. 

For the name, use the value "Authorization"
And for the value "Bearer pplx-e4...59ea" (Your Perplexity Api Key)



--- Workflow: 0711_Schedule_Slack_Create_Scheduled.json ---
Name: N/A
Description: ## Setup
1. Add MongoDB, Slack credentials
2. Add a query auth credential where the key='token' and the value being your apify token
3. Modify the 'Assign parameters' node to include the Upwork URLs you want to query for

--- Workflow: 0712_Splitout_Code_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0713_Manual_HTTP_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0714_Splitout_Zendesk_Update_Triggered.json ---
Name: N/A
Description: ![n8n](https://uploads.n8n.io/templates/qdrantlogo.png)
## Embed your Vector Store
To provide data for your Vector store, you need to pass it in as JSON, and ensure it's setup correctly. This flow pulls the JSON file from Google Drive and extracts the JSON data and then passes it into the qdrant collection. 

--- Workflow: 0715_Wait_Schedule_Create_Scheduled.json ---
Name: N/A
Description: # Match Spotify Tracks to YouTube Videos  

## This part finds the best YouTube video for a Spotify track using the YouTube Data API v3. It searches with the track title and artist, retrieves the top 5 videos, and selects the first one with a duration within ¬±10% of the Spotify track length. The matched video is added to a YouTube playlist, and its ID is saved in the database.  

## Operation:
- ## Uses Spotify data (title + artist) for search.
- ## Ensures duration accuracy (¬±10% tolerance).  
- ## Automates playlist updates and database storage.

--- Workflow: 0716_Wait_Webhook_Process_Webhook.json ---
Name: N/A
Description: ## Independent "Async" Process
This could be anything that eventually triggers another workflow and passes through something (e.g. resumeUrl) that identifies the original workflow execution that needs to be joined.
For instance, this could be a Telegram conversation where the trigger is watching for a message containing a "reply" to something that was originally sent out via Telegram.

--- Workflow: 0717_HTTP_Schedule_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0718_Code_GitHub_Create_Scheduled.json ---
Name: N/A
Description: ## Subworkflow

--- Workflow: 0719_Stopanderror_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## 2. Ask Clarifying Questions
[Read more about form nodes](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form/)

To handle the clarification questions generated by the LLM, I used the same technique found in my "AI Interviewer" template ([link](https://n8n.io/workflows/2566-conversational-interviews-with-ai-agents-and-n8n-forms/)).
This involves a looping of dynamically generated forms to collect answers from the user.

--- Workflow: 0720_Schedule_Filter_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0721_Wordpress_Converttofile_Process_Triggered.json ---
Name: N/A
Description: ### Adjust fields
You can add more fields to the CSV file by editing this node

--- Workflow: 0722_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: Automate Drive-To-Store Lead Generation System (with coupon) on SuiteCRM
Description: ## STEP 1

Create a Google Sheet like this (Fill only the column "COUPON")

[![2mXGVwB.md.png](https://iili.io/2mXGVwB.md.png)]

This is the basic Google Sheet used in [this Workflow](https://docs.google.com/spreadsheets/d/1lnRZodxZSOA0QSuzkAb7ZJcfFfNXpX7NcxMdckMTN90/edit?usp=drive_link):



--- Workflow: 0723_Convertkit_Create_Triggered.json ---
Name: Receive updates when a subscriber is added through a form in ConvertKit
Description: No description found in sticky notes.

--- Workflow: 0724_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Either use the official Notion getAll: Blocks node
This removes formatting like bold and links. 

--- Workflow: 0725_Splitout_Code_Update_Triggered.json ---
Name: N/A
Description: ## Build a summary

This is useful to run it in an agentic workflow. You may remove the summary part and return the raw array with the found issues.

--- Workflow: 0726_Code_Schedule_Update_Scheduled.json ---
Name: N/A
Description: ## VPS upgrade notify 
This workflow will everyday check if server has upgradable packages and inform you by email if there is.

--- Workflow: 0727_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ### The conversation history(last 20 messages) is stored in a buffer memory

--- Workflow: 0728_Manual_GoogleSheets_Update_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0729_Schedule_Stickynote_Send_Scheduled.json ---
Name: N/A
Description: ## Update email addresses
Update From and To email addresses in this node to receive notifications

--- Workflow: 0730_Splitout_Noop_Send_Triggered.json ---
Name: N/A
Description: ## Reference "Single" Binary Using Expressions
This contains examples of how to reference a single binary in each input item **regardless of its key name.**

--- Workflow: 0731_Splitout_Limit_Create_Webhook.json ---
Name: N/A
Description: ## This node fetches the main BBC News page, which contains links to various news articles.

--- Workflow: 0732_Form_Youtube_Update_Triggered.json ---
Name: N/A
Description: ## Developed by Amjid Ali

Thank you for using this workflow template. It has taken me countless hours of hard work, research, and dedication to develop, and I sincerely hope it adds value to your work.

If you find this template helpful, I kindly ask you to consider supporting my efforts. Your support will help me continue improving and creating more valuable resources.

You can contribute via PayPal here:

http://paypal.me/pmptraining

For Full Course about ERPNext or Automation using AI follow below link

http://lms.syncbricks.com

Additionally, when sharing this template, I would greatly appreciate it if you include my original information to ensure proper credit is given.

Thank you for your generosity and support!
Email : amjid@amjidali.com
https://linkedin.com/in/amjidali
https://syncbricks.com
https://youtube.com/@syncbricks

--- Workflow: 0733_Form_Code_Create_Triggered.json ---
Name: N/A
Description: # üóÇÔ∏è Bulk File Upload to Google Drive with Folder Management

## Overview
This workflow processes a form submission that accepts:
- Multiple file uploads (any format)
- Target folder name input

The workflow automatically:
- Checks if the specified folder exists in Google Drive
- Creates the folder if it doesn't exist
- Uploads all files to the correct folder
- Maintains original file names and structure

Perfect for batch uploading files while keeping your Drive organized!


--- Workflow: 0734_Manual_HTTP_Create_Webhook.json ---
Name: Generate Image Workflow
Description: No description found in sticky notes.

--- Workflow: 0735_Telegram_GoogleCalendar_Automation_Webhook.json ---
Name: AI Phone Agent with RetellAI
Description: # STEP 3 - RETELL AI

- Register on [Retell AI](https://retellai.com) (10$ FREE credits)
- Create an Agent an set "Voice & Language" and add your system prompt
- In Webhook settings add the "Agent Level Webhook URL" with the n8n webhook node url called "n8n_call"
- Buy a new phone number with your FREE credits by Twilio Provider and connect it to the created agent
- Enter the previously created agency and create the flow as shown in the following image
![image](https://i.postimg.cc/brtBkgfH/Retellai-flow.png)
- Aggiungere 2 funzioni (una per RAG e una per il Booking) e inserire l'url apposito ricavato dai webhook di n8n "n8n_rag_function" e "n8n_check_available"



--- Workflow: 0736_GoogleSheets_Slack_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0737_Manual_Executecommand_Automation_Triggered.json ---
Name: N8N Espa√±ol - Ejemplos
Description: No description found in sticky notes.

--- Workflow: 0738_Customerio_Update_Triggered.json ---
Name: Receive updates when a subscriber unsubscribes in Customer.io
Description: No description found in sticky notes.

--- Workflow: 0739_HTTP_Form_Automate_Webhook.json ---
Name: Streamline Your Zoom Meetings with Secure, Automated Stripe Payments
Description: # Setup
### 1/ Add Your credentials
[Zoom](https://docs.n8n.io/integrations/builtin/credentials/zoom/)
[Google](https://docs.n8n.io/integrations/builtin/credentials/google/)
[Stripe](https://docs.n8n.io/integrations/builtin/credentials/stripe/)

Note: For Google, you need to add Gmail and Google Sheet.

### 2/ Create a [new Google Sheet](https://sheets.new/).
Keep this sheet blank for now; it contains your meeting and participant information. Place it wherever it fits best in your organization.

### 3/ And fill the config node
# üëá

--- Workflow: 0740_Splitout_Code_Automation_Webhook.json ---
Name: YogiAI
Description: ## YogiAI

This YogiAI is to provide daily reminder and pose of the day to the user via Line Push Message

The data will be generated from GoogleSheet Weighted Random Poses and Push to your Line at the scheduled time



--- Workflow: 0741_Extractfromfile_Stickynote_Automation_Triggered.json ---
Name: RAG AI Agent with Milvus and Cohere
Description: ## Why Milvus
Based on comparisons and user feedback, **Milvus is often considered a more performant and scalable vector database solution compared to Supabase**, particularly for demanding use cases involving large datasets, high-volume vector search operations, and multilingual support.


### Requirements
- Create an account on [Zilliz](https://zilliz.com/) to generate the Milvus cluster. 
- There is no need to create docker containers or your own instance, Zilliz provides the cloud infraestructure to build it easily
- Get your credentials ready from Drive, Milvus (Zilliz), and [Cohere](https://cohere.com)

### Usage
Every time a new pdf is added into the Drive folder, it will be inserted into the Milvus Vector Store, allowing for the interaction with the RAG agent in seconds.

## Calculate your company's RAG costs

Want to run Milvus on your own server on n8n? Zilliz provides a great [cost calculator](https://zilliz.com/rag-cost-calculator/)

### Get in touch with us
Want to implement a RAG AI agent for your company? [Shoot us a message](https://1node.ai)


--- Workflow: 0742_Telegram_Splitout_Create_Webhook.json ---
Name: YT AI News Playlist Creator/AI News Form Updater
Description: ## Initiation
This section starts the workflow sets the time.

--- Workflow: 0743_Stopanderror_Wait_Automation_Triggered.json ---
Name: Exponential Backoff for Google APIs
Description: # Exponential Backoff for Google APIs 
## Connect these nodes to any Google API node such as the Google Sheets node example in this workflow

--- Workflow: 0744_Manual_Googletasks_Create_Triggered.json ---
Name: Add task to tasklist
Description: No description found in sticky notes.

--- Workflow: 0745_HTTP_Telegram_Automation_Webhook.json ---
Name: Daily Text Affirmations
Description: No description found in sticky notes.

--- Workflow: 0746_Manual_Discord_Automation_Triggered.json ---
Name: Discord Intro
Description: No description found in sticky notes.

--- Workflow: 0747_Writebinaryfile_Spreadsheetfile_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0748_Noop_Telegram_Automation_Scheduled.json ---
Name: RSS to Telegram
Description: No description found in sticky notes.

--- Workflow: 0749_Readbinaryfile_Movebinarydata_Send_Scheduled.json ---
Name: SIGNL4 Alert
Description: No description found in sticky notes.

--- Workflow: 0750_Clockify_Webhook_Sync_Webhook.json ---
Name: Syncro to Clockify
Description: No description found in sticky notes.

--- Workflow: 0751_Openweathermap_Telegram_Automate_Triggered.json ---
Name: Telegram Weather Workflow
Description: No description found in sticky notes.

--- Workflow: 0752_HTTP_Rssfeedread_Automation_Scheduled.json ---
Name: post to mattermost v2
Description: No description found in sticky notes.

--- Workflow: 0753_Code_Executiondata_Automation_Webhook.json ---
Name: Luma AI Dream Machine - Simple v1 - AK
Description: ## Define your SETTINGS here

--- Workflow: 0754_Googleslides_Noop_Automation_Triggered.json ---
Name: DSP Certificate w/ Google Forms
Description: ### 1) Start here
* Create a Google Form and then enable quiz mode.
* Publish it, submit 1 text data.
* In response section, you'll see "Link to Google Sheet" option.
* Press, and it will create a new sheet.

--- Workflow: 0755_Stickynote_Send_Webhook.json ---
Name: N/A
Description: ## SSH login credentials
Make sure to provide the correct SSH credentials ID in this embedded workflow under "sshPassword".



--- Workflow: 0756_Airtable_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0757_Manual_Wordpress_Create_Webhook.json ---
Name: N/A
Description: ## üéôÔ∏è Generate Text-to-Speech Using Eleven Labs via API

Since there is no predefined node for Eleven Labs in n8n, we will use the **HTTP Request** module.

### üõ†Ô∏è Prerequisites:
1. **Get an API Key**: Visit [Eleven Labs](https://try.elevenlabs.io/text-audio) to obtain your API key.
2. **Choose a Suitable Voice**: Test different voices on [this demo page](https://try.elevenlabs.io/text-audio) to find the best fit for your use case.
3. **Select the Right Model**: For multilingual usage, use:  
   ~~~json
   "model_id": "eleven_multilingual_v2"
   ~~~
4. **Set Output Format**: You can adjust the quality by modifying `output_format`, for example:  
   ~~~json
   "output_format": "mp3_44100_128"
   ~~~

üìñ Refer to the full API documentation: [API Reference - Eleven Labs](https://try.elevenlabs.io/api-reference-text-to-speech)

---
## üöÄ Step 1: Configure API Credentials in n8n

Add a custom authentication entry in n8n with the following structure: 

(Replace `"your-elevenlabs-api-key"` with your **actual API key**)

~~~json
{
  "headers": {
    "xi-api-key": "your-elevenlabs-api-key"
  }
}
~~~
---

## üì© Step 2: Send a POST Request to the API

Make an HTTP POST request to the **webhook** of your workflow with the following parameters:

- **`voice_id`**: The ID of the selected voice.
- **`text`**: The text to convert into speech.

---

--- Workflow: 0758_Schedule_Manual_Monitor_Scheduled.json ---
Name: N/A
Description: ![Callforge](https://uploads.n8n.io/templates/callforgeshadow.png)
## CallForge
CallForge allows you to extract important information for different departments from your Sales Gong Calls. 

### Salesforce Trigger
This workflow triggers the AI agent to run, processing calls every hour. It uses the Gong/Salesforce integration to look for new conversation objects in Salesforce which indicate that a new recording has synced to Salesforce. This allows us to filter calls based on internal milestones and metrics ensuring only calls that meet a certain criteria are processed. 

--- Workflow: 0759_Splitout_Comparedatasets_Create_Triggered.json ---
Name: N/A
Description: ## Get Gong Calls and Supporting Data
Besides the phone calls, integration and competitor data is extracted to supplement the AI prompt with accurate data to compare against mispronunciations. 

--- Workflow: 0760_Splitout_Code_Send_Webhook.json ---
Name: N/A
Description: ![Callforge](https://uploads.n8n.io/templates/callforgeshadow.png)
## CallForge - The AI Gong Sales Call Processor
CallForge allows you to extract important information for different departments from your Sales Gong Calls. 

### Transcript PreProcessor
This workflow preps the call transcripts to pass into the call processor. It starts by using the code node to separate the different speakers into either Internal or External speaker. It also pulls data from Salesforce to enrich the call data by pulling things such as company name. 

--- Workflow: 0761_Slack_Comparedatasets_Create_Triggered.json ---
Name: N/A
Description: ## Process Queue Logic
If the run fails for any reason, it can be rerun on only the remaining calls, allowing for greater resilisience in api calls. The main issue I ran into was Notion rate limiting.

--- Workflow: 0762_Aggregate_Stickynote_Create_Triggered.json ---
Name: N/A
Description: ## Receive Call Data and standardize User Prompt
This node gets the call data passed into it, and it creates a single user prompt that is passed into all 3 AI agents. This allows for standardizing things such as name misprononciation and integration data to be set in one node that can easily be updated and automatically be sent to the 3 AI agents. 

--- Workflow: 0763_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## Integration Data Processing
If it's found, we add it to Notion. 

--- Workflow: 0764_Wait_Splitout_Create_Triggered.json ---
Name: N/A
Description: ## Marketing Insights Processing

--- Workflow: 0765_Wait_Splitout_Create_Triggered.json ---
Name: N/A
Description: ## Product Data Processing

--- Workflow: 0766_Wait_Limit_Update_Webhook.json ---
Name: N/A
Description: ## Grab recent drink data


--- Workflow: 0767_Code_Filter_Send_Webhook.json ---
Name: N/A
Description: To send all the items back to the AI, we need to finish with everything aggregated into one single item.

Otherwise it will respond with one item at a time, and the AI will only get the first item that arrives.

--- Workflow: 0768_Telegram_Stickynote_Create_Triggered.json ---
Name: N/A
Description:  
**This workflow listens for incoming voice or text messages from Telegram users.** 

--- Workflow: 0769_Telegram_Webhook_Send_Webhook.json ---
Name: N/A
Description: ## Scenario 1 - AI Agent

--- Workflow: 0770_Manual_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ## Check video status

--- Workflow: 0771_HTTP_Telegram_Create_Webhook.json ---
Name: N/A
Description:  
**This workflow listens for incoming voice or text messages from Telegram users.** 

--- Workflow: 0772_Splitout_Filter_Process_Webhook.json ---
Name: N/A
Description: ## When clicking "Test workflow"

This trigger demonstrates five different approaches to analyze media with AI:
1. Top branch: Single image with automatic binary passthrough
2. Second branch: Multiple images with custom prompts
3. Third branch: Standard n8n item processing with direct API
4. Fourth branch: PDF analysis via direct API
5. Fifth branch: Image analysis via direct API

Each approach has advantages depending on your use case.



--- Workflow: 0773_Code_Manual_Update_Triggered.json ---
Name: Automatically Update YouTube Video Descriptions with Inserted Text
Description: ## Insert Text into YouTube Video Descriptions
**Automatically insert a row of text between two specified rows** in all your YouTube video descriptions. 

This workflow is ideal for YouTubers who need to update multiple video descriptions at once. Easily add a new link or text between existing lines, ensuring consistency across all your video descriptions without manual edits.

--- Workflow: 0774_Splitout_Code_Automate_Webhook.json ---
Name: My workflow 2
Description: ## Authentication Set Up

Obtain an access token from Dartagnan
Prepare credentials for both Dartagnan and Braze

--- Workflow: 0775_HTTP_Executecommand_Automate_Webhook.json ---
Name: N8N Espa√±ol - NocodeBot
Description: No description found in sticky notes.

--- Workflow: 0776_Manual_Mailerlite_Create_Triggered.json ---
Name: Receive updates when a subscriber is added to a group and strore the information in Airtable
Description: No description found in sticky notes.

--- Workflow: 0777_Code_Filter_Automation_Webhook.json ---
Name: mails2notion V2
Description: ## Setup
- Disable the Gmail Trigger and enable the manual trigger here
- Execute the workflow once
- Copy the Gmail Label IDs from the output of the "Required labels" node to the "Globals" node
- Disable the manual trigger here and and enable the Gmail Trigger again
- Activate the workflow, so it runs automatically in the background


--- Workflow: 0778_HTTP_Stickynote_Import_Webhook.json ---
Name: N/A
Description: ### Example 1. Publicly Hosted Files
The default way to use Mistral OCR is to give it a public URL of the file you want processed. Great for your own semi-private docs or other people's. If you rather not expose files due to privacy concerns, then you'd want to check out example 2.

--- Workflow: 0779_Manual_HTTP_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0780_Splitout_Filter_Process_Webhook.json ---
Name: N/A
Description: ## Company Research
Using Perplexity Deep Research  we can find more information about the company.

--- Workflow: 0781_Code_Schedule_Export_Scheduled.json ---
Name: N/A
Description: ## Simplest n8n Workflow Backup ‚Äì Automating Your Data Security in Google Drive

--- Workflow: 0782_Telegram_Redis_Create_Webhook.json ---
Name: N/A
Description: ## 1. Initiate Survey by Inviting User to Chat
[Learn more about the chat trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/)

To present the survey to the user, we'll use n8n's builtin hosted chat. Survey questions are predefined and pulled from Google Sheet. Finally, for state and session management such as tracking which question we're asking, we'll use Redis as it's a fast write and ready database suitable for our chat.

--- Workflow: 0783_GoogleCalendar_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Get Recent Meetings
[Learn more about the GCalendar node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlecalendar)

For this template, a scheduled trigger is set to fire every morning to pull in past meetings from 2-3 days ago. A "Remove Duplicates" node ensures we don't double process events more than once between runs.

--- Workflow: 0784_Code_Form_Automation_Webhook.json ---
Name: N/A
Description: # üëÜ
Please add authentication to form by selecting Basic Auth to prevent unauthorized access to the form.


--- Workflow: 0785_Openai_Twitter_Create.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0786_Stopanderror_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ### Set verification token
Set your Ko-fi  verification token in this node. Available [here](https://ko-fi.com/manage/webhooks).

--- Workflow: 0787_Code_GoogleCalendar_Create_Webhook.json ---
Name: N/A
Description: ## ElevenlabsAPI key
**Click** to get your Elevenlabs  API key. [Elevenlabs](https://try.elevenlabs.io/text-audio)

--- Workflow: 0788_Googletranslate_Noop_Create_Webhook.json ---
Name: N/A
Description: ### 5. Do you need more details?
Find a step-by-step guide in this tutorial
![Guide](https://www.samirsaci.com/content/images/2025/04/Flash-Cards.png)
[üé• Watch My Tutorial](https://youtu.be/2mRZJATUTDw)

--- Workflow: 0789_Telegram_Code_Create_Triggered.json ---
Name: N/A
Description: ### 5. Do you need more details?
Find a step-by-step guide in this tutorial
![Guide](https://www.samirsaci.com/content/images/2025/04/Telegram-Shipment-Tracking.png)
[üé• Watch My Tutorial](https://youtu.be/9NS4RYaOwJ8)

--- Workflow: 0790_Splitout_Schedule_Create_Webhook.json ---
Name: N/A
Description: ### Receive an alert when new breaches are added to haveibeenpwned.com
This workflow demonstrates how we can receive alerts when new breaches are added to haveibeenpwned.com.
It also demonstrates a simple method for caching data between executions.

--- Workflow: 0791_Stopanderror_Splitout_Create_Webhook.json ---
Name: N/A
Description: ### Default frequency: every hour
Changing it here is enough if you want to check for new videos at a higher or lower frequency. You don't have to edit anything else.

--- Workflow: 0792_Splitout_Code_Monitor_Scheduled.json ---
Name: N/A
Description: ## Edit this node üëá

Get your store URL and replace in the GET url: https://{your-store}.myshopify.com/admin/api/2025-01/orders.json


--- Workflow: 0793_Splitout_Code_Send_Triggered.json ---
Name: N/A
Description: ### 5. Do you need more details?
Find a step-by-step guide in this tutorial
![Guide](https://www.samirsaci.com/content/images/2025/04/EDI-Message-Parser.png)
[üé• Watch My Tutorial](https://youtu.be/-phwXeYk7Es)

--- Workflow: 0794_Code_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## Edit this node üëá
Change n8n_url to your instance URL
https://docs.n8n.io/api/authentication/#call-the-api-using-your-key

--- Workflow: 0795_Schedule_Mailchimp_Create_Scheduled.json ---
Name: N/A
Description: ## Create Mailchimp contact based on Squarespace newsletter
This workflow will get Squarespace newsletter signups and create new Mailchimp contact in the given Audience on Mailchimp

This overcome the limitation between Squarespace forms and Mailchimp connection where only new, empty audience can be used

You can run the workflow on demand or by schedule

## Spreadsheet template

The sheet columns are inspire from Squarespace newsletter block connection, but you can change the node to adapt new columns format

Clone the [sample sheet here](https://docs.google.com/spreadsheets/d/1wi2Ucb4b35e0-fuf-96sMnyzTft0ADz3MwdE_cG_WnQ/edit?usp=sharing)
- Submitted On	
- Email Address	
- Name

--- Workflow: 0796_Stickynote_Gmail_Create_Triggered.json ---
Name: N/A
Description: ## Developed by Amjid Ali

Thank you for using this workflow template. It has taken me countless hours of hard work, research, and dedication to develop, and I sincerely hope it adds value to your work.

If you find this template helpful, I kindly ask you to consider supporting my efforts. Your support will help me continue improving and creating more valuable resources.

Buy N8N Mastery Book : https://www.amazon.com/dp/B0F23GYCFW


For Full Course about ERPNext or Automation using AI follow below link

http://lms.syncbricks.com

Additionally, when sharing this template, I would greatly appreciate it if you include my original information to ensure proper credit is given.

Thank you for your generosity and support!
Email : amjid@amjidali.com
https://linkedin.com/in/amjidali
https://syncbricks.com
https://youtube.com/@syncbricks

--- Workflow: 0797_Splitout_Code_Monitor_Webhook.json ---
Name: N/A
Description: ## Edit this node üëá

Get your store URL and replace in the GET url: https://{your-store}.myshopify.com/admin/api/2025-01/customers.json


--- Workflow: 0798_Splitout_Code_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0799_Splitout_Executecommand_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0800_Aggregate_Telegram_Automate_Triggered.json ---
Name: N/A
Description: ### 3. Do you need more details?
Find a step-by-step guide in this tutorial
![Guide](https://www.samirsaci.com/content/images/2025/04/Flash-Cards.png)
[üé• Watch My Tutorial](https://youtu.be/MQV8wDSug7M)

--- Workflow: 0801_Filter_Schedule_Import_Webhook.json ---
Name: N/A
Description: ## Filtering orders for fulfillment üëá
Filter the valid orders for programatically fulfillments

- you exclusively sell digital downloads or digital gift cards
- you use fulfillment services for all your products


--- Workflow: 0802_Webhook_Nocodb_Create_Webhook.json ---
Name: N/A
Description: ## Dropbox

Dropbox call me each time a modification is done somewhere in my dropbox.

--- Workflow: 0803_Manual_Customerio_Create_Triggered.json ---
Name: Create a customer and add them to a segment in Customer.io
Description: No description found in sticky notes.

--- Workflow: 0804_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0805_Form_Html_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0806_Googlebigquery_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: ### 1. Workflow Trigger with Chat
This workflow uses a simple chat window as a trigger. You can replace it with Telegram, Slack, Teams or a webhook trigger linked to your chat.

#### How to setup?
*Nothing to do.*


--- Workflow: 0807_Telegram_Wait_Send_Triggered.json ---
Name: N/A
Description: ### 4. Do you need more details?
Find a step-by-step guide in this tutorial
![Guide](https://www.samirsaci.com/content/images/2025/04/Pomodoro-Timer.png)
[üé• Watch My Tutorial](https://www.youtube.com/watch?v=ztMMrmbgGEo)

--- Workflow: 0808_Code_Form_Send_Webhook.json ---
Name: N/A
Description: ## Quick Setup Guide

1. **Add OpenAI API Credentials**
   - Go to Settings ‚Üí Credentials ‚Üí New ‚Üí OpenAI API
   - Enter your API key from platform.openai.com

2. **Add Gmail Credentials**
   - Go to Settings ‚Üí Credentials ‚Üí New ‚Üí Gmail OAuth2 API
   - Complete the OAuth setup process

3. **Update Email Configuration**
   - Open the 'Send Security Report' node
   - Change the recipient email address from the default

4. **Activate and Deploy Workflow**
   - Click 'Active' toggle in the top right
   - Copy the form URL to share with others or use yourself

--- Workflow: 0809_Noop_Slack_Send_Scheduled.json ---
Name: Check To Do on Notion and send message on Slack
Description: No description found in sticky notes.

--- Workflow: 0810_Splitout_Schedule_Automation_Webhook.json ---
Name: N/A
Description: ## Edit this node üëá

--- Workflow: 0811_Respondtowebhook_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0812_GoogleSheets_GoogleDrive_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0813_Webhook_Respondtowebhook_Process_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0814_GoogleSheets_Gmail_Send_Triggered.json ---
Name: N/A
Description: ### 4. Do you need more details?
Find a step-by-step guide in this tutorial
![Guide](https://www.samirsaci.com/content/images/2025/03/Miniature-2.png)
[üé• Watch My Tutorial](https://www.youtube.com/watch?v=kQ8dO_30SB0)

--- Workflow: 0815_Telegram_Code_Update_Triggered.json ---
Name: N/A
Description: ## 1. Check Interaction State For Incoming Message
[Learn more about the telegram trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.telegramtrigger/)

This is an example of a state-based agent - the technique commonly known as a finite-state machine. This is a great way to really control the flow and direction of the conversation where there are requirements to collect data or perform steps in sequence. To manage the session state, we can use Redis and the session key will be the user's number.

--- Workflow: 0816_Splitout_Code_Automation_Scheduled.json ---
Name: N/A
Description: ## 1. Get Channel Messages
[Read more about the scheduled Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/)

The scheduled trigger is used to execute this workflow throughout the day. Depending on how busy your community is, you may want to increase the messages fetched or set shorter intervals. The "Remove Duplicates" node is used to ensure we only process new messages.

--- Workflow: 0817_Schedule_Removeduplicates_Create_Webhook.json ---
Name: N/A
Description: ## 1. Fetch a Webpage Contents
[Read more about the HTTP request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

--- Workflow: 0818_GoogleSheets_Respondtowebhook_Import_Webhook.json ---
Name: N/A
Description: ## Handle Retell's Inbound call webhooks

## Overview
- This workflow provides Retell agent builders with a simple way to populate [dynamic variables](https://docs.retellai.com/build/dynamic-variables) using n8n.
- The workflow fetches user information from a Google Sheet based on the phone number and sends it back to Retell.
- It is based on Retell's [Inbound Webhook Call](https://docs.retellai.com/features/inbound-call-webhook).
- Retell is a service that lets you create Voice Agents that handle voice calls simply, based on a prompt or using a conversational flow builder.

## Prerequisites
- Have a [Retell AI Account](https://www.retellai.com/)
- [Create a Retell agent](https://docs.retellai.com/get-started/quick-start)
- [Purchase a phone number](https://docs.retellai.com/deploy/purchase-number) and associate it with your agent
- Create a Google Sheets - for example, [make a copy of this one](https://docs.google.com/spreadsheets/d/1TYgk8PK5w2l8Q5NtepdyLvgtuHXBHcODy-2hXOPP6AU/edit?usp=sharing).
- Your Google Sheet must have at least one column with the phone number. The remaining columns will be used to populate your Retell agent‚Äôs dynamic variables.
- All fields are returned as strings to Retell (variables are replaced as text)

## How it works
- The webhook call is received from Retell. We filter the call using their whitelisted IP address.
- It extracts data from the webhook call and uses it to retrieve the user from Google Sheets.
- It formats the data in the response to match Retell's expected format.
- Retell uses this data to replace [dynamic variables](https://docs.retellai.com/build/dynamic-variables#dynamic-variables) in the prompts.


## How to use it
See the description for screenshots!
- Set the webhook name (keep it as POST).
- Copy the Webhook URL (e.g., `https://your-instance.app.n8n.cloud/webhook/retell-dynamic-variables`) and paste it into Retell's interface. Navigate to "Phone Numbers", click on the phone number, and enable "Add an inbound webhook".
- In your prompt (e.g., "welcome message"), use the variable with this syntax: `{{variable_name}}` (see [Retell's documentation](https://docs.retellai.com/build/dynamic-variables)).
- These variables will be dynamically replaced by the data in your Google Sheet.


## Notes
- In Google Sheets, the phone number must start with `'+'`.
- Phone numbers must be formatted like the example: with the `+`, extension, and no spaces.
- You can use any database‚Äîjust replace Google Sheets with your own, making sure to keep the phone number formatting consistent.


--- Workflow: 0819_Splitout_Schedule_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Get Resolved Issues
[Learn more about the JIRA node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.jira/)

To build our database of successfully resolved issues, we can pull them directly from JIRA with a JQL query. The remove duplicates node ensures we only add an issues into the database once.

--- Workflow: 0820_Wait_Code_Send_Webhook.json ---
Name: N/A
Description: ## 2. Classify If Attachment is Invoice
[Learn more about the Outlook node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftoutlook)

For each qualifying message, we will need to know which of the attachments contained are actual invoice documents. To do this, we can use Google Gemini's docuemnt understanding capabilities to validate this test. We're using Gemini specifically in this case because at time of writing, Gemini is the only one of the few LLM providers that are currently accepting PDF documents. If you're not using Gemini, you may need to convert the PDF document to an image first - [check out an example of this here](https://n8n.io/workflows/2421-transcribing-bank-statements-to-markdown-using-gemini-vision-ai/).

--- Workflow: 0821_Manual_Noop_Create_Triggered.json ---
Name: N/A
Description: ## 2. Research Customer via Emails
Emails can be a great source of research on how a customer or potential customer thinks, behaves and communicates. This template does require some interaction beforehand but this should could be shared amongst colleagues or a CRM.

--- Workflow: 0822_Cron_Postgres_Automation_Scheduled.json ---
Name: Postgres Data Ingestion
Description: No description found in sticky notes.

--- Workflow: 0823_Zendesk_Update_Triggered.json ---
Name: Receive updates for support in Zendesk
Description: No description found in sticky notes.

--- Workflow: 0824_Telegram_Rssfeedread_Monitor_Scheduled.json ---
Name: n8n_check
Description: No description found in sticky notes.

--- Workflow: 0825_HTTP_Manual_Send_Webhook.json ---
Name: N/A
Description: ## Send log entries to BetterStack
This workflow can be used in two ways:
1. Save it as a separate workflow to
use if from multiple worflows.
2. Embed it into one workflow to just
use it from one.

--- Workflow: 0826_Wait_Splitout_Automation_Webhook.json ---
Name: N/A
Description: ### This workflow automates sending batched prompts to Claude using the Anthropic API. It submits multiple prompts at once and retrieves the results.

#### How to use

Call this workflow with array of `requests`

```json
{
    "anthropic-version": "2023-06-01",
    "requests": [
        {
            "custom_id": "first-prompt-in-my-batch",
            "params": {
                "max_tokens": 100,
                "messages": [
                    {
                        "content": "Hey Claude, tell me a short fun fact about video games!",
                        "role": "user"
                    }
                ],
                "model": "claude-3-5-haiku-20241022"
            }
        }
    ]
}
```


--- Workflow: 0827_Manual_Functionitem_Send_Triggered.json ---
Name: Email body parser by aprenden8n.com
Description: No description found in sticky notes.

--- Workflow: 0828_Extractfromfile_Gmail_Send_Triggered.json ---
Name: N/A
Description: ### 1. Workflow Trigger with Gmail Trigger
The workflow is triggered by a new email received in your Gmail mailbox. 
If the subject includes the string "CSRD Reporting" we proceed, if not we do nothing.

#### How to setup?
- **Gmail Trigger Node:** set up your Gmail API credentials
[Learn more about the Gmail Trigger Node](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger)


--- Workflow: 0829_Webhook_Code_Create_Webhook.json ---
Name: N/A
Description: # Get Slots

--- Workflow: 0830_Filter_Summarize_Send_Scheduled.json ---
Name: N/A
Description: 












### Update Workbook
This is the workbook which will track the token usage and costs.

--- Workflow: 0831_Wait_Code_Monitor_Webhook.json ---
Name: N/A
Description: #### üîí This workflow demonstrates Redis-based locking to prevent concurrent execution of workflows.

**Steps:**
+ Try to acquire a lock via Redis
+ If successful, execute workflow
+ If duplicate request; ignore request
+ Release the lock after completion

--- Workflow: 0832_Splitout_Limit_Create_Webhook.json ---
Name: N/A
Description: ## Step 1
Login to n8n, and get the tags we have for our personal owned projects

--- Workflow: 0833_Splitout_Schedule_Create_Webhook.json ---
Name: N/A
Description: ## 1. Get Subscribers from Excel
[Learn more about the Excel node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftexcel)

Excel can be an easy way to store a simple list of subscribers who will receive our daily digest. We can also specify only the categories they are interested in.

--- Workflow: 0834_Webhook_Slack_Create_Webhook.json ---
Name: N/A
Description: ### This n8n template demonstrates how easy it is to build an Outlook Calendar Assistant powered by an AI agent equipped with Tools.

n8n's AI agents makes it easy to build powerful assistants which can interact with your existing services and tools. With little effort, you can expose such an agent to team members and colleagues though something like Slack and enable a company-wide productivity booster.

### How it works
* A Slack Trigger node is configured to catch "bot mentions" events in a designated channel.
* The message is parsed using the Edit fields node to extract only the required attributes of the event.
* An AI Agent equipped with Outlook Calendar Tools enables question and answer capability for the organisation's shared calendars and events.
* The AI agent's response is sent back to Slack as a reply to the user's query.

### How to use
* The workflow is triggered via @mention-ing the bot followed by the query. eg. "@bot how many meetings does Paul have to attend to this week?"
* To start listening to real mentions, you must activate the workflow and set it to production mode. You must use the production webhook URL for the event subscription.


### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

--- Workflow: 0835_Microsoftoutlook_Schedule_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0836_Wait_Code_Create_Scheduled.json ---
Name: N/A
Description: ## Timer starts the Update every 24 hours and Read the Links out of a Google Sheets File (RSS-Links)

--- Workflow: 0837_GoogleSheets_Gmail_Create_Triggered.json ---
Name: N/A
Description: ## Upload attachments to Drive
Incoming files are split up into individual items, each with a single binary data object under the `data` key.
Files names are prefixed with the current timestamp

--- Workflow: 0838_Manual_GoogleSheets_Update_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0839_GoogleDrive_GoogleSheets_Create_Triggered.json ---
Name: N/A
Description: üëà
Set up Google Drive credentials.

When a new photo/video or carousel is uploaded to the selected folder in Google Drive for posting on Instagram, this trigger will be activated.

Follow the steps (YouTube video):
https://youtu.be/L3NUp2XP_h0?si=KAjHYEZ-qedIM-n

--- Workflow: 0840_Splitout_HTTP_Send_Webhook.json ---
Name: N/A
Description: ## 1. Simple Chatbot with Knowledgebase Tool
[Learn more about AI agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent)

The AI agent node is the simplest and recommended way to create user-friendly chatbots in n8n. Here, we'll define a support agent which can answer AcuityScheduling.com questions. To ensure the answers are accurate and up-to-date, we'll connect it to the support knowledgebase via a custom workflow tool.

--- Workflow: 0841_Twilio_Stickynote_Send_Triggered.json ---
Name: N/A
Description: ## Try It Out!
### This n8n template offers a simple yet capable chatbot assistant who can answer course enquiries over SMS.

Given the right access to data, AI Agents are capable of planning and performing relatively complex research tasks to get their answers. In this example, the agent must first understand the database schema, retrieve lists of values before generating it's own query to search over the database.

**Checkout the example database here - https://airtable.com/appO5xvP1aUBYKyJ7/shr8jSFDaghubDOrw**

### How it works
* A Twilio trigger gives us the ability to receive SMS input into our workflow via webhook.
* The message is then directed to our AI agent who is instructed to assist the user and use the course database as reference. The database is an Airtable base.
* The agent autonomously figures out which tool it needs to use and generates it's own "filter_by_formula" query to search over the available courses.
* On successful search results, the Agent can then use this information to answer the user's query.
* The Agent's output is logged in a second sheet of the Airtable base. We can use this later for analysis and lead gen.
* Finally, the response is sent back to the user through SMS using Twilio.

### How to use
* Ensure your Twilio number is set to forward messages to this workflow's webhook URL.
* Configure and update the course database as required. If you're not interested in courses, you can swap this out for inventory, deliveries or any other data relevant to your business.
* Ask questions like:
  * "Can you help me find suitable courses to fill my Wednesday mornings?"
  * "Which courses are being instructed by profession Lee?"
  * "I'm interested in creative arts. What courses are available which could be relevant to me?"

### Requirements
* Twilio for SMS receiving and sending
* OpenAI for LLM and Agent
* Airtable for Course Database

### Customising this workflow
* Add additional tools and expand the range of queries the agent is able to answer or assist with.
* Not using Airtable? This technique also works with SQL databases like PostgreSQL.

### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

Happy Hacking!

--- Workflow: 0842_Twilio_Cron_Send_Scheduled.json ---
Name: Monitoring and alerting
Description: No description found in sticky notes.

--- Workflow: 0843_Gumroad_Update_Triggered.json ---
Name: Receive updates when a sale is made in Gumroad
Description: No description found in sticky notes.

--- Workflow: 0844_Code_Ghost_Create_Triggered.json ---
Name: N/A
Description: ### 1. Workflow Trigger
This workflow uses simple trigger.

#### How to setup?
*Nothing to do.*


--- Workflow: 0845_Webhook_Filter_Export_Webhook.json ---
Name: N/A
Description: ## Automatically store Retell transcripts in Google Sheets/Airtable/Notion from webhook

## Overview
- This workflow stores the results of a **[Retell](https://www.retellai.com/)** voice call (transcript, analysis, etc.) once it has ended and been analyzed.
- It listens for `call_analyzed` webhook events from Retell and stores the data in **Airtable**, **Google Sheets**, and **Notion** (choose based on your stack).
- Useful for anyone building Retell agents who want to keep a detailed history of analyzed calls in structured tools.

## Who is it for
For builders of [Retell's](https://www.retellai.com/) Voice Agents who want to store call history and essential analytic data.

## Prerequisites
- Have a [Retell AI Account](https://www.retellai.com/)
- [Create a Retell agent](https://docs.retellai.com/get-started/quick-start)
- Associate a phone number with your Retell agent
- Set up one of the following:
  - An Airtable base and table (example: "Transcripts")
  - A Google Sheet with a ‚ÄúTranscripts‚Äù tab
  - A Notion database with columns to match the transcript fields
- Templates:
  - [Airtable](https://airtable.com/appN4jeIrD8waWCfr/shrsPtQLeqt8Sp3UZ)
  - [Google Sheets](https://docs.google.com/spreadsheets/d/1TYgk8PK5w2l8Q5NtepdyLvgtuHXBHcODy-2hXOPP6AU/edit?usp=sharing)
  - [Notion](https://www.notion.so/1cea19b9d4848089bda6f3d7e05a818d?v=1cea19b9d48481ea97ef000ccd20f210&pvs=4)

## How it works
- Receives a webhook POST request from Retell when a call has been analyzed.
- Filters out any event that is not `call_analyzed` ([Retell sends webhooks](https://docs.retellai.com/features/webhook-overview#webhook-overview) for `call_started`, `call_ended` and `call_analyzed`)
- Extracts useful fields like:
  - Call ID, start/end time, duration, total cost
  - Transcript, summary, sentiment
- Stores this data in your preferred tool:
  - Airtable
  - Google Sheets
  - Notion

## How to use it
1. Copy the webhook URL (e.g., `https://your-instance.app.n8n.cloud/webhook/poc-retell-analysis`) and paste it in your Retell agent under "Webhook settings" then "Agent Level Webhook URL".
2. Make sure your Airtable, Google Sheet, or Notion databases are correctly configured to receive the fields.
3. After each call, once Retell finishes the analysis, this workflow will automatically log the results.

## Extension
- If you use any "Post-Call Analysis" fields, you can add columns to your Airtable, Google Sheet, or Notion database.
- Then fetch the data from the `call.call_analysis.custom_analysis_data` object.

## Additional Notes
- Phone numbers are extracted depending on the call direction (`from_number` or `to_number`).
- Cost is converted from cents to dollars before saving.
- Dates are converted from timestamps to local ISO strings.
- You can remove any of the outputs (Airtable, Google Sheets, Notion) if you're only using one.


#### üëâ Reach out to [us](mailto:hello@agentstudio.io) if you're interested in **analysing your Retell Agent conversations**.

--- Workflow: 0846_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## 1. Parse Excel Files Using Cloudflare¬ÆÔ∏è Markdown Conversion
[Learn more about Cloudflare's Markdown Conversion Service](https://developers.cloudflare.com/workers-ai/markdown-conversion/)

Today's LLMs cannot parse Excel files directly so the best we can do is to convert the spreadsheet into a format that they can, namely markdown. To do this, we can use Cloudflare's brand new document conversion service which was designed specifically for this task. The result is the sheet is transcribed as a markdown table.

The **Markdown Conversion Service** is currently free to use at time of writing but requires a Cloudflare account.

--- Workflow: 0847_Linkedin_Splitout_Create_Triggered.json ---
Name: N/A
Description: # Workflow Overview

**Name:** Transform Gmail Newsletters into Insightful LinkedIn Posts Using OpenAI

**Purpose:**  
- **Filter Newsletters:** Use the Gmail node to process emails from a specific sender (e.g., `newsletter@example.com`).  
- **Extract Key Items:** Leverage an OpenAI node to identify and summarize the top news items from each newsletter.  
- **Generate Posts:** Automatically create concise, informative, and subtly humorous LinkedIn posts for each news item.  
- **Publish:** Post the refined content to your LinkedIn account with the LinkedIn node.

**Setup Steps:**  
1. **Gmail Node:** Configure and rename to "Filter Gmail Newsletter" with the appropriate sender filter.  
2. **OpenAI Nodes:** Ensure API credentials are set; customize prompt texts if desired.  
3. **LinkedIn Node:** Rename to "Post to LinkedIn" and verify correct OAuth2 credentials.

**Customization Tips:**  
- Modify the OpenAI prompts to fine-tune the tone and structure of the LinkedIn posts.  
- Add additional formatting (e.g., Function nodes) for post readability if needed.

*This workflow turns your regular newsletters into engaging, ready-to-share LinkedIn insights in just a few simple steps!*


--- Workflow: 0848_Code_Filter_Update_Triggered.json ---
Name: N/A
Description: # 2. Configuration
Choose the **keep** and **action** behavior of the workflow

1. The **keep** parameter let's you decide whether to keep the first or last received file when duplicates are detected. (possible values: `first`, `last`. Default: `last`)
2. The **action** parameter let's you decide what to do with the detected duplicates. Send them to the trash or flag them by renaming them with prefix DUPLICATE- (possible values: `trash`, `flag`. Default: `flag`) flag already prexied by DUPLICATE- are not flagged again.


The parameters `owner` and `folder` are taken from the trigger and will probably never need to be changed:
- The **folder** points to the folder to work with. By default it is taken from the trigger.
- The **owner** parameter needs to match the owner of the files. The workflow only works with files owned by this user. It is specified with the user email and is taken from the first file owner of the trigger.

--- Workflow: 0849_Filter_Extractfromfile_Create_Triggered.json ---
Name: N/A
Description: ## How to export your Google keep notes 
* Google has a dedicated service for exporting your google data, called [Google Takeout](https://takeout.google.com/), you'll have to login  it. 
* Click on "Deselect all" then select only Google Keep and click on "Next". 
- Select the destination (use "Send download link via mail" as you'll have to uncompress a zip file before to send it again to Google Drive)
- Upload to Google Drive all json files from your uncompresed file, to specific directory and you are ready to start!


--- Workflow: 0850_Mattermost_Pagerduty_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0851_Code_Extractfromfile_Monitor_Triggered.json ---
Name: N/A
Description: ## 2. Manually Convert XLSX to Markdown
[Learn more about the Extract From File node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile/)

Today's LLMs cannot parse Excel files directly so the best we can do is to convert the spreadsheet into a format that they can, namely markdown. This conversion is also a good solution for excels which aren't really datasheets - the cells are used like layout elements - which is still common for invoices and purchase orders.

To perform the conversion, we can use the 'Extract from File' node to get the each row from the xlsx and then iterate and concatenate to form our markdown table using the code node.

--- Workflow: 0852_Gmail_GoogleSheets_Create_Triggered.json ---
Name: N/A
Description: ## Resume Screener from Gmail to Sheets

### üìÉBefore you get started, you'll need:
- [n8n installation](https://n8n.partnerlinks.io/n8nTTVideoGenTemplate) 
- [OpenAI API Key](https://platform.openai.com/api-keys)
- Google Sheets API enabled in [Google Cloud Console](https://console.cloud.google.com/apis/api/sheets.googleapis.com/overview)
- Google Drive API enabled in [Google Cloud Console](https://console.cloud.google.com/apis/api/drive.googleapis.com/overview)
- OAuth 2.0 Client ID and Client Secret from your [Google Cloud Console Credentials](https://console.cloud.google.com/apis/credentials)


--- Workflow: 0853_Manual_Executecommand_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0854_Splitout_Filter_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Scheduled Trigger to Audit Everyday
[Read more about the Scheduled Trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger)

The Scheduled Trigger is used to automate this workflow at a frequency which meets your data access auditing requirements. Here we've set it to run everyday and for each run a new Google Sheet is created to capture the results of the audit.

Check out the example Sheet here: https://docs.google.com/spreadsheets/d/1V2aiLhp3_nH7EBniMn7D0kFHg7-A5NjpDZXMhb4F5UI/edit?gid=503992967

--- Workflow: 0855_Mattermost_Pagerduty_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0856_Code_Schedule_Update_Scheduled.json ---
Name: N/A
Description: ### 2. Update Rates and Record Data
The results are recorded in two sheets
- The invoice template sheet with the exchange rate and the update date
- A record sheet that includes all the conversions from the base currency to any target currency

#### How to setup?
- **Update Results in Google Sheets**:
 0. Copy and paste the template of Google Sheet: [Template Sheet](https://docs.google.com/spreadsheets/d/1SjzMb2q-6-byx9qmHbkrLseBWj9jEGduinH_5xi-c7g/edit?usp=sharing)
   1. Add your Google Sheet API credentials to access the Google Sheet file
   2. Select the file using the list, an URL or an ID
   3. Select the sheet in which the vocabulary list is stored
  [Learn more about the Google Sheet Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets)

--- Workflow: 0857_Mattermost_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0858_Wait_Schedule_Update_Scheduled.json ---
Name: N/A
Description: =======================================
         WORKFLOW DETAILS & GUIDELINES
=======================================
Name:
    LinkedIn Enrichment & Ice Breaker Generator

Purpose:
    Automate the process of enriching LinkedIn profiles using Bright Data,
    generate personalized ice breakers with an LLM, and update Google Sheets.

Tools Needed:
    - n8n Nodes:
        ‚Ä¢ Manual Trigger or Schedule Trigger
        ‚Ä¢ Set
        ‚Ä¢ SplitInBatches
        ‚Ä¢ HTTP Request
        ‚Ä¢ If
        ‚Ä¢ Wait
        ‚Ä¢ Google Sheets
        ‚Ä¢ LangChain LLM (Claude via Anthropic)
    - External Services:
        ‚Ä¢ Bright Data (Dataset API)
        ‚Ä¢ Anthropic Claude (Haiku)
        ‚Ä¢ Google Sheets API

API Keys & Authentication Required:
    ‚Ä¢ Bright Data API Key
        ‚Üí Used in HTTP Request headers as:
           `Authorization: Bearer YOUR_BRIGHTDATA_API_KEY`
    ‚Ä¢ Google Sheets OAuth2 Credentials
        ‚Üí Connects n8n to your Google account for reading/writing to Sheets.
    ‚Ä¢ Anthropic API Key
        ‚Üí Used for generating ice breakers via Claude models.
        ‚Üí Must be set in the Anthropic credential section in n8n.

General Guidelines:
    ‚Ä¢ Use descriptive and consistent naming for all nodes.
    ‚Ä¢ Add retry limits to polling loops to avoid infinite cycles.
    ‚Ä¢ Ensure each LinkedIn URL maps to a unique `row_number`.
    ‚Ä¢ Obfuscate any keys before sharing the workflow publicly.

Things to be Aware Of:
    ‚Ä¢ Bright Data may require some delay (via Wait node) before snapshot is ready.
    ‚Ä¢ Retry logic should not exceed API rate limits.
    ‚Ä¢ If snapshot fails or times out, ensure fallback logging is in place.
    ‚Ä¢ Claude model IDs and prompt formats may change ‚Äî validate before updates.

Additional Notes:
    ‚Ä¢ Make a copy of the Google Sheet template before use.
    ‚Ä¢ Replace placeholders in `Authorization` headers and credentials section.
    ‚Ä¢ Use test data first to avoid exhausting API quotas during setup.

=======================================

This workflow allows you to enrich LinkedIn profiles using Bright Data,
generate AI-written ice breakers with Claude, and log everything into Google Sheets.


--- Workflow: 0859_Splitout_Code_Create_Scheduled.json ---
Name: N/A
Description: # Data Collection
Fetches latest news articles from two RSS sources: Calcalist and Mako

--- Workflow: 0860_Splitout_Limit_Send_Webhook.json ---
Name: N/A
Description: ## Scrape latest Paul Graham essays

--- Workflow: 0861_Manual_Stickynote_Update_Triggered.json ---
Name: N/A
Description: ## Chart Generator
**Generate Dynamic Line Chart from JSON Data to Upload to Google Drive
### How to Use & Customize

* **Change Input Data:** Modify the `labels` and `salesData` arrays within the `Edit Fields: Set JSON data to test` node to use your own data. Ensure the number of labels matches the number of data points.
* **Use Real Data Sources:** Replace the `Edit Fields: Set JSON data to test` node with nodes that fetch data from real sources like:
    * HTTP Request (APIs)
    * Postgres / MongoDB nodes (Databases)
    * Google Sheets node
    * Ensure the output data from your source node is formatted similarly (providing `labels` and `salesData` arrays). You might need another Set node to structure the data correctly before the QuickChart node.
* **Change Chart Type:** In the QuickChart node, modify the `Chart Type` parameter (e.g., change from `line` to `bar`, `pie`, `doughnut`, etc.).
* **Customize Chart Appearance:** Explore the `Chart Options` parameter within the QuickChart node to add titles, change colors, modify axes, etc., using QuickChart's standard JSON configuration options.
* **Use Datasets (Recommended for Complex Charts):** For multiple lines/bars or more control, configure datasets explicitly in the QuickChart node:
    * Remove the expression from the top-level `Data` field.
    * Go to `Dataset Options` -&gt; `Add option` -&gt; `Add dataset`.
    * Set the `Data` field within the dataset using an expression like `{{ $json.jsonData.salesData }}`.
    * You can add multiple datasets this way.
* **Change Output Destination:** Replace the `Google Drive: Upload File` node with other nodes to handle the chart image differently:
    * `Write Binary File`: Save the chart to the local filesystem where n8n is running.
    * `Slack` / `Discord` / `Telegram`: Send the chart to messaging platforms.
    * `Move Binary Data`: Convert the image to Base64 to embed in HTML or return via webhook response.

--- Workflow: 0862_Wait_Code_Create_Webhook.json ---
Name: N/A
Description: LinkedIn Job Data Scraper to Google Sheets
Scrape live job posts from LinkedIn via Bright Data, clean them, and send to Google Sheets. Use for:
‚úÖ Job Hunting ‚Äî fresh, filtered roles
‚úÖ Sales Prospecting ‚Äî find companies hiring (aka growing)
‚öôÔ∏è What's Used
n8n Nodes: Form ‚Üí HTTP Request ‚Üí Wait ‚Üí If ‚Üí Code ‚Üí Google Sheets
External Tools:

Bright Data ‚Äì Dataset API
Google Sheets ‚Äì Template Copy

üîë Setup ‚Äì Credentials Needed

Bright Data API Key ‚Üí Add to HTTP headers as: Authorization: Bearer YOUR_KEY
Google Sheets OAuth2 ‚Üí Connect account in n8n

üìù Input Form ‚Äì Fields
Used to define what job data to scrape.
FieldDescriptionExampleLocationCity/regionNew York, BerlinKeywordRole to searchCMO, Data AnalystCountry2-letter ISO codeUS, UK, DETime RangeHow recent the jobs should be"Past 24 hours" or "Last 7 days" (recommended)Job TypeFull-time / Part-time / Contract(Optional)ExperienceEntry, Mid, Senior(Optional)RemoteFilter by remote-friendly roles(Optional)CompanyFilter by specific employer(Optional)
üöÄ Workflow Steps

User fills input form
Trigger snapshot via Bright Data Dataset API
Wait node + polling checks when data is ready (~1‚Äì3 mins)
Cleanup step:

Flattens nested fields (job_poster, base_salary, etc.)
Removes HTML from job descriptions


Send to Google Sheet

Sheet is pre-linked, 1 job per row
Example columns: job_title, company_name, location, salary_min, apply_link, job_description_plain


You use the data

Job seekers ‚Üí Apply fast
Salespeople ‚Üí Spot buyers & offer help



üí° Pro Tips

Use "Past 24 hours" or "Last 7 days" for fresher results
Leave filters empty if unsure ‚Äî Bright Data will return broader results
Use cleaned data for:

Cold email personalization
LinkedIn outreach
Building ICP-based lead lists



üß™ Example API Body
json[ 
  { 
    "location": "New York", 
    "keyword": "Marketing Manager", 
    "country": "US", 
    "time_range": "Past 24 hours", 
    "job_type": "Part-time", 
    "experience_level": "", 
    "remote": "", 
    "company": "" 
  } 
]
üìÑ Template & Resources

üìã Google Sheet Template (Make a Copy)
üìò Bright Data API Reference

üõ†Ô∏è Customize It

Add filters to HTTP Body (remote, experience_level, etc.)
Change polling interval if Bright Data is slow
Add custom logic to score/prioritize listings
Send filtered lists to CRM, Slack, etc.

This gives you a live stream of hiring signals ‚Äî whether you're finding a job or pitching a service. One form. One click. Fully automated.

--- Workflow: 0863_Code_Schedule_Import_Webhook.json ---
Name: N/A
Description: ### üîê How to Get Your Product Hunt Token

To get your Product Hunt token, follow the official guide here:  
üëâ [Product Hunt OAuth Token Guide](https://api.producthunt.com/v2/docs/oauth_user_authentication/oauth_authorize_ask_for_access_grant_code_on_behalf_of_the_user)


--- Workflow: 0864_Telegram_Splitout_Create_Triggered.json ---
Name: N/A
Description: ## Send a Telegram message
1. To your channel with the list of what you ate during your last meal. 
Your input can be a written or a voice message.

--- Workflow: 0865_Mattermost_Twilio_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0866_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: =======================================
            WORKFLOW ASSISTANCE
=======================================
Scrape Indeed Job Listings for Hiring Signals Using Bright Data and LLMs

For any questions or support, please contact:
    Yaron@nofluff.online

Explore more tips and tutorials here:
   - YouTube: https://www.youtube.com/@YaronBeen/videos
   - LinkedIn: https://www.linkedin.com/in/yaronbeen/
=======================================
Bright Data Docs: https://docs.brightdata.com/introduction

*Important*
Make Sure To Add Your API Keys to the HTTTP REQUESTS NODES (BRIGHT DATA API), GOOGLE RELATED NODES AND LLM NODE

--- Workflow: 0867_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: =======================================
            WORKFLOW ASSISTANCE
=======================================

Scrape Glassdoor Job Listings For Prospecting with Bright Data and LLMS

For any questions or support, please contact:
    Yaron@nofluff.online

Explore more tips and tutorials here:
   - YouTube: https://www.youtube.com/@YaronBeen/videos
   - LinkedIn: https://www.linkedin.com/in/yaronbeen/
=======================================
Bright Data Docs: https://docs.brightdata.com/introduction


*Important*
Make Sure To Add Your API Keys to the HTTTP REQUESTS NODES (BRIGHT DATA API), GOOGLE RELATED NODES AND LLM NODE


--- Workflow: 0868_Wait_Filter_Create_Webhook.json ---
Name: N/A
Description: =======================================
            WORKFLOW ASSISTANCE
=======================================
For any questions or support, please contact:
    Yaron@nofluff.online

Explore more tips and tutorials here:
   - YouTube: https://www.youtube.com/@YaronBeen/videos
   - LinkedIn: https://www.linkedin.com/in/yaronbeen/
=======================================
Bright Data Docs: https://docs.brightdata.com/introduction


--- Workflow: 0869_Wait_Datetime_Send_Scheduled.json ---
Name: N/A
Description: ## Key Sections of n8n Workflow

**üü¢ Schedule Trigger**
- Triggers the automation on the 5th of every month.
- Sets the cadence for monthly reporting.

**üìÖ Date & Time + üßÆ PreviousMonth**
- Captures the current date and derives the previous month/year for dynamic filtering.
- Used throughout all SQL queries for monthly slicing.

**üìä Get Cost Centers with Budgets**
- Dynamically fetches all cost centers that have relevant budget and GL data for the selected period.
- Ensures only active, relevant divisions are processed.

**üîç Filter**
- Narrows the analysis to a specific Cost Center (e.g., "AI DEPARTMENT") during testing or preview.

**üîÅ Loop Over Items**
- Iterates over all fetched Cost Centers to individually generate reports for each business unit.
- Powers multi-division reporting automation.

**üßæ YTD vs Previous Month1**
- Performs detailed financial comparison between Year-To-Date and Previous Month.
- Outputs revenue, expenses, and variance figures.

**üè¢ Departments + üß± verticalPL**
- Analyzes financial performance by sub-divisions (Verticals) within the cost center.
- Data is transformed into an HTML table for final report.

**üß± Projects + üßÆ WIP1**
- Gathers project status and WIP metrics.
- Calculates % invoiced, cost % used, and revenue recognition stats.

**üë• Employees + üìä Employees1**
- Counts total employees, joined this month/year for the selected cost center.
- Used to calculate per-employee KPIs.

**üîó Merge + üßæ Code**
- Combines all HTML tables into a single responsive report with visual formatting.
- Clean, structured layout for email and review.

**üí° Business Performance AI Agent (Analyst)**
- Uses Google Gemini 2.5 Pro to analyze financial HTML output.
- Executes structured analysis and generates business insights, executive summary, profitability, and recommendations.

**üì© Email Data + Microsoft Outlook**
- Sends the final HTML report via email.
- Ready for business manager distribution with personalized message.

**‚è≥ Wait**
- Enables looping and batch control across multiple cost centers.
- Prevents overloading or email spamming.

**üß† Think + Calculator**
- Used by the AI Agent to "reason" and perform precise financial computations.
- Ensures accuracy in gross/net profit, percentages, and insights.

--- Workflow: 0870_HTTP_Schedule_Update_Webhook.json ---
Name: N/A
Description: ## üìå Daily Crypto Market Summary Bot

### üìà What It Does
Fetches hourly 24h price data from Binance for **BTC**, **ETH**, and **SOL** (USDC pairs), analyzes key market trends, and sends a well-formatted HTML summary to a Telegram chat.

---
### üìä Metrics Analyzed
- üî∫ Gainers / üìâ Losers
- üí∞ Price change %
- üìà Volatility (High vs Low)
- ‚öñÔ∏è Bid-Ask Spread %
- üîº Momentum (vs Weighted Avg)
- ‚≠ê vs Market Average
 - üî¢ Number of Trades

---
### ‚ö†Ô∏è Notes
- Message output is automatically **split into chunks** to stay under Telegram‚Äôs **4096 character limit**.
- Output is sent in **rich HTML format** for better readability.

---

‚úÖ This note is for internal guidance. Feel free to delete or update it after setup.


--- Workflow: 0871_Wait_HTTP_Create_Webhook.json ---
Name: N/A
Description: =======================================
            WORKFLOW ASSISTANCE
=======================================
For any questions or support, please contact:
    Yaron@nofluff.online

Explore more tips and tutorials here:
   - YouTube: https://www.youtube.com/@YaronBeen/videos
   - LinkedIn: https://www.linkedin.com/in/yaronbeen/
=======================================
Bright Data Docs: https://docs.brightdata.com/introduction


--- Workflow: 0872_Executeworkflow_Executecommandtool_Create_Triggered.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0873_Stickynote_Postgrestool_Create_Triggered.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0874_Stickynote_Executeworkflow_Create_Triggered.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0875_Googledrivetool_Extractfromfile_Import_Triggered.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0876_GitHub_Aggregate_Create_Webhook.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0877_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0878_HTTP_Aggregate_Import_Webhook.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0879_Filter_HTTP_Update_Webhook.json ---
Name: N/A
Description: ## 1. Set up an MCP Server Trigger
[Read more about the MCP Server Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger)

--- Workflow: 0880_Limit_Code_Create_Webhook.json ---
Name: N/A
Description: ![Tutorial](https://www.samirsaci.com/content/images/2025/04/temp-8.png)
[üé• Check My Tutorial](https://www.youtube.com/watch?v=LwTIro6Rapk)

--- Workflow: 0881_Googletasks_HTTP_Update_Webhook.json ---
Name: N/A
Description: ### 1. First Block: scrape the page to extract all the legislative procedures scheduled for debate yesterday
This workflow sends an HTTP request to collect the HTML of the page by block. For each block we extract the information of the procedures: **Reference Number**. **Committee**, **Rapporteur**, **Title/Description**, **PDF Link**.

#### How to setup?
*Nothing to do*


--- Workflow: 0882_Telegram_Googletaskstool_Create_Triggered.json ---
Name: N/A
Description: ## Main Function to Receive and Send Telegram Messages


--- Workflow: 0883_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ### 1. Workflow Trigger with Cron Job
The workflow is triggered every morning at 08:30 am (local time)

#### How to setup?
- Select the time you want to set it up


--- Workflow: 0884_Telegram_Filter_Export_Triggered.json ---
Name: N/A
Description: ## Mail Agent
For emails in the inbox, archive those that are completely unnecessary, and label the rest based on their relevance.



--- Workflow: 0885_Telegram_Mondaycom_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0886_Manual_Stickynote_Import_Webhook.json ---
Name: N/A
Description: ## Prerequisites
1. [Create an application user](https://learn.microsoft.com/en-us/power-platform/admin/manage-application-users)
2. Ensure the following permissions are set:
- Sites.ReadWrite.All - for SharePoint site access
- Files.ReadWrite.All - for file upload operations


--- Workflow: 0887_Manual_Stickynote_Create_Webhook.json ---
Name: N/A
Description: ### üß™ Manual Trigger
Starts the workflow manually. Ideal for testing and debugging purposes.


--- Workflow: 0888_Wait_Code_Send_Webhook.json ---
Name: N/A
Description: ## Paypal  Webhook
**Go to Paypal Developer
Click on Apps and Credentails
Go to NVP SOAP Webhooks
Add this Webhook in Paypal

- Wait node is to ensure that Transaction is completed


--- Workflow: 0889_Converttofile_HTTP_Create_Webhook.json ---
Name: N/A
Description: ## Extract Product Images from Template

--- Workflow: 0890_Form_Stickynote_Send_Triggered.json ---
Name: N/A
Description: ## Save the data to Hubspot
- Search for the client ID based on his email
- Upload the summarized conversation as meeting notes

--- Workflow: 0891_Code_Manual_Create_Triggered.json ---
Name: N/A
Description: # Create Google Drive Folders by Path
This workflow created nested Google Drive folder from a path string and returns the ID of the final folder for immediate use.

Use this workflow in your other flows by calling it directly with the following data:
- `google_drive_folder_id` -> The ID of the folder where you want to create additional folders in. You can use "root" if you want to begin at root level of your Drive.
- `desired_path` -> The folder structure you'd like to create in Google Drive. Each folder is separated by a slash, eg: `Projects/Clients/Reports`

--- Workflow: 0892_Webhook_Code_Create_Webhook.json ---
Name: N/A
Description: ## Gmail PDF Invoice/Receipt Classifier & Google Drive Uploader (via n8n & OpenAI)

_**DISCLAIMER**: AI classification isn't perfect. Always double-check that the correct documents were identified and uploaded._

This n8n workflow, triggered via a webhook, scans your Gmail for emails within a specified date range, extracts PDF attachments, and uses OpenAI to determine if each PDF matches a defined category (defaulting to "receipt or invoice"). Matched PDFs are then uploaded to a uniquely named Google Drive folder based on the date range. You can customize the classification term (e.g., change "receipt or invoice" to "contract") and optionally have the workflow email the collected PDFs to a specified address.

### How it works
1.  Triggers via a `Webhook` receiving a start date, end date, and an optional flag to send an email.
2.  Creates a dated folder in `Google Drive` (e.g., `invoices_YYYY-MM-DD_YYYY-MM-DD`).
3.  Fetches emails with attachments from `Gmail` within the specified date range.
4.  Iterates through each attachment, filtering specifically for `PDF` files.
5.  Extracts text from each PDF (skipping if the text exceeds token limits set in the `Configure` node).
6.  Uses the `OpenAI` node to ask if the PDF content and filename look like the item defined in the `Configure` node's "Match on" field (e.g., "receipt or invoice").
7.  If OpenAI responds with "true", the original `PDF` file is uploaded to the `Google Drive` folder created in step 2.
8.  If the initial webhook request included the flag to send an email, it aggregates all successfully matched PDFs and sends them via `Gmail` to the address specified in the `Configure` node.

Workflow written by [Tom](https://browsewiz.com)


--- Workflow: 0893_Stickynote_Emailreadimap_Create.json ---
Name: N/A
Description: ## Set receiving email account
- Ddefaults to an IMAP account node, but you can put a gmail account or any  email trigger

--- Workflow: 0894_Splitout_Redis_Create_Triggered.json ---
Name: N/A
Description: ## 1. Add MCP Server Trigger
[Read more about the MCP server trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger/)

--- Workflow: 0895_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Update the properties by object Workflow


--- Workflow: 0896_Facebookleadads_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: ### Introduction
This workflow streamlines the process of capturing leads via Facebook Lead Ads and transferring them automatically into KlickTipp. It ensures that contact data is accurately mapped and added to KlickTipp to trigger personalized email campaigns.

### Benefits
- **Automated lead import**: New leads from Facebook forms are automatically synced to KlickTipp without manual effort.
- **Seamless campaign activation**: Tags can be assigned during the process, instantly triggering follow-up campaigns like welcome emails or webinar reminders.
- **Reliable data structure**: Validated form entries are mapped to predefined custom fields, ensuring a high-quality contact base in KlickTipp.

### Key Feature
- **Facebook Lead Ads Trigger**: Captures form submissions from Facebook Ads in real-time.
- **Data Processing**: Assigns and formats lead data based on field mappings:
  - Maps standard Facebook fields (name, email) directly.
  - Matches custom fields such as course selection, payment method, and comments to KlickTipp custom fields.
- **Subscriber Management in KlickTipp**: Adds or updates contacts with structured mapping to custom fields. Tags can be dynamically added for segmentation:
  - Personal data: First name, email address.
  - Form responses: Selected course, payment method, comments.
  - Tag-based segmentation for automated workflows.

#### Setup Instructions
1. Set up the Facebook Leads Ads (choose your form) and KlickTipp nodes (choose opt-in, tagging and field mapping) in your n8n instance.
2. Authenticate your Facebook Lead Ads and KlickTipp accounts.
3. Create the necessary custom fields to match the data structure
4. Verify and customize field assignments in the workflow to align with your specific form and subscriber list setup.

Custom Fields:
   - `Facebook_Leads_Ads_Kommentar` (Text)
   - `Facebook_Leads_Ads_Kursauswahl` (Text)
   - `Facebook_Leads_Ads_Zahlungsweise` (Text)


### Testing and Deployment
1. Perform a test with the meta developer tool verify the transmission. (‚ö†Ô∏è Attention: KlickTipp rightfully rejects this test address test@fb.com due to its validation rules, as it cannot receive emails. You can manipulate the output in the node for testing.)
2. Confirm new subscribers appear in KlickTipp with mapped fields and tags.
3. Launch your campaign in Facebook with full automation in place.

- **Customization**: Adjust tag names and field mappings in the KlickTipp module of Make to fit your specific setup. Ensure any additional fields are created beforehand in KlickTipp to avoid sync errors.

--- Workflow: 0897_Limit_Code_Send_Scheduled.json ---
Name: N/A
Description: ## Set n8n API

--- Workflow: 0898_Code_Schedule_Create_Scheduled.json ---
Name: N/A
Description: # AI Agent
AI agent powered by GPT-4o that analyses stocks by combining technical analysis and news sentiment, generating detailed reports in Hebrew with data-driven investment recommendations

--- Workflow: 0899_Splitout_GoogleCalendar_Update_Webhook.json ---
Name: N/A
Description: ## 1. New Google Calendar Event Detected

Our workflow is triggered when a new calendar event comes in. 

The event gives us access to a list of attendees which we can loop over in the next step. We need to filter out ourselves if we are in the meeting too!

--- Workflow: 0900_Respondtowebhook_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ### üß† Place your logic here!
Your Agent logic goes here.
You can, for example, use an **AI Agent** to provide information back to your Retell agent and/or **make an action in a third party service**. For example: book an event, add a contact to a CRM, etc. 
Sky is the limit! üôå

--- Workflow: 0901_HTTP_GoogleSheets_Automate_Webhook.json ---
Name: AccountCraft WhatsApp Automation - Infridet
Description: No description found in sticky notes.

--- Workflow: 0902_Splitout_Code_Create_Scheduled.json ---
Name: N/A
Description: # üè¢ Company Decision Maker Discovery
This workflow processes a list of companies (optionally with their websites to improve search accuracy) and outputs a curated list of decision-makers (e.g., CEO, COO, CTO, VP, Director) along with their contact information (LinkedIn, email, phone) into a structured leads database. It also sends out a weekly report to a Slack channel, specifying the number of verified leads generated over the past week.‚Äã

Here's the [Google Sheet](https://docs.google.com/spreadsheets/d/1KqKFZ7Uxrt1MivBjLklGdPRMgNBhEc0slpthoSjt2wI/edit?gid=0#gid=0) template for this workflow.

You can explore the Apps Script code in the sheet via __Extensions > App Script__

--- Workflow: 0903_Wait_Redis_Automate_Triggered.json ---
Name: N/A
Description: 







































### üßπ Buffer Cleanup

After consolidation and reply:

* **DELETE** keys:

  * `buffer_in:{{context_id}}`
  * `buffer_count:{{context_id}}`
  * `waiting_reply:{{context_id}}`


--- Workflow: 0904_Wait_Code_Create_Webhook.json ---
Name: N/A
Description: ## Type a Keyword and Discover What People Search on Google

This workflow scrapes Google autocomplete results by combining **your keyword** with every letter from **A to Z**.

**Example:**  
Keyword: `n8n`  
Results:  
- n8n agent  
- n8n automation  
- n8n api  
- ...and so on


--- Workflow: 0905_Wait_Schedule_Create_Webhook.json ---
Name: N/A
Description: # 01. Content Concept Generation

**Purpose:** This step uses Google Gemini to generate **one unique content concept** tailored for the specified platform (Instagram/LinkedIn), based on the input topic, audience, and brand voice. The format is fixed to "Single Image".

**Input (from Node '2. Prepare Input Variables'):**
*   `Topic` (string)
*   `TargetAudience` (string)
*   `BrandVoice` (string)
*   `Platform` (string: 'Instagram' )

**Output (JSON):**
*   `{"ideas": [{"concept": "Generated concept text...", "suggested_format": "Single Image"}]}`

--- Workflow: 0906_Manual_GoogleSheets_Update_Triggered.json ---
Name: N/A
Description: # Data Extraction
## Retrieves recent posts from specific Reddit community (subreddit)
## Filters content by keywords and upvotes

--- Workflow: 0907_Schedule_Removeduplicates_Create_Scheduled.json ---
Name: N/A
Description: ## 1. Get Open Tickets
[Read more about the Scheduled Trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger)

We can use a scheduled trigger to aggressively check for newly open tickets in our JIRA support queue. The "remove duplicates" node (ie. Mark as Seen) is used so that we don't process any issues more than once.

--- Workflow: 0908_Manual_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: ### HTML to PDF
- Request HTML Data
- Convert HTML to PDF

--- Workflow: 0909_Manual_Stickynote_Process_Triggered.json ---
Name: N/A
Description: ### HTML to PDF
- Request HTML Data.
- Convert HTML to PDF.

--- Workflow: 0910_Bitly_Datetime_Update_Webhook.json ---
Name: N/A
Description: # APP ACTIONS

#### This section contains nodes for interacting with external apps and services like Google Sheets, Telegram, or Notion.

--- Workflow: 0911_Schedule_Removeduplicates_Create_Scheduled.json ---
Name: N/A
Description: ## 2. Automate Generation and Triaging of Ticket
[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)

New tickets always need to be properly labelled and prioritised but it's not always possible to get to update all incoming tickets if you're light on hands. Using an AI is a great use-case for triaging of tickets as its contextual understanding helps automates this step.

--- Workflow: 0912_Schedule_Removeduplicates_Create_Scheduled.json ---
Name: N/A
Description: ## 2. Automate Generation and Triaging of Ticket
[Read more about the Basic LLM node](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)

New tickets always need to be properly labelled and prioritised but it's not always possible to get to update all incoming tickets if you're light on hands. Using an AI is a great use-case for triaging of tickets as its contextual understanding helps automates this step.

--- Workflow: 0913_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Web Scraper API

[Inscription - Free Trial](https://get.brightdata.com/website-scraper)

--- Workflow: 0914_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ## üì¨ Workflow: Transparent Tracking Pixel for Email Open Detection

### üìå Description
This workflow serves a **1x1 transparent PNG image** via a webhook, which can be embedded in an email to **track when the email is opened**. When the image is loaded by the recipient's email client, the webhook is triggered, optionally capturing a `userId` to identify who opened the email.

---

### üìÇ Workflow Steps

1. **Webhook Trigger** (`Request img`)
   - **Path:** `/webhook/change-with-your-id`
   - Triggered by an HTTP request (e.g. when the image is loaded in an email).
   - Accepts a query parameter `id` to identify the recipient.

2. **Set Base64 Data** (`Create data pix`)
   - Creates a variable `data` containing a Base64-encoded transparent PNG image (1x1 pixel).

3. **Convert to Binary** (`Create img bin`)
   - Converts the Base64 `data` string into a binary file.
   - Sets MIME type to `image/png`.

4. **Respond to Webhook** (`Respond to Webhook`)
   - Sends the binary image file in the HTTP response.

5. **Logging** (`Do anything to log`)
   - Placeholder node to log or process the `id` or request metadata.
   - You can access the `id` using `{{$json["query"]["id"]}}`.
   - You can also use any parameter you want

---

### ‚úâÔ∏è How to Use in Emails

Embed the image in an HTML email like this:

```html
<img src="https://<your-n8n-instance>/webhook/db4880e7-2134-4994-94e5-a4a3aa120440?id=1234" width="1" height="1" style="display:none;" alt="" />
```

When the email is opened and the image is loaded, the workflow will be triggered.

---

### üõ†Ô∏è Notes
- Some email clients block images by default; this may prevent tracking.
- You can enhance the workflow to store open events in a database, log the timestamp, IP, or user agent.
- Make sure to comply with data privacy and consent regulations (e.g. GDPR).

--- Workflow: 0915_Splitout_Code_Create_Webhook.json ---
Name: N/A
Description: ## Settings
- Set in "Set data here" the email you are registered with in Hubspot as an Owner, and the link of a Google sheet copied [from this one](https://docs.google.com/spreadsheets/d/1y17jIU6JnNPcmazWf2GsmRpdjBBMnkN41tRJnAO5KrQ/edit?usp=sharing)


--- Workflow: 0916_Telegram_Gmail_Create_Triggered.json ---
Name: N/A
Description: ## 1. New Email Received

Our workflow is triggered when a new email comes in. 

We use an IF node here to only run the automation on incoming emails to the INBOX - not in the SENT folder.

--- Workflow: 0917_Filter_Whatsapp_Create_Triggered.json ---
Name: N/A
Description: ## Data reception via Webhook call or message

--- Workflow: 0918_Code_Noop_Send_Triggered.json ---
Name: N/A
Description: ## JSON PARSER

1.converts the textual data final order like
item name 
quantity 
and table name in a json.

2.if the data doesn't include the above it returns null.

--- Workflow: 0919_Splitout_Extractfromfile_Create_Webhook.json ---
Name: N/A
Description: ## 1. Ask for Source Style and Target Image
[Learn more about the Form Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/)

We'll use a form interface for this template which allows the users to specify an image whose style we'll use as reference and a prompt to generate the target image. Form validation loop can be achieved by combining another form node with the IF node.

--- Workflow: 0920_HubSpot_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## What does it do?
Objective:

Streamline the onboarding process for new customers, ensuring they receive all necessary resources and support.
Trigger: Set a webhook trigger or a CRM trigger (like HubSpot or Salesforce) for when a new customer is added.

Send Welcome Email: Use the Gmail or SMTP node to send a personalized welcome email to the customer.

Schedule a Welcome Call: Use the Calendar node (Google Calendar) to automatically create a calendar event for a welcome call.

Assign a CSM: Use the CRM node (like HubSpot) to assign the new customer to a dedicated CSM.

--- Workflow: 0921_Splitout_Code_Send_Scheduled.json ---
Name: N/A
Description: ## 1. Fetch All Activity from Last Week
[Learn more about the Slack node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack)

We'll start by fetching all activity in our team channel over the last 7 days and group them  by the message author. We can do this using the Slack node with a DateTime filter. This will give us the raw data to pick apart and analyse for reporting purposes.

--- Workflow: 0922_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: ### üõ†Ô∏è Config Node Setup

*This node defines the configuration for the secure webhook.*

- `config.bearerToken`: The expected Bearer token for authentication.

- `config.requiredFields`: Set one key for each required field in the incoming request body (e.g., `config.requiredFields.message`.
*üëâ The value doesn't matter, only the keys are checked.*

--- Workflow: 0923_Splitout_Code_Send_Scheduled.json ---
Name: N/A
Description: ## 1. Fetch All Channel Messages from Last Week
[Learn more about the MS Teams node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.microsoftteams)

We'll start by fetching all activity in our team channel over the last 7 days and group them  by the message author. We can do this using the MS Teams node. This will give us the raw data to pick apart and analyse for reporting purposes.

--- Workflow: 0924_Code_Respondtowebhook_Process_Webhook.json ---
Name: N/A
Description: ## Try it out

### üîó **1. Webhook Entry & Initial Decryption Block**

**Nodes involved:**

* `Webhook1`
* `move to base64`
* `[partially visible node for decryption using RSA + AES]`

**Description:**

The workflow begins with the `Webhook1` node, which listens for incoming HTTP POST requests. These requests typically contain encrypted data that needs to be decoded to proceed with processing.

Once received, the `move to base64` node reformats the incoming encrypted components (`encrypted_flow_data`, `encrypted_aes_key`, and `initial_vector`) into binary buffers. These are required inputs for decryption.

Then, the custom JavaScript code (cut off in your snippet) uses a private RSA key to decrypt the AES key, which in turn is used to decrypt the actual data payload (likely using AES-GCM). This is a secure hybrid encryption method‚ÄîRSA for key exchange, AES for data encryption.

---

### üß† **2. Payload Parsing & Preprocessing Block**

**Node involved:**

* `Json Parser`

**Description:**

Here, we take the decrypted JSON payload from Whatsapp Flows and parse key elements from it. This helps standardize and clean the input before deciding what kind of logic or response should follow based on user interaction.

---

### üîÄ **3. Flow Decision Block**

**Node involved:**

* `Switch`

**Description:**

This decision-making node routes the workflow depending on the screen context extracted earlier.

E.g., If the screen where the user is exchanging information is appointment date:

* `"APPOINTMENT"` ‚Üí follow the logic that handles scheduling data.

This allows dynamic routing within the workflow, making it adaptable to different user journey steps or screens.

---

### üìÜ **4. Appointment Data Handling Block**

**Nodes involved:**

* `Data Extraction Code`
* `Respond to Webhook1`

**Description:**

When the screen is `"APPOINTMENT"`, the `Data Extraction Code` node processes appointment data‚Äîtypically grouping appointment slots by date. This is useful for summarizing available times, perhaps to show a user a calendar view of options.

The results are then sent back as a plain text response using `Respond to Webhook1`, which finalizes the API call and ensures a secure end-to-end interaction using Whatsapp Flows.


### üß© **Summary**

This n8n workflow handles encrypted user interactions and adapts dynamically based on the screen or step the user is currently in. Here's the general pattern:

1. **Webhook receives encrypted data**
2. **Data is decrypted using hybrid RSA-AES encryption**
3. **Parsed to extract the current step (`screen`)**
4. **Conditional logic decides which path to follow**
5. **Extracts relevant information (e.g., appointments)**
6. **Returns response back to the user interface or chatbot**


--- Workflow: 0925_Stopanderror_Wait_Automate_Triggered.json ---
Name: Prevent concurrent workflow runs using Redis
Description: ## Check if working
Will output status if something is going on.

Inputs:
- action -> "get"
- key -> a string used for tracking

* Remove unused inputs when calling workflow *

--- Workflow: 0926_Code_Webhook_Create_Webhook.json ---
Name: N/A
Description: # Material Issue Request and Approval

--- Workflow: 0927_GoogleSheets_Slack_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0928_Manual_N8N_Automate_Triggered.json ---
Name: N/A
Description: # Auto Starter

On importing workflows these will not be auto started, even if the old version was running. To fix this we created this workflow that can be run after n8n starts. It fits in our auto deploy pipeline and modified n8n container that will import workflows, start n8n and start the tagged workflows.

- Start this workflow after n8n starts.
- It will get all workflows in the running n8n instance.
- If the files have a tag **'Auto start'** the workflow will be started.


**Configuration**
- You need a a **n8n api key** configured.

--- Workflow: 0929_Noop_Extractfromfile_Automation.json ---
Name: OpenAI e-mail classification - application
Description: ### Change or add any category you want
Each category can be assigned it's own specific workflow

--- Workflow: 0930_Manual_Spreadsheetfile_Export_Triggered.json ---
Name: PostgreSQL export to CSV
Description: No description found in sticky notes.

--- Workflow: 0931_Telegram_Splitout_Monitor_Scheduled.json ---
Name: N8N Financial Tracker Telegram Invoices to Notion with AI Summaries & Reports
Description: ## Automated Financial Tracker: Telegram Invoices to Notion with AI Summaries & Reports


--- Workflow: 0932_Limit_Code_Create_Webhook.json ---
Name: Extract And Decode Google News RSS URLs to Clean Article Links
Description: ## Get Google News

Change the language parameters on ISO639-1 standard 

1. hl=it
2. gl=IT
3. ceid=IT:it

--- Workflow: 0933_Manual_Stickynote_Create_Webhook.json ---
Name: Create AI-Ready Vector Datasets for LLMs with Bright Data, Gemini & Pinecone
Description: ## Note
Please make sure to set the URL for web crawling. 

Web-Unlocker Product is being utilized for performing the web scrapping. 

This workflow is utilizing the Basic LLM Chain, Information Extraction with the AI Agents for formatting, extracting and persisting the response in PineCone Vector Database

--- Workflow: 0934_HTTP_Code_Automate_Webhook.json ---
Name: Automated PDF to HTML Conversion
Description: ## Automated PDF to HTML Conversion


--- Workflow: 0935_HTTP_GoogleSheets_Sync_Webhook.json ---
Name: Clockify to Syncro
Description: No description found in sticky notes.

--- Workflow: 0936_HTTP_Lingvanex_Automation_Webhook.json ---
Name: Daily poems in Telegram
Description: No description found in sticky notes.

--- Workflow: 0937_HTTP_Editimage_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0938_Manual_Mailchimp_Automation_Triggered.json ---
Name: Mailchimp
Description: No description found in sticky notes.

--- Workflow: 0939_HTTP_Cron_Automation_Webhook.json ---
Name: NameCheap Dynamic DNS (DDNS)
Description: No description found in sticky notes.

--- Workflow: 0940_Slack_Manual_Automation_Scheduled.json ---
Name: Orlen
Description: No description found in sticky notes.

--- Workflow: 0941_Mattermost_GoogleSheets_Automation_Scheduled.json ---
Name: StatsInstagram
Description: No description found in sticky notes.

--- Workflow: 0942_Webhook_Signl4_Automation_Webhook.json ---
Name: TheHive
Description: No description found in sticky notes.

--- Workflow: 0943_Manual_Xml_Automation_Triggered.json ---
Name: XML Conversion
Description: No description found in sticky notes.

--- Workflow: 0944_Telegram_Rssfeedread_Automation_Scheduled.json ---
Name: rss-telegram
Description: No description found in sticky notes.

--- Workflow: 0945_Error_Code_Send_Triggered.json ---
Name: Error Alert and Summarizer
Description: # SET YOUR EMAILS

--- Workflow: 0946_Code_Webhook_Send_Webhook.json ---
Name: Analyze_email_headers_for_IPs_and_spoofing__3
Description: ## Output
Returns output like:
```
[
    {
        "ipAnalysis": [
            {
                "IP": "104.245.209.248",
                "fraud_score": 87,
                "recent_abuse": true,
                "Organization": "Deft Hosting",
                "tor": false,
                "ISP": "Server Central Network",
                "recent_spam_activity": "Identified spam in the past 24-48 hours",
                "ip_sender_reputation": "Bad"
            },
            {
                "IP": "09.06.05.41",
                "recent_spam_activity": "unknown",
                "ip_sender_reputation": "unknown"
            }
        ]
    },
    {
        "spf": "pass",
        "dkim": "pass",
        "dmarc": "pass"
    }
]
```

--- Workflow: 0947_Executeworkflow_Stickynote_Automate_Triggered.json ---
Name: Workflow Results to Markdown Notes in Your Obsidian Vault, via Google Drive
Description: ## Connect folder to Obsidian Vault 
**Setup Instructions:**
- Create a folder in your Google Drive that syncs with your desktop.
- Configure the Google Drive node as follows:
   - Assign the newly created folder as the parent-folder.
   - Specify the filename, appending .md (e.g., `{{ $json.title }}.md`).
   - Add Markdown content, including optional YAML Frontmatter, in the File Content field.
- Establish a Symlink between the Google Drive folder and a new folder in your Obsidian Vault.

--- Workflow: 0948_Filter_Schedule_Create_Scheduled.json ---
Name: N/A
Description: # 00. Daily Start & Fetch Customer Data

**Purpose:** Automatically triggers the workflow **once daily** based on the schedule set in the first node. It then fetches all customer data from the specified Google Sheet ('Customer Data' sheet) to identify potential churn risks for the day.

--- Workflow: 0949_Manual_Twilio_Automate_Triggered.json ---
Name: A workflow with the Twilio node
Description: No description found in sticky notes.

--- Workflow: 0950_GoogleSheets_Slack_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0951_Manual_Activecampaign_Automation_Triggered.json ---
Name: 
Description: No description found in sticky notes.

--- Workflow: 0952_HTTP_Medium_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0953_Webflow_Update_Triggered.json ---
Name: Receive updates when a form submission occurs in your Webflow website
Description: No description found in sticky notes.

--- Workflow: 0954_Manual_Htmlextract_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0955_HTTP_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0956_HTTP_Readbinaryfile_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0957_Manual_Paypal_Automation_Triggered.json ---
Name: 
Description: No description found in sticky notes.

--- Workflow: 0958_Splitout_Webhook_Automation_Webhook.json ---
Name: LLM Chaining examples
Description: # Connect to one of the blue sections -->
## This can be anything:
- Chat input
- Trigger from external system
- CRON-scheduled event

--- Workflow: 0959_Manual_Signl4_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0960_Manual_Freshdesk_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0961_Shopify_Filter_Create_Triggered.json ---
Name: Sync New Shopify Products to Odoo Product
Description: No description found in sticky notes.

--- Workflow: 0962_Manual_Postgres_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0963_Mautic_Webhook_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0964_HTTP_Bannerbear_Automation_Scheduled.json ---
Name: Cocktail Recipe Sharing
Description: No description found in sticky notes.

--- Workflow: 0965_Paypal_Update_Triggered.json ---
Name: Receive updates when a billing plan is activated in PayPal
Description: No description found in sticky notes.

--- Workflow: 0966_HTTP_Discord_Import_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0967_Asana_Update_Triggered.json ---
Name: Receive updates when an event occurs in Asana
Description: No description found in sticky notes.

--- Workflow: 0968_Postmark_Update_Triggered.json ---
Name: Receive updates when an email is bounced or opened
Description: No description found in sticky notes.

--- Workflow: 0969_Dropbox_Manual_Automate_Webhook.json ---
Name: Workflow management
Description: No description found in sticky notes.

--- Workflow: 0970_HTTP_Schedule_Create_Webhook.json ---
Name: Daily AI News Translation & Summary with GPT-4 and Telegram Delivery
Description: ### Setup

1. **Add NewsAPI and GNews API Keys**
    - Register for accounts on [NewsAPI.org](https://newsapi.org/) and [GNews](https://gnews.io/) to obtain your API keys.
    - Input your NewsAPI key directly into the `Fetch NewsAPI articles` node.
    - Input your GNews API key into the `Fetch GNews articles` node.
2. **Set up your Telegram Bot**
    - Create a Telegram Bot via [BotFather](https://core.telegram.org/bots#6-botfather) and copy the generated Bot Token.
    - In n8n, create Telegram Bot credentials using this token.
    - In the `Send summary to Telegram` node, enter the chat ID of your target user, group, or channel to receive the messages.
3. **Configure OpenAI Credentials**
    - In n8n, create a new credential using your OpenAI API key.
    - Assign this credential to the `GPT-4.1 Model` node (or equivalent OpenAI/AI nodes).

After completing these steps, your workflow is fully configured to fetch, summarize, and deliver daily AI news to your selected Telegram chat automatically.

### How to customize this workflow

- **Change the topic:** Update the keywords in the NewsAPI and GNews nodes for other subjects (e.g., ‚Äúblockchain‚Äù, ‚Äúquantum computing‚Äù).
- **Adjust delivery time:** Modify the scheduled trigger to your preferred hour.
- **Tweak summary style or language:** Refine the prompt in the AI summarizer node for different tones or translate into other languages as needed.

--- Workflow: 0971_Limit_Splitout_Automation_Webhook.json ---
Name: ‚ö°AI-Powered YouTube Playlist & Video Summarization and Analysis v2
Description: ## RAG & Reply to User Query
- Retrieves and provides answers to user queries combining retrieval-augmented generation.
- Processes messages without specific routing rules.
     

--- Workflow: 0972_Cortex_Emailreadimap_Send.json ---
Name: Email
Description: No description found in sticky notes.

--- Workflow: 0973_GitHub_Slack_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0974_GoogleSheets_Telegram_Export_Triggered.json ---
Name: Save Telegram reply to journal spreadsheet
Description: No description found in sticky notes.

--- Workflow: 0975_Manual_Zulip_Automation_Scheduled.json ---
Name: Zammad Open Tickets
Description: No description found in sticky notes.

--- Workflow: 0976_Manual_HTTP_Automation_Webhook.json ---
Name: post to wallabag
Description: No description found in sticky notes.

--- Workflow: 0977_Odoo_Code_Import_Scheduled.json ---
Name: Import Odoo Product Images from Google Drive
Description: No description found in sticky notes.

--- Workflow: 0978_Stickynote_GoogleDrive_Automate_Triggered.json ---
Name: Automated Image Metadata Tagging (Community Node)
Description: # Welcome to my Automated Image Metadata Tagging Workflow!

This workflow automatically analyzes the image content with the help of AI and writes it directly back into the image file as keywords.

## This workflow has the following sequence:

1. Google Drive trigger (scan for new files added in a specific folder)
2. Download the added image file
3. Analyse the content of the image
4. Merge Metadata and image file
5. Write the Keywords into the Metadata (dc:subject/keywords) and create new image file
6. Update the original file in the Google Drive folder

## The following accesses are required for the workflow:
- You have to install the [n8n-nodes-exif-data Community Node](https://www.npmjs.com/package/n8n-nodes-exif-data)
- Google Drive: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/google)
- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)

You can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz

--- Workflow: 0979_Webhook_Filter_Automation_Webhook.json ---
Name: comentarios automaticos
Description: # Webhook Verification
Description:
Handles the initial verification handshake with Instagram's Webhook API.
Instructions:

Ensure the hub.verify_token matches the token configured in your Instagram App settings.

The response should echo the hub.challenge parameter to confirm the webhook setup.‚Äã



--- Workflow: 0980_Code_Webhook_Automation_Webhook.json ---
Name: Google Page Entity Extraction Template
Description: # Google Page Entity Extraction Template

## What this workflow does
This workflow allows you to extract named entities (people, organizations, locations, etc.) from any web page using Google's Natural Language API. Simply send a URL to the webhook endpoint, and the workflow will fetch the page content, process it through Google's entity recognition service, and return the structured entity data.

### How to use
1. Replace "YOUR-GOOGLE-API-KEY" with your actual Google Cloud API key (Natural Language API must be enabled)
2. Activate the workflow and use the webhook URL as your endpoint
3. Send a POST request to the webhook with a JSON body containing the URL you want to analyze: {"url": "https://example.com/page"}
4. Review the returned entity analysis with categories, salience scores, and metadata

## Webhook Input Format
The webhook expects a POST request with a JSON body in this format:
```json
{
  "url": "https://website-to-analyze.com/page"
}
```
### Response Format
The webhook returns a JSON response containing the full entity analysis from Google's Natural Language API, including:

Entity names and types (PERSON, LOCATION, ORGANIZATION, etc.)
Salience scores indicating entity importance
Metadata and mentions within the text
Entity sentiment (if available)

--- Workflow: 0981_Manual_Awssns_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0982_Manual_Mongodb_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0983_Manual_Awsses_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0984_Awssns_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0985_Manual_Awslambda_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0986_Manual_Msg91_Send_Triggered.json ---
Name: Send an SMS using MSG91
Description: No description found in sticky notes.

--- Workflow: 0987_Manual_Facebookgraphapi_Automation_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0988_Manual_Writebinaryfile_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0989_Mailchimp_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0990_Manual_Cockpit_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0991_Manual_Hunter_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0992_Mqtt_Send_Triggered.json ---
Name: Receive messages for a MQTT queue
Description: No description found in sticky notes.

--- Workflow: 0993_Manual_Mailjet_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0994_Mailjet_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0995_Manual_Mailgun_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0996_Manual_Hackernews_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0997_GitHub_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0998_Gitlab_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 0999_Bitbucket_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1000_Manual_Travisci_Create_Triggered.json ---
Name: Trigger a build using the TravisCI node
Description: No description found in sticky notes.

--- Workflow: 1001_Telegram_Stickynote_Automation_Triggered.json ---
Name: MCP Client with Brave and Telegram
Description: ## PRELIMINARY STEPS
- Access to an n8n self-hosted instance and install the Community node "n8n-nodes-mcp". Please see this [easy guide](https://github.com/nerding-io/n8n-nodes-mcp)
- Get your Brave Search API Key: https://brave.com/search/api/
- Telegram Bot Access Token




--- Workflow: 1002_Acuityscheduling_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1003_Manual_Invoiceninja_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1004_Invoiceninja_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1005_Clockify_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1006_Copper_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1007_Eventbrite_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1008_Manual_Rundeck_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1009_Calendly_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1010_Jotform_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1011_Manual_Xero_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1012_Manual_Bannerbear_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1013_Manual_Bannerbear_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1014_Manual_Wordpress_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1015_Shopify_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1016_Manual_Shopify_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1017_Manual_Mautic_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1018_Typeform_Airtable_Automation_Triggered.json ---
Name: CFP Selection 1
Description: No description found in sticky notes.

--- Workflow: 1019_Manual_Paddle_Create_Triggered.json ---
Name: Create a coupon on Paddle
Description: No description found in sticky notes.

--- Workflow: 1020_Surveymonkey_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1021_Manual_Zohocrm_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1022_Manual_Keap_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1023_Keap_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1024_Manual_Mondaycom_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1025_Manual_Redis_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1026_Manual_Graphql_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1027_Manual_Box_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1028_Manual_Trello_Automation_Triggered.json ---
Name: CFP Selection 2
Description: No description found in sticky notes.

--- Workflow: 1029_Manual_Xml_Process_Webhook.json ---
Name: Convert the JSON data received from the CocktailDB API in XML
Description: No description found in sticky notes.

--- Workflow: 1030_HTTP_Typeform_Monitor_Webhook.json ---
Name: Expense Tracker App
Description: No description found in sticky notes.

--- Workflow: 1031_Box_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1032_Manual_Microsoftonedrive_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1033_Manual_Microsoftexcel_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1034_Manual_Helpscout_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1035_Jira_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1036_Error_Twilio_Send_Triggered.json ---
Name: Send an SMS when a workflow fails
Description: No description found in sticky notes.

--- Workflow: 1037_Manual_Mandrill_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1038_Manual_Crypto_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1039_Manual_Datetime_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1040_Manual_Editimage_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1041_Manual_Readbinaryfile_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1042_Manual_Readbinaryfiles_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1043_HTTP_Telegram_Send_Webhook.json ---
Name: Send a cocktail recipe every day via a Telegram
Description: No description found in sticky notes.

--- Workflow: 1044_Manual_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1045_Manual_Renamekeys_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1046_Manual_Rssfeedread_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1047_Manual_Emailsend_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1048_Manual_Readpdf_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1049_Manual_Readbinaryfile_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1050_Emailreadimap_Send.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1051_Manual_Executeworkflow_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1052_HTTP_Telegram_Update_Webhook.json ---
Name: Receive updates from Telegram and send an image of a cocktail
Description: No description found in sticky notes.

--- Workflow: 1053_Manual_Philipshue_Automation_Triggered.json ---
Name: Turn on a light and set its brightness
Description: No description found in sticky notes.

--- Workflow: 1054_Manual_Cratedb_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1055_Manual_Mysql_Automation_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1056_Manual_Postgres_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1057_Manual_Mocean_Send_Triggered.json ---
Name: Send an SMS using the Mocean node
Description: No description found in sticky notes.

--- Workflow: 1058_Splitout_Code_Import_Triggered.json ---
Name: Get Comments from Facebook Page
Description: ## Set Parameter Here
Set Facebook PageID & Number of Latest Posts to be fetched here


--- Workflow: 1059_Splitout_Code_Automation_Webhook.json ---
Name: Make OpenAI Citation for File Retrieval RAG
Description: ## Within N8N, there will be a chat button to test

--- Workflow: 1060_Automate_Webhook.json ---
Name: POC - Chatbot Order by Sheet Data
Description: No description found in sticky notes.

--- Workflow: 1061_Stopanderror_Telegram_Automation_Triggered.json ---
Name: Telegram RAG pdf
Description: # Load data into database
Fetch file from **Telegram**, split it into chunks and insert into **Pinecone** index, a message from **Telegram** will be sent just to let the user know that the process finished

--- Workflow: 1062_Manual_GoogleSheets_Update_Triggered.json ---
Name: Append, lookup, update, and read data from a Google Sheets spreadsheet
Description: No description found in sticky notes.

--- Workflow: 1063_Slack_Graphql_Automation_Webhook.json ---
Name: Slack-GitHub User Info
Description: No description found in sticky notes.

--- Workflow: 1064_HTTP_Clockify_Update_Webhook.json ---
Name: Syncro Status Update Clockify
Description: No description found in sticky notes.

--- Workflow: 1065_Telegram_Webhook_Automation_Webhook.json ---
Name: bash-dash telegram
Description: No description found in sticky notes.

--- Workflow: 1066_Manual_GitHub_Create_Triggered.json ---
Name: new
Description: No description found in sticky notes.

--- Workflow: 1067_Functionitem_Manual_Export_Webhook.json ---
Name: Example - Backup n8n to Nextcloud
Description: No description found in sticky notes.

--- Workflow: 1068_GitHub_Slack_Automation_Triggered.json ---
Name: Extranet Releases
Description: No description found in sticky notes.

--- Workflow: 1069_Figma_Stickynote_Update_Triggered.json ---
Name: Automate Figma Versioning and Jira Updates with n8n Webhook Integration
Description: ## Note
To use this automation, you will need the Figma Commit Plugin installed and configured. The plugin sends the design version details via a webhook to trigger this n8n workflow.

You can find the Figma Commit Plugin on GitHub here:
üîó [Figma Commit Plugin on GitHub](https://github.com/omid-d3v/Figma-Commit-plugin-with-webhook/)

Make sure to follow the setup instructions in the plugin‚Äôs documentation to get started.

--- Workflow: 1070_Telegram_Wordpress_Create_Webhook.json ---
Name: üîçüõ†Ô∏èGenerate SEO-Optimized WordPress Content with Perplexity Research
Description: ## Write SEO Optimized Blog Post




--- Workflow: 1071_Googlecalendartool_Stickynote_Create_Triggered.json ---
Name: Build an MCP Server with Google Calendar
Description: 

--- Workflow: 1072_HTTP_Stickynote_Automation_Webhook.json ---
Name: Perplexity Researcher
Description: ## Perplexity Research Workflow Overview
This workflow takes a user query, formats it using a system prompt, and sends it to the Perplexity AI Sonar model for search.
Responses are extracted and returned as clean output.

--- Workflow: 1073_Manual_GoogleSheets_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1074_Manual_HTTP_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1075_Manual_Wordpress_Create_Triggered.json ---
Name: Create a post and update the post in WordPress
Description: No description found in sticky notes.

--- Workflow: 1076_Manual_Cron_Automation_Scheduled.json ---
Name: n8n_mysql_purge_history_greater_than_10_days
Description: No description found in sticky notes.

--- Workflow: 1077_Mattermost_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1078_Manual_Dropbox_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1079_Helpscout_Create_Triggered.json ---
Name: Receive updates when a customer is created in HelpScout
Description: No description found in sticky notes.

--- Workflow: 1080_Manual_HTTP_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1081_HubSpot_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1082_Slack_Readbinaryfile_Create.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1083_Mautic_GoogleSheets_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1084_Sse_Automation_Triggered.json ---
Name: 
Description: No description found in sticky notes.

--- Workflow: 1085_Affinity_Create_Triggered.json ---
Name: Receive updates when a new list is created in Affinity
Description: No description found in sticky notes.

--- Workflow: 1086_Manual_Contentful_Automation_Triggered.json ---
Name: 
Description: No description found in sticky notes.

--- Workflow: 1087_Manual_Unleashedsoftware_Automation_Triggered.json ---
Name: 
Description: No description found in sticky notes.

--- Workflow: 1088_Manual_S3_Import_Webhook.json ---
Name: Upload a file and get a list of all the files in a bucket
Description: No description found in sticky notes.

--- Workflow: 1089_Manual_Writebinaryfile_Automation_Webhook.json ---
Name: Store the data received from the CocktailDB API in JSON
Description: No description found in sticky notes.

--- Workflow: 1090_Manual_Code_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1091_Noop_Trello_Import_Triggered.json ---
Name: Get Product Feedback
Description: No description found in sticky notes.

--- Workflow: 1092_Datetime_Schedule_Sync_Scheduled.json ---
Name: Two Way Sync Pipedrive and MySQL
Description: No description found in sticky notes.

--- Workflow: 1093_Manual_Ftp_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1094_Manual_Salesforce_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1095_Manual_Teams_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1096_Manual_Linkedin_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1097_Manual_Noop_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1098_Manual_Import_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1099_Error_Gmail_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1100_Manual_Taiga_Create_Triggered.json ---
Name: Create, update, and get an issue on Taiga
Description: No description found in sticky notes.

--- Workflow: 1101_Openweathermap_Twilio_Automate_Scheduled.json ---
Name: Creating your first workflow
Description: No description found in sticky notes.

--- Workflow: 1102_Manual_Openai_Automation_Triggered.json ---
Name: Prepare CSV files with GPT-4
Description: ## This is a helper workflow to create 3 CSV files
### Feel free to adapt as needed
### Some mock data from GPT is pinned for convenience

--- Workflow: 1103_Googletaskstool_Telegram_Automation_Webhook.json ---
Name: agente
Description: # "Appointment Confirmation Assistant"
Description:

Purpose:
This section contains the configuration for the Appointment Confirmation Assistant, an agent specialized in confirming scheduled appointments with patients.

Instructions for Use:

It is triggered automatically every weekday (Monday to Friday) at 08:00 AM via the Daily Trigger (Gatilho di√°rio).

The agent retrieves all appointments scheduled for the next day using MCP Google Calendar.

It extracts each patient's phone number from the event description field.

A confirmation message is sent to each patient using the relembraAGENDAMENTO tool, asking for confirmation or rescheduling.

Important: This agent does not handle responses from patients; another agent or workflow is responsible for follow-ups.

Make sure event descriptions in Google Calendar are correctly filled to avoid errors.



--- Workflow: 1104_Stickynote_Create_Triggered.json ---
Name: üí•üõ†Ô∏èBuild a Web Search Chatbot with GPT-4o and MCP Brave Search
Description: ## 1Ô∏è‚É£ MCP Get Brave Tools

--- Workflow: 1105_Manual_Stickynote_Automation_Webhook.json ---
Name: Text to Speech (OpenAI)
Description: ## Workflow Trigger
You can replace this manual trigger with another trigger type as required by your use case.

--- Workflow: 1106_GoogleSheets_Cron_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1107_HTTP_GitHub_Automation_Webhook.json ---
Name: Dashboard
Description: No description found in sticky notes.

--- Workflow: 1108_Postgres_Googlecloudnaturallanguage_Automation_Scheduled.json ---
Name: ETL pipeline
Description: No description found in sticky notes.

--- Workflow: 1109_Code_Schedule_Automation_Scheduled.json ---
Name: YouTube to Airtable Anonym
Description: ## üìù Description

Automatically turn YouTube videos into clear, structured content ideas stored in Airtable. This workflow pulls new video links from Airtable, extracts transcripts using a RapidAPI service, summarizes them with your favourite LLM, and logs the main idea and key takeaways‚Äîkeeping your content pipeline fresh with minimal effort.

--- Workflow: 1110_HTTP_Mqtt_Monitor_Webhook.json ---
Name: Remote IOT Sensor monitoring via MQTT and InfluxDB
Description: MQTT trigger subscribed to a topic called wokwi-weather via a Mosquitto MQTT broker. The trigger receives the temperature and humidity payloads from a DHT22 sensor connected to a remote ESP32 microcontroller 

--- Workflow: 1111_HTTP_Schedule_Automation_Webhook.json ---
Name: Automating Betting Data Retrieval with TheOddsAPI and Airtable
Description: The following triggers start the workflow at the Start of the day and the End of the day. Times can be adjusted to user's preference. 

--- Workflow: 1112_HTTP_Stickynote_Automation_Webhook.json ---
Name: AI Agent with charts capabilities using OpenAI Structured Output
Description: ## Workflow: AI Agent with charts capabilities using OpenAI Structured Output

**Overview**
- This workflow is a experiment to integrate charts into an AI Agent
- The AI Agent has normal AI conversation and can invoke a tool to integrate a graph in the conversation.
- It uses OpenAI Structured Output to generate a chart definition according to Quickchart specifications.


**How it works**
- Activate the workflow
- Start chatting with the AI Agent.
- When the AI Agent detects that the user needs a chat, it calls the tool
- The tool calls the sub-workflow with a query.
- The sub-workflow calls the HTTP Request node (calling OpenAI) to retrieve a chart definition
- In the "set response" node, he chat definition is added at the end of a quickchart.io url - the URL to the chart image. It is sent back to the AI Agent.
- The AI Agent uses this image in its response.
- For example, you can ask the AI Agent to generate a chart about the top 5 movies at the box office


**Notes**
- The full Quickchart.io specifications have not been integrated, thus there are some possible glitches (e.g due to the size of the graph, radar graphs are not displayed properly)
- This could be provided to any automation, not only AI Agents.

--- Workflow: 1113_Telegram_Splitout_Automation_Scheduled.json ---
Name: ü§ñüßë‚Äçüíª AI Agent  for Top n8n Creators Leaderboard Reporting
Description: ## AI Agent for n8n Creator Leaderboard Stats
https://github.com/teds-tech-talks/n8n-community-leaderboard

--- Workflow: 1114_Taiga_Update_Triggered.json ---
Name: Receive updates when an event occurs in Taiga
Description: No description found in sticky notes.

--- Workflow: 1115_Manual_Wekan_Automation_Triggered.json ---
Name: 
Description: No description found in sticky notes.

--- Workflow: 1116_GoogleCalendar_GoogleSheets_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1117_Mattermost_GoogleSheets_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1118_Openweathermap_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1119_Openweathermap_Twilio_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1120_Airtable_Mindee_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1121_Linkedin_Wait_Create_Webhook.json ---
Name: Hacker News to Video Template - AlexK1919
Description: # Choose your data source 
## This can be swapped for any other data source of your choosing.

--- Workflow: 1122_Manual_Rssfeedread_Automation_Triggered.json ---
Name: Read RSS feed from two different sources
Description: No description found in sticky notes.

--- Workflow: 1123_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1124_Create.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1125_Create.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1126_Manual_Clockify_Create_Triggered.json ---
Name: Create a project, tag, and time entry, and update the time entry in Clockify
Description: No description found in sticky notes.

--- Workflow: 1127_Telegram_Wait_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1128_Manual_HTTP_Automation_Webhook.json ---
Name: Extract information from an image of a receipt
Description: No description found in sticky notes.

--- Workflow: 1129_Wufoo_Update_Triggered.json ---
Name: Receive updates when a form is submitted in Wufoo
Description: No description found in sticky notes.

--- Workflow: 1130_Noop_Twilio_Send_Scheduled.json ---
Name: Get the price of BTC in EUR and send an SMS when the price is larger than EUR 9000
Description: No description found in sticky notes.

--- Workflow: 1131_HTTP_Stickynote_Import_Webhook.json ---
Name: get_a_web_page
Description: ## Send URL got Crawl
This can be reused by Ai Agents and any Workspace to crawl a site. All that Workspace has to do is send a request:

```json
 {
    "url": "Some URL to Get"
  }
```

--- Workflow: 1132_Webhook_Extractfromfile_Process_Webhook.json ---
Name: Convert Squarespace Profiles to Shopify Customers in Google Sheets
Description: ## Convert Squarespace profiles
Convert exported profile from Squarespace to compatible Shopify customers data in csv format
Sample Spreadsheet template
https://docs.google.com/spreadsheets/d/1ZUP7RySMCjQUBAvlZhSE1rOul1FMVHvTSF0QexuV7mQ
- Squarespace profiles
- Shopify customers

--- Workflow: 1133_Googlesheetstool_Automation_Triggered.json ---
Name: Customer and Sales Support
Description: No description found in sticky notes.

--- Workflow: 1134_Googledocs_Code_Create_Webhook.json ---
Name: Generate Exam Questions
Description: # STEP 1

## Create Qdrant Collection
Change:
- QDRANTURL
- COLLECTION

--- Workflow: 1135_Wait_Code_Create_Webhook.json ---
Name: Create Threads on Bluesky
Description: ## Bluesky Authentication
Set your Bluesky social link and also your App Password.

--- Workflow: 1136_Manual_HubSpot_Automation_Triggered.json ---
Name: 6
Description: No description found in sticky notes.

--- Workflow: 1137_Mattermost_Cron_Automate_Scheduled.json ---
Name: Coffee Bot (Mattermost)
Description: No description found in sticky notes.

--- Workflow: 1138_Airtable_Vonage_Automation_Scheduled.json ---
Name: Daily Language Learning
Description: No description found in sticky notes.

--- Workflow: 1139_Manual_Medium_Automation_Triggered.json ---
Name: Publish post to a publication
Description: No description found in sticky notes.

--- Workflow: 1140_Functionitem_Raindrop_Automation_Scheduled.json ---
Name: YouTube to Raindrop
Description: No description found in sticky notes.

--- Workflow: 1141_Stickynote_GoogleDrive_Automate_Triggered.json ---
Name: RAG Workflow For Company Documents stored in Google Drive
Description: ## Chat with company documents

--- Workflow: 1142_Gmailtool_Stickynote_Automation_Triggered.json ---
Name: DeepSeek v3.1
Description: ## Smart Content Automation Workflow
Automatically reacts to Notion updates, uses AI to process data, and triggers actions like sending emails or publishing blog posts.
**Openrouter** : [API](https://openrouter.ai/settings/keys)

--- Workflow: 1143_Splitout_Filter_Automation_Webhook.json ---
Name: Read sitemap and filter URLs
Description: **Set your sitemap.xml
url here.**

--- Workflow: 1144_Postgres_Code_Automation_Triggered.json ---
Name: SHEETS RAG
Description: Place this in a separate workflow named:
### query_executer

--- Workflow: 1145_Wait_Splitout_Automation_Webhook.json ---
Name: Google Site Index - sitemap.xml example
Description: ## Collect list of URLs

This part extracts all pages from all sitemaps and sorts by the last modified date `lastmod` (from newest to oldest)

--- Workflow: 1146_Splitout_Code_Automation_Webhook.json ---
Name: LinkedIn Leads Scraping & Enrichment (Main)
Description: ## Extract Linkedin Username 


--- Workflow: 1147_Splitout_GitHub_Automation_Webhook.json ---
Name: Restore your credentials from GitHub
Description: ## Restore from GitHub 
This workflow will restore all instance credentials from GitHub backups.


### Setup
Open `Globals` node and update the values below üëá

- **repo.owner:** your Github username
- **repo.name:** the name of your repository
- **repo.path:** the folder to use within the repository.


If your username was `john-doe` and your repository was called `n8n-backups` and you wanted the credentials to go into a `credentials` folder you would set:

- repo.owner - john-doe
- repo.name - n8n-backups
- repo.path - credentials/


--- Workflow: 1148_Woocommerce_Slack_Create_Triggered.json ---
Name: New WooCommerce product to Slack
Description: No description found in sticky notes.

--- Workflow: 1149_GitHub_Manual_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1150_Noop_Executecommand_Automation_Scheduled.json ---
Name: Execute a command that gives the hard disk memory used on the host machine
Description: No description found in sticky notes.

--- Workflow: 1151_Woocommerce_Slack_Create_Triggered.json ---
Name: New WooCommerce order to Slack
Description: No description found in sticky notes.

--- Workflow: 1152_HTTP_Stickynote_Automation_Webhook.json ---
Name: OpenAI ImageGen1 Template
Description: ### üñºÔ∏è Edit Images with the **OpenAI ImageGen v1** API

1. **Verify Your Organization**  
   Log in to the OpenAI Platform and confirm your org is verified:  
   [OpenAI Settings ‚Üí Organization](https://platform.openai.com/settings/organization/general)

2. **Add Your API Key**  
   In the n8n credentials, paste a valid **OpenAI secret key** into the `API_KEY` field.

3. **Run ‚ÄúOpen Chat‚Äù**  
   Trigger the **`Open Chat`** node, supply your **text prompt** and **source image**, then execute.

4. **Preview & Automate**  
   The new image appears in the **`Convert to File`** node. From here you can:  
   - Send it by email  
   - Push to S3, Supabase, or any storage  
   - Post straight to Slack, Discord, etc.

> *Tip ‚Äî chain additional n8n nodes to watermark, resize, or schedule social-media posts automatically.*


--- Workflow: 1153_GoogleSheets_Orbit_Automation.json ---
Name: Moving metrics from Google Sheets to Orbit
Description: No description found in sticky notes.

--- Workflow: 1154_Manual_Automizy_Create_Triggered.json ---
Name: Create a new list, add a new contact to the list, update the contact, and get all contacts in the list
Description: No description found in sticky notes.

--- Workflow: 1155_Woocommerce_Slack_Create_Triggered.json ---
Name: New WooCommerce refund to Slack
Description: No description found in sticky notes.

--- Workflow: 1156_Openweathermap_Cron_Update_Scheduled.json ---
Name: Send daily weather updates via a push notification using the Pushcut node
Description: No description found in sticky notes.

--- Workflow: 1157_Functionitem_Executecommand_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1158_Manual_Matrix_Create_Triggered.json ---
Name: Create a room, invite members from a different room, and send a message in the room we created
Description: No description found in sticky notes.

--- Workflow: 1159_Manual_Zoom_Automation_Triggered.json ---
Name: Creating a meeting with the Zoom node
Description: No description found in sticky notes.

--- Workflow: 1160_Mautic_Woocommerce_Create_Triggered.json ---
Name: New WooCommerce Customer to Mautic
Description: No description found in sticky notes.

--- Workflow: 1161_Code_Slack_Send_Webhook.json ---
Name: Receive_and_analyze_emails_with_rules_in_Sublime_Security
Description: ![imap](https://i.imgur.com/lVqCPYb.png)
# Workflow Overview
Leverage n8n's IMAP node to `seamlessly ingest emails as .eml attachments`, streamlining your security protocols and response strategies. 

This setup is crucial for organizations utilizing platforms like Outlook, which offers a specialized security feature that designates specific inboxes for phishing attempts. 

When a phishing email is flagged through Outlook's interface, the system is designed to convert it into an .eml file and direct it to a dedicated phishing inbox. This process not only centralizes your phishing threat management but also ensures that each potential threat is queued for immediate and thorough analysis. 

By integrating with n8n, you can automate the capture of these emails, transforming user-reported incidents into actionable data without manual intervention, enhancing your cybersecurity response and preserving your workflow's integrity.

## Ingest emails as attachments as .eml file. 
Set your phishing email inbox here via your imap credentials. You can also replace this with any other node that retrieves emails as .eml attachments. 

--- Workflow: 1162_Manual_Circleci_Import_Triggered.json ---
Name: Get a pipeline in CircleCI
Description: No description found in sticky notes.

--- Workflow: 1163_Openweathermap_Cron_Update_Scheduled.json ---
Name: Send daily weather updates to a phone number using the Vonage node
Description: No description found in sticky notes.

--- Workflow: 1164_Stopanderror_Code_Automation_Triggered.json ---
Name: Slack Webhook - Verify Signature
Description: ## Slack Webhook - Verify Signature 
When receiving a message from a Slack Webhook, it is much more secure to verify that the message comes from Slack and not from bots or unknown services.

This small template is designed to validate the received signature (See [this URL](https://api.slack.com/authentication/verifying-requests-from-slack)).

### Colors
- **Blue** areas are **areas to edit**
- **Yellow** areas are **explanations**

--- Workflow: 1165_Twitter_Telegram_Create_Triggered.json ---
Name: New WooCommerce Product to Twitter and Telegram
Description: No description found in sticky notes.

--- Workflow: 1166_Manual_Messagebird_Send_Triggered.json ---
Name: Sending an SMS with MessageBird
Description: No description found in sticky notes.

--- Workflow: 1167_Mattermost_GoogleSheets_Create_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1168_Mautic_Slack_Send_Triggered.json ---
Name: Check for valid Mautic contact email
Description: No description found in sticky notes.

--- Workflow: 1169_Splitout_Code_Import_Webhook.json ---
Name: Workflow Importer
Description: ## Setup instances
Each instnce requires a name, apiKey and baseURL

--- Workflow: 1170_Manual_Jira_Create_Triggered.json ---
Name: Create a new issue in Jira
Description: No description found in sticky notes.

--- Workflow: 1171_HTTP_Cron_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1172_Slack_HubSpot_Send_Triggered.json ---
Name: Check for valid Hubspot contact email
Description: No description found in sticky notes.

--- Workflow: 1173_Manual_Openweathermap_Import_Triggered.json ---
Name: Get the current weather data for a city
Description: No description found in sticky notes.

--- Workflow: 1174_Manual_Readbinaryfile_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1175_Manual_Trello_Create_Triggered.json ---
Name: Create a new card in Trello
Description: No description found in sticky notes.

--- Workflow: 1176_Rssfeedread_Slack_Automation_Scheduled.json ---
Name: Post RSS feed items from yesterday to Slack
Description: No description found in sticky notes.

--- Workflow: 1177_Openai_GoogleSheets_Create_Triggered.json ---
Name: Qualify new leads in Google Sheets via OpenAI's GPT-4
Description: ### 1. Create a Google Sheet document
* This template uses Google Sheet document connected to Google Forms, but a standalone Sheet document will work too
* Adapt initial trigger to your needs: check for new entries periodically or add a manual trigger

[Link to the Google Sheet template](https://docs.google.com/spreadsheets/d/1jk8ZbfOMObvHGGImc0sBJTZB_hracO4jRqfbryMgzEs)

--- Workflow: 1178_Code_HTTP_Automation_Webhook.json ---
Name: Publish Videos & Images - Blotato
Description: # Publish to Social Media

--- Workflow: 1179_Error_Mailgun_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1180_Rssfeedread_Htmlextract_Create_Scheduled.json ---
Name: Get only new RSS with Photo
Description: No description found in sticky notes.

--- Workflow: 1181_Manual_Spotify_Automation_Triggered.json ---
Name: Sample Spotify
Description: No description found in sticky notes.

--- Workflow: 1182_Telegram_Webhook_Automation_Webhook.json ---
Name: ü§ñ Telegram Messaging Agent for Text/Audio/Images
Description: # Receive Telegram Message with Webhook

--- Workflow: 1183_Manual_Stickynote_Automation_Webhook.json ---
Name: Enhance Chat Responses with Real-Time Search Data via Bright Data & Gemini AI
Description: ## Bright Data Search Engines

--- Workflow: 1184_Debughelper_HTTP_Create_Webhook.json ---
Name: Build your first AI MCP Server
Description: ## Activate the workflow to make the MCP Trigger work
In order to make the MCP server available, you need to activate the workflow.

Then copy the Production URL of the MCP Trigger and paste it in the corresponding MCP Client tool.

--- Workflow: 1185_Telegram_Wait_Automate_Webhook.json ---
Name: ü§ñ AI Powered RAG Chatbot for Your Docs + Google Drive + Gemini + Qdrant
Description: ## Prepare Qdrant Vector Store

--- Workflow: 1186_Rssfeedread_Telegram_Create_Triggered.json ---
Name: Crypto News & Sentiment
Description: ## Send Telegram Response

Sends the final AI-generated summary to the user.
‚ö†Ô∏è Replace chatId with a dynamic value like << Telegram ID here >> to ensure it sends to the right user.

--- Workflow: 1187_HTTP_Dropbox_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1188_GoogleSheets_Emailreadimap_Create.json ---
Name: Extract expenses from emails and add to Google Sheet
Description: No description found in sticky notes.

--- Workflow: 1189_Manual_Rocketchat_Send_Triggered.json ---
Name: Post a message to a channel in RocketChat
Description: No description found in sticky notes.

--- Workflow: 1190_Executecommand_Readbinaryfile_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1191_Slack_Typeform_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1192_HTTP_Timescaledb_Automation_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1193_Manual_Intercom_Create_Triggered.json ---
Name: Create a new user in Intercom
Description: No description found in sticky notes.

--- Workflow: 1194_Slack_Emailreadimap_Create.json ---
Name: New invoice email notification
Description: No description found in sticky notes.

--- Workflow: 1195_Openweathermap_Pushover_Update_Scheduled.json ---
Name: Send daily weather updates via a push notification
Description: No description found in sticky notes.

--- Workflow: 1196_Manual_Securityscorecard_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1197_Manual_Reddit_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1198_Twilio_Pushcut_Send_Triggered.json ---
Name: Send an SMS to a number whenever you go out
Description: No description found in sticky notes.

--- Workflow: 1199_Manual_Sms77_Send_Triggered.json ---
Name: Sending an SMS using sms77
Description: No description found in sticky notes.

--- Workflow: 1200_Manual_Googletranslate_Automation_Triggered.json ---
Name: Translate text from English to German
Description: No description found in sticky notes.

--- Workflow: 1201_Manual_Discourse_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1202_Getresponse_Airtable_Import_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1203_Manual_Stackby_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1204_Manual_Peekalink_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1205_Manual_Tapfiliate_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1206_Manual_Strava_Create_Triggered.json ---
Name: Create, update, and get activity in Strava
Description: No description found in sticky notes.

--- Workflow: 1207_Typeform_Demio_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1208_Quickbooks_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1209_Raindrop_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1210_Manual_Affinity_Create_Triggered.json ---
Name: Create an organization in Affinity
Description: No description found in sticky notes.

--- Workflow: 1211_Twitter_Strava_Create_Triggered.json ---
Name: Receive updates when a new activity gets created and tweet about it
Description: No description found in sticky notes.

--- Workflow: 1212_Twitter_Slack_Automation_Scheduled.json ---
Name: Scrape Twitter for mentions of company
Description: No description found in sticky notes.

--- Workflow: 1213_Gotowebinar_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1214_Emelia_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1215_Mattermost_Typeform_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1216_Manual_Schedule_Automate_Scheduled.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1217_Posthog_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1218_Manual_Mailerlite_Create_Triggered.json ---
Name: Create, update and get a subscriber using the MailerLite node
Description: No description found in sticky notes.

--- Workflow: 1219_Manual_Agilecrm_Create_Triggered.json ---
Name: Create a new contact in Agile CRM
Description: No description found in sticky notes.

--- Workflow: 1220_Airtable_Lemlist_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1221_Mattermost_Lemlist_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1222_Openweathermap_Webhook_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1223_Asana_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1224_Apitemplateio_Typeform_Automation_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1225_Manual_Asana_Create_Triggered.json ---
Name: Create a new task in Asana
Description: No description found in sticky notes.

--- Workflow: 1226_HTTP_Kafka_Update_Webhook.json ---
Name: Send updates about the position of the ISS every minute to a topic in Kafka
Description: No description found in sticky notes.

--- Workflow: 1227_Autopilot_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1228_Autopilot_Airtable_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1229_Wise_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1230_Wise_Airtable_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1231_Manual_Splitinbatches_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1232_Manual_Splitinbatches_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1233_HTTP_Deepl_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1234_Manual_Microsoftsql_Automation_Triggered.json ---
Name: Execute an SQL query in Microsoft SQL
Description: No description found in sticky notes.

--- Workflow: 1235_Manual_HTTP_Automation_Webhook.json ---
Name: Google Trend Data Extract, Summarization with Bright Data & Google Gemini
Description: ## Note

This workflow deals with the structured data extraction by utilizing Bright Data Web Unlocker Product.

The Basic LLM Chain, Information Extraction, Summarization Chain are being used to demonstrate the usage of the N8N AI capabilities.

**Please make sure to set the web URL of your interest within the "Set URL and Bright Data Zone" node and update the Webhook Notification URL**

--- Workflow: 1236_Matrix_Cron_Automate_Scheduled.json ---
Name: Coffee Bot (Matrix)
Description: No description found in sticky notes.

--- Workflow: 1237_Error_Telegram_Automation_Webhook.json ---
Name: google drive to instagram, tiktok and youtube
Description: ## Description
This automation allows you to upload a video to a configured Google Drive folder, and it will automatically create descriptions and upload it to Instagram and TikTok.

## How to Use
1. Generate an API token at upload-post.com and add to Upload to Tiktok and Upload to Instagram nodes
2. Configure your Google Drive folder
3. Customize the OpenAI prompt for your specific use case
4. Optional: Configure Telegram for error notifications

## Requirements
- upload-post.com account
- Google Drive account
- OpenAI API key


--- Workflow: 1238_Manual_Code_Automation_Webhook.json ---
Name: 3D Figurine Orthographic Views with Midjourney and GPT-4o-Image API
Description: No description found in sticky notes.

--- Workflow: 1239_Googlecontacts_Schedule_Send_Scheduled.json ---
Name: Send Daily Birthday Reminders from Google Contacts to Slack
Description: Send Daily Birthday Reminders from Google Contacts to Slack

--- Workflow: 1240_Markdown_Stickynote_Send.json ---
Name: Very simple Human in the loop system email with AI e IMAP
Description: Chain that summarizes the received email

--- Workflow: 1241_Manual_HTTP_Process_Webhook.json ---
Name: Convert YouTube Videos into SEO Blog Posts
Description: ## Set Variables
Set your variables here, such as:
- YouTube Video URL: The YouTube video you want to convert into a SEO Blog Post
- Recipient Email Address: This is the email we send all generated content to at the end of the workflow.


--- Workflow: 1242_Discordtool_Stickynote_Automation_Triggered.json ---
Name: Discord Agent
Description: ## Discord Management Tools

--- Workflow: 1243_Splitout_Limit_Automation_Webhook.json ---
Name: Agent Milvus tool
Description: ## Scrape latest Paul Graham essays

--- Workflow: 1244_Telegram_GoogleSheets_Automate_Triggered.json ---
Name: Telegram ChatBot with multiple sessions
Description: # Telegram ChatBot with multiple sessions

This workflow creates an **AI-powered Telegram chatbot** with **session management**, allowing users to:  
- **Start new conversations** (`/new`).  
- **Check current sessions** (`/current`).  
- **Resume past sessions** (`/resume`).  
- **Get summaries** (`/summary`).  
- **Ask questions** (`/question`). 

- Clone [this sheet](https://docs.google.com/spreadsheets/d/1MCJLAqKP0Y7Qr68ZYoSSBeEVyKI1QgAAZnlEiyqkzXo/edit?usp=sharing)

--- Workflow: 1245_Postgres_Extractfromfile_Automation_Triggered.json ---
Name: Translate questions about e-mails into SQL queries and run them
Description: ## This can run manually
This section:
* loads a list of all tables from the database
* extracts the database schema for each table and adds the table name
* converts the schema into a binary JSON format
* saves the schema  file locally

--- Workflow: 1246_Extractfromfile_HTTP_Automation_Webhook.json ---
Name: N/A
Description: ### Replace Storage name, database ID and credentials.

--- Workflow: 1247_Googlecalendartool_Stickynote_Automation_Triggered.json ---
Name: AI Agent : Google calendar assistant using OpenAI
Description: ## Chat trigger - When a message is received

This node is the **entry point of the workflow**. 
It triggers the workflow whenever a message is sent to the **chat interface**.

Options with n8n:
- **Embed the chat interface** anywhere you want.
- Use a **webhook node** instead of this node to connect with interfaces like **[Streamlit](https://docs.streamlit.io/develop/tutorials/llms/build-conversational-apps)** or **[OpenWebUI](https://docs.openwebui.com/)**.
- Use nodes for communication platforms (**Slack**, **Teams**, **Discord**, etc.) if you know how to configure them.


--- Workflow: 1248_Gmailtool_Splitout_Automation_Webhook.json ---
Name: N/A
Description: ### Replace API key for Fireflies


--- Workflow: 1249_Postgres_Webhook_Automation_Webhook.json ---
Name: N/A
Description: ### ... or watch set up video [10 min]
[![Youtube Thumbnail](https://res.cloudinary.com/de9jgixzm/image/upload/v1739773273/Youtube%20Thumbs/Realtim%20AI%20Agent.png)](https://www.youtube.com/watch?v=rtaX6BMiTeo)


--- Workflow: 1250_Automation.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1251_Postgrestool_Stickynote_Automation_Triggered.json ---
Name: N/A
Description: **Replace password and username for Supabase**

--- Workflow: 1252_Webhook_Respondtowebhook_Automation_Webhook.json ---
Name: AI Agent to chat with you Search Console Data, using OpenAI and Postgres
Description: ## Webhook - ChatInput

This webhook serves as the endpoint for receiving `ChatInput` data. Ensure that you include:
- `chatInput` ‚Äì the content you wish to send (üòâ)
- `sessionId` ‚Äì a unique identifier for the session

If you're using an interface such as **Open WebUI**, the `sessionId` will be generated automatically.

--- Workflow: 1253_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ### The conversation history(last 20 messages) is stored in a buffer memory

--- Workflow: 1254_Extractfromfile_Form_Automate_Triggered.json ---
Name: HR-focused automation pipeline with AI
Description: ## HR Expert 
This workflow automates the process of handling job applications by extracting relevant information from submitted CVs, analyzing the candidate's qualifications against a predefined profile, and storing the results in a Google Sheet

--- Workflow: 1255_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: Stock Q&A Workflow
Description: ## Step 2: Setup the Q&A 
### The incoming message from the webhook is queried from the Supabase Vector Store. The response is provided in the response webhook. 

--- Workflow: 1256_Openai_Form_Automation_Triggered.json ---
Name: N/A
Description: ## Send customer feedback to OpenAI for sentiment analysis

--- Workflow: 1257_Code_Webhook_Automation_Webhook.json ---
Name: N/A
Description: ### 1. Get Table Schema
[Learn more about the Airtable node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable/)

For this operation, we'll use the handy Airtable node. I recommend getting familiar with this node for all your Airtable needs!


--- Workflow: 1258_Splitout_Code_Automation_Webhook.json ---
Name: N/A
Description: ### 1. Get Table Schema
[Learn more about the HTTP node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

For this operation, we'll have to use the Baserow API rather than the built-in node. However, this way does allow for more flexibility with query parameters.


--- Workflow: 1259_Code_Strava_Automation_Triggered.json ---
Name: N/A
Description: ### Customer Experience Agent (AI)
The AI Triathlon Coach is an intelligent, data-driven virtual assistant designed to help triathletes optimize their training and performance across swimming, cycling, and running. Using advanced algorithms, it analyzes activity data from platforms like Strava and provides actionable insights tailored to the athlete‚Äôs goals, experience level, and specific disciplines.
This is connected to Gemini 2.0 Flash



--- Workflow: 1260_Splitout_Manual_Automation_Webhook.json ---
Name: N/A
Description: ## Start here: Step-by Step Youtube Tutorial :star:

[![AI Powered Web Scraping : the EASY way with n8n and Jina.ai (no-code!)](https://img.youtube.com/vi/f3AJYXHirr8/sddefault.jpg)](https://youtu.be/f3AJYXHirr8)

[Google Sheet Example](https://docs.google.com/spreadsheets/d/1VDbfi2PpeheD2ZlO6feX3RdMeSsm0XukQlNVW8uVcuo/edit?usp=sharing)




--- Workflow: 1261_Airtabletool_Stickynote_Automation_Triggered.json ---
Name: AI Social Media Caption Creator
Description: # Welcome to my AI Social Media Caption Creator Workflow!

This workflow automatically creates a social media post caption in an editorial plan in Airtable. It also uses background information on the target group, tonality, etc. stored in Airtable.

## This workflow has the following sequence:

1. Airtable trigger (scan for new records every minute)
2. Wait 1 Minute so the Airtable record creator has time to write the Briefing field
3. retrieval of Airtable record data
4. AI Agent to write a caption for a social media post. The agent is instructed to use background information stored in Airtable (such as target group, tonality, etc.) to create the post.
5. Format the output and assign it to the correct field in Airtable.
6. Post the caption into Airtable record.

## The following accesses are required for the workflow:
- Airtable Database: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/airtable)
- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)

### Example of an editorial plan in Airtable: https://airtable.com/appIXeIkDPjQefHXN/shrwcY45g48RpcvvC
For this workflow you need the Airtable fields "created_at", "Briefing" and "SoMe_Text_AI"

You can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz

--- Workflow: 1262_Limit_Webhook_Automation_Webhook.json ---
Name: AI Voice Chat using Webhook, Memory Manager, OpenAI, Google Gemini & ElevenLabs
Description: ## Get Context

--- Workflow: 1263_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: Voice RAG Chatbot with ElevenLabs and OpenAI
Description: # STEP 4

## RAG System

Click on "test workflow" on n8n and "Test AI agent" on ElevenLabs. If everything is configured correctly, when you ask a question to the agent, the webhook on n8n is activated with the "question" field in the body filled with the question asked to the voice agent.

The AI ‚Äã‚ÄãAgent will extract the information from the vector database, send it to the model to create the response which will be sent via the response webhook to ElevenLabs which will transform it into voice

--- Workflow: 1264_Code_HTTP_Automation_Webhook.json ---
Name: Complete Youtube
Description: Main Workflow

--- Workflow: 1265_Automation_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1266_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: InstaTest
Description: ## Easy Instagram(via ManyChat) bot
---
### Description:
This template is a main part of Entire solution. It's getting new message from Instagram via ManyChat(Extra No-Code tool for getting and sending message in Instagram). Generating message using ChatGPT and send back to ManyChat that sends it to Instagrtam.

### Logic:
1. Getting message from Instagram(from ManyChat)
2. Set you system prompt for AI
3. Create simple answer for message in AI block
4. Send answer to Instagram(to ManyChat)

---
*Helpful links:*
- [Guide in Notion how to create full bot](https://shadowed-pound-d6e.notion.site/Instagram-GPT-light-version-Manychat-X-N8N-176293bddff880899a9ac255585d29f7?pvs=4)
- [ManyChat](https://manychat.partnerlinks.io/vm4wkw8j81tc)

--- Workflow: 1267_HTTP_Markdown_Automation_Webhook.json ---
Name: Agent with custom HTTP Request
Description: ### Convert the query string into JSON, apply the limit for a page length

--- Workflow: 1268_Stickynote_Hackernews_Automate_Triggered.json ---
Name: N/A
Description: ### Replace me
with any other service, e.g. fetching your own data

--- Workflow: 1269_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: ### The conversation history(last 20 messages) is stored in a buffer memory

--- Workflow: 1270_Schedule_Manual_Automation_Scheduled.json ---
Name: N/A
Description: ## Read Me

This workflow allows you to do account research with the web using AI.

The advanced AI module has 2 capabilities: 
- Research Google using SerpAPI
- Visit and get website content using a sub-workflow


From an unstructured input like a domain or a company name. 

It will return the following properties: 
- domain
- company Linkedin Url
- cheapest plan
- has free trial
- has entreprise plan
- has API
- market (B2B or B2C)


The strength of n8n here is that you can adapt this workflow to research whatever information you need.

You just have to precise it in the prompt and to precise the output format in the "Strutured Output Parser" module.

[Click here to find more detailed instructions with video guide.](https://lempire.notion.site/AI-Web-research-with-n8n-a25aae3258d0423481a08bd102f16906)


--- Workflow: 1271_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1272_Datetime_Webhook_Create_Webhook.json ---
Name: AI-Generated Summary Block for WordPress Posts - with OpenAI, WordPress, Google Sheets & Slack
Description: ## Trigger - Two Options
To use this workflow, you have two trigger options.

The default trigger is **"When clicking 'Test workflow'"**, allowing you to manually test the scenario.

If you want to use this workflow in production, you can choose one of the following triggers. You'll need to **select the one you prefer and enable it**.:

### Schedule Trigger 
This trigger checks at regular intervals (e.g., every 5 minutes) if a new post has been published on your WordPress blog and triggers the workflow accordingly. 

‚úÖ **Easy to set up** 
‚úÖ **Automates AI summaries without manual intervention** 

‚ö†Ô∏è If you run the workflow manually once, the AI-generated summaries will be added to Google Sheets and processed in later steps to prevent duplication. 

üí° **Recommended follow-up nodes:** If you choose this trigger, the following nodes are suggested in the template: 
- **`Date & Time - Subtract`**: Subtracts the scheduled interval from the current execution timestamp. For example, if the workflow runs every 5 minutes, it subtracts 5 minutes from the execution time. 
- **`WordPress - Get Posts`**: Uses the output of the `Date & Time - Subtract` node as a filter to retrieve only posts published after the last execution. 

### Webhook Trigger 
If you're familiar with webhooks, you can set up a webhook that triggers when a new post is published. 

‚úÖ **Faster than scheduled triggers** 
‚úÖ **More event-driven** 

You can implement this using either: 
- A **Webhook plugin** on WordPress (not recommended due to plugin dependency). 
- A **PHP function** that triggers the webhook with authentication for security. 

‚ö†Ô∏è **Be cautious** with how the webhook is triggered‚Äîyou may not want it to fire on every post edit. 

üí° **Recommended follow-up nodes for this option:** 
- **`Set Fields - From Webhook Input`**: Configures the fields based on the data sent to the webhook. 
- **`WordPress - Get Post`**: Retrieves the post using the `post_id` received from the webhook, ensuring higher accuracy than the schedule trigger approach. 


--- Workflow: 1273_Datetime_Webhook_Create_Webhook.json ---
Name: AI-Generated Summary Block for WordPress Posts - with OpenAI, WordPress, Google Sheets & Slack
Description: ## Trigger - Two Options
To use this workflow, you have two trigger options.

The default trigger is **"When clicking 'Test workflow'"**, allowing you to manually test the scenario.

If you want to use this workflow in production, you can choose one of the following triggers. You'll need to **select the one you prefer and enable it**.:

### Schedule Trigger  
This trigger checks at regular intervals (e.g., every 5 minutes) if a new post has been published on your WordPress blog and triggers the workflow accordingly.  

‚úÖ **Easy to set up**  
‚úÖ **Automates AI summaries without manual intervention**  

‚ö†Ô∏è If you run the workflow manually once, the AI-generated summaries will be added to Google Sheets and processed in later steps to prevent duplication.  

üí° **Recommended follow-up nodes:** If you choose this trigger, the following nodes are suggested in the template:  
- **`Date & Time - Subtract`**: Subtracts the scheduled interval from the current execution timestamp. For example, if the workflow runs every 5 minutes, it subtracts 5 minutes from the execution time.  
- **`WordPress - Get Posts`**: Uses the output of the  `Date & Time - Subtract` node as a filter to retrieve only posts published after the last execution.  

### Webhook Trigger  
If you're familiar with webhooks, you can set up a webhook that triggers when a new post is published.  

‚úÖ **Faster than scheduled triggers**  
‚úÖ **More event-driven**  

You can implement this using either:  
- A **Webhook plugin** on WordPress (not recommended due to plugin dependency).  
- A **PHP function** that triggers the webhook with authentication for security.  

‚ö†Ô∏è **Be cautious** with how the webhook is triggered‚Äîyou may not want it to fire on every post edit.  

üí° **Recommended follow-up nodes for this option:**  
- **`Set Fields - From Webhook Input`**: Configures the fields based on the data sent to the webhook.  
- **`WordPress - Get Post`**: Retrieves the post using the `post_id` received from the webhook, ensuring higher accuracy than the schedule trigger approach.  


--- Workflow: 1274_Webhook_Code_Automate_Webhook.json ---
Name: N/A
Description: ### Get Apprropraite Data
These Nodes are to extract only the Required Data from the Webhook Node

--- Workflow: 1275_Schedule_Telegram_Automation_Scheduled.json ---
Name: N/A
Description: # Template for Kids' Story in Arabic

The n8n template for creating kids' stories in Arabic provides a versatile platform for storytellers to captivate young audiences with educational and interactive tales. Along with its core functionalities, this template allows for customization to suit various use cases and can be set up effortlessly.

Check this example: [https://t.me/st0ries95](https://t.me/st0ries95)


## Node Functionalities


## Automated Storytelling Process


## Use Cases
1. **Educational Platforms**:
 Educational platforms can automate the creation and distribution of educational stories in Arabic for children using this template. By incorporating visual and auditory elements into the storytelling process, educational platforms can enhance learning experiences and engage young learners effectively.

2. **Children's Libraries**:
 Children's libraries can utilize this template to curate and share a diverse collection of Arabic stories with young readers. The automated generation of visual content and audio files enhances the storytelling experience, encouraging children to immerse themselves in new worlds and characters through captivating narratives.

3. **Language Learning Apps**:
 Language learning apps focused on Arabic can integrate this template to offer culturally rich storytelling experiences for children learning the language. By translating stories into Arabic and supplementing them with visual and auditory components, these apps can facilitate language acquisition in an enjoyable and interactive manner.

## Configuration Guide for Nodes

### OpenAI Chat Model Nodes:
- **Credentials**: Provide the necessary API credentials for the OpenAI GPT-4 Turbo model.
- **Options**: Configure any specific options required for the chat model.

### Create a Prompt for DALL-E Node:
- **Prompts Customization**: Customize prompts to generate relevant visual content for the stories.
- **Summarization Method and Prompts**: Define the summarization method and prompts for generating visual content without text.

### Generate an Image for the Story Node:
- **Resource**: Specify the type of resource (image).
- **Prompt**: Set up the prompt for producing an image without text within the visual content.

### Generate Audio for the Story Node:
- **Resource**: Select the type of resource (audio).
- **Input**: Define the input text for generating audio files.

### Translate the Story to Arabic Node:
- **Chunking Mode**: Choose the chunking mode (advanced).
- **Summarization Method and Prompts**: Set the summarization method and prompts for translating the story into Arabic.

### Send the Story To Channel Node:
- **Chat ID**: Provide the chat ID where the story text will be sent.
- **Text**: Configure the text to be sent to the channel.

By configuring each node as per the guidelines above, users can effectively set up and customize the n8n template for kids' stories in Arabic, tailoring it to specific use cases and delivering a seamless and engaging storytelling experience for young audiences.


--- Workflow: 1276_Schedule_Telegram_Automation_Scheduled.json ---
Name: N/A
Description: ### Setting Up a Workflow for "AI-Powered Children's English Storytelling on Telegram"

In this guide, we will walk you through the process of setting up a workflow to create and share captivating children's stories using the provided configuration. Let's dive into the steps required to bring these imaginative tales to life on your Telegram channel:

#### Steps to Setup the Workflow:
1. **Import the Workflow:**
 - Copy the provided workflow JSON configuration.
 - In your n8n instance, go to Workflows and select "Import from JSON."
 - Paste the configuration and import the workflow.

2. **Configure Node Credentials:**
 - For nodes requiring API credentials (OpenAI and Telegram), create credentials with the appropriate API keys or tokens.

3. **Set Node Parameters:**
 - Modify node parameters as needed, such as chat IDs, prompts, and intervals.
 - Change the chatId in Config node to the ID of the chat you want the story to be posted.

4. **Ensure Data Flow:**
 - Check the connections between nodes to ensure a smooth flow of data and actions.

5. **Execute Once:**
 - Activate the "executeOnce" option in nodes where necessary to trigger actions only once during setup.

6. **Test the Workflow:**
 - Run the workflow to verify that each node functions correctly and data is processed as expected.

7. **Enable Recurring Triggers:**
 - Confirm that the Schedule Trigger node is set to trigger the workflow at the desired interval (every 12 hours).

8. **Initiate Workflow:**
 - Once everything is configured correctly, activate the workflow to start generating and sharing children's stories on Telegram.

By following these steps meticulously, you can seamlessly establish and operate the workflow designed to create captivating children's stories for your audience. Embrace the power of automation to inspire young minds and foster a love for storytelling through engaging narratives shared on Telegram.


--- Workflow: 1277_Emailreadimap_Manual_Send_Webhook.json ---
Name: Email AI Auto-responder. Summerize and send email
Description: # STEP 1

## Create Qdrant Collection
Change:
- QDRANTURL
- COLLECTION

--- Workflow: 1278_Code_Schedule_Monitor_Webhook.json ---
Name: AI-Powered Information Monitoring with OpenAI, Google Sheets, Jina AI and Slack
Description: ## LLM Call 1 - Article Topic Relevance Classification 

This **LLM call** is used to **classify** whether the articles published on the website are **relevant** to the **topics and interests** you want to monitor. 
It analyzes the **title** and the **content snippet** retrieved from the **RSS Read** node. 

In this template, the monitored articles are related to **data and AI.** 
The classification is done into **two categories**, which you should modify in the `Description` field under the **Categories** section of the node:

### Relevant 
`Description`: Articles related to **[The topics you want to monitor]**. 

### Not Relevant 
`Description`: Articles that are not directly related to **[The topics you want to monitor]**.

By default, this template monitors topics related to artificial intelligence (AI), data science, machine learning, algorithms, big data, and innovations in these fields.


--- Workflow: 1279_Googledocs_Manual_Automate_Triggered.json ---
Name: RAG Workflow For Stock Earnings Report Analysis
Description: ## Set up steps
1. Google Cloud Project & Vertex AI API:
	* Create a Google Cloud project.
	* Enable the Vertex AI API for your project.
2. Google AI API key:
	* Obtain a Google AI API key from Google AI Studio.
3. Pinecone account and API key:
	* Create a free account on the Pinecone website.
	* Obtain your API key from your Pinecone dashboard.
	* Create an index named company-earnings in your Pinecone project.
4. Google Drive - download and save financial documents:
	* Go to a company you want to analize and download their quarterly earnings PDFs
	* Save the PDFs in Google Drive
	* Create a Google Sheet that stores a list of file URLs pointing to the PDFs you downloaded and saved to Google Drive
5. Configure credentials in your n8n environment for:
	* Google Sheets OAuth2
	* Google Drive OAuth2
	* Google Docs OAuth2
	* Google Gemini(PaLM) Api (using your Google AI API key)
	* Pinecone API (using your Pinecone API key)
6. Import and configure the workflow:
	* Import this workflow into your n8n instance.
	* Update the List Of Files To Load (Google Sheets) node to point to your Google Sheet.
	* Update the Download File From Google Drive to point to the column where the file URLs are
	* Update the Save Report to Google Docs node to point to your Google Doc where you want the report saved.

--- Workflow: 1280_Linkedin_Telegram_Automation_Scheduled.json ---
Name: Social Media AI Agent - Telegram
Description: Automate the curation and sharing of trending GitHub discussions from Hacker News to Twitter and LinkedIn. This workflow leverages AI to generate engaging posts, streamlining your social media content creation and distribution.



--- Workflow: 1281_Code_Schedule_Monitor_Webhook.json ---
Name: AI-Powered Information Monitoring with OpenAI, Google Sheets, Jina AI and Slack
Description: ## LLM Call 1 - Article Topic Relevance Classification  

This **LLM call** is used to **classify** whether the articles published on the website are **relevant** to the **topics and interests** you want to monitor.  
It analyzes the **title** and the **content snippet** retrieved from the **RSS Read** node.  

In this template, the monitored articles are related to **data and AI.**  
The classification is done into **two categories**, which you should modify in the `Description` field under the **Categories** section of the node:

### Relevant  
`Description`: Articles related to **[The topics you want to monitor]**.  

### Not Relevant  
`Description`: Articles that are not directly related to **[The topics you want to monitor]**.

By default, this template monitors topics related to artificial intelligence (AI), data science, machine learning, algorithms, big data, and innovations in these fields.


--- Workflow: 1282_Wait_Code_Import_Webhook.json ---
Name: AI-Powered Short-Form Video Generator with OpenAI, Flux, Kling, and ElevenLabs and upload to all social networks
Description: ## 2. üñºÔ∏èGenerate images with Flux using [PiAPI](https://piapi.ai/?via=n8n) 
### (total cost: $0.0948 approx. as of 3/9/25)
1. OpenAI is used to generate 5 Flux image prompts based on the 5 captions generated. Edit this node to see/edit the prompt instructions. 
2. Next we use some custom javascript to total up how many tokens were used for each 5 generations so we can track our costs later.
3. Then we generate an image with Flux using the [PiAPI service](https://piapi.ai/?via=n8n), waiting to check for failures and retrying if there are any.

You can change the image model used by editing the Generate Image node API call.
Flux models available (as of 3/9/25):
- Qubico/flux1-dev ($0.015) - Currently set
- Qubico/flux1-schnell ($0.0015)
- Qubico/flux1-advanced ($0.02)

For full list of API settings, see the [Flux API Documentation](https://piapi.ai/docs/flux-api/text-to-image?via=n8n)


--- Workflow: 1283_Splitout_Webhook_Automation_Webhook.json ---
Name: N/A
Description: ## Find WooCommerce User-ID
User-ID is required to query past orders

--- Workflow: 1284_Emailreadimap_Markdown_Send.json ---
Name: AI Email processing autoresponder with approval (Yes/No)
Description: # Main Flow

## Preliminary step:
Create a vector database on Qdrant and tokenize the documents useful for generating a response


## How it works
This workflow is designed to automate the process of handling incoming emails, summarizing their content, generating appropriate responses with RAG, and obtaining approval (YES/NO button) before sending replies.

This workflow is designed to handle general inquiries that come in via corporate email via IMAP and generate responses using RAG. You can quickly integrate Gmail and Outlook via the appropriate trigger nodes

--- Workflow: 1285_Manual_Stickynote_Import_Triggered.json ---
Name: LangChain - Example - Workflow Retriever
Description: ### Q&A on data returned from a workflow

--- Workflow: 1286_Code_Manual_Automation_Triggered.json ---
Name: Podcast Digest
Description: ## Chunk the transcript into several parts, and refine-summarize it 

--- Workflow: 1287_Googledocs_Googledrivetool_Monitor_Triggered.json ---
Name: AI Agent - Cv Resume - Automated Screening , Sorting , Rating and Tracker System
Description: ## 1. Move candidate cv to folder
 

--- Workflow: 1288_Telegram_Wait_Automation_Webhook.json ---
Name: üí•AI Social Video Generator with GPT-4, Kling & Blotato ‚ÄîAuto-Post to Instagram, Facebook,, TikTok, Twitter & Pinterest - vide
Description: # üü´ STEP 1 ‚Äî Create Video Using AI
## This step handles the full video creation pipeline using AI.
### It starts from a Telegram message containing a prompt, 
### refines the prompt with GPT-4 to suit Kling‚Äôs video engine, 
### and generates a cinematic video based entirely on text input.


--- Workflow: 1289_Limit_Webhook_Automation_Webhook.json ---
Name: AI Voice Chat using Webhook, Memory Manager, OpenAI, Google Gemini & ElevenLabs
Description: ## Get Context

--- Workflow: 1290_Automation.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1291_Telegram_Code_Automation_Webhook.json ---
Name: ‚úçÔ∏èüåÑ Your First Wordpress Content Creator - Quick Start
Description: ## Create Blog Post
Refer to this workflow for help getting setup with DeepSeek
https://n8n.io/workflows/2777-deepseek-v3-chat-and-r1-reasoning-quick-start/

--- Workflow: 1292_Code_GitHub_Automate_Webhook.json ---
Name: Code Review workflow
Description: **1-The GitHub Trigger** node initiates the workflow whenever a pull request event occurs on a specified repository. It enables real-time automation based on GitHub activity.


--- Workflow: 1293_Wait_Splitout_Automation_Webhook.json ---
Name: N/A
Description: ## Stage 1 - Research for API Documentation
- Fetch a list of services pending research from Database (Google Sheet)
- Uses a search engine (Google) to find API Documentation for each service
- Uses Webscraper (Apify) to read the contents of search results to filter irrelevant pages
- Stores webpage contents and metadata into Vector Store (Qdrant)

--- Workflow: 1294_Compression_Manual_Automation_Webhook.json ---
Name: SQL agent with memory
Description: ## Run this part only once
This section:
* downloads the example zip file from https://www.sqlitetutorial.net/sqlite-sample-database/
* extracts the archive (it contains only a single file)
* saves the extracted `chinook.db` SQLite database locally

Now you can use chat to "talk" to your data!

--- Workflow: 1295_Stopanderror_Webhook_Automation_Webhook.json ---
Name: Auth0 User Login
Description: ### You can also add   &connection=github to end of authorize URL in order to get user to login via Github, Facebook, etc

--- Workflow: 1296_Datetime_Splitout_Process.json ---
Name: Parse DMARC reports
Description: ## How it works
- monitor postmaster email for DKIM reprots
- unpack report and parse XML
- map and format fields for DB input
	- input into database
	- send notification on DKIM or SPF failure

## Remember to set up
- email input mailbox
- notification channels

--- Workflow: 1297_Splitout_GoogleCalendar_Automation_Webhook.json ---
Name: N/A
Description: ## 4. This Tool Creates Calendar Events
This tool, given event details and a list of attendees, will create a new Google calendar event and add the attendees to it.

--- Workflow: 1298_Trello_Googlecloudnaturallanguage_Create_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1299_Code_Webhook_Automation_Webhook.json ---
Name: N/A
Description: ![h](https://i.postimg.cc/9XLvL5dL/slide-sf-talk.png#full-width)

--- Workflow: 1300_Telegram_Stickynote_Create_Webhook.json ---
Name: Agentic Telegram AI bot with LangChain nodes and new tools
Description: ## Generate an image with Dall-E-3 and send it via Telegram

--- Workflow: 1301_Code_Extractfromfile_Automation_Triggered.json ---
Name: Amazon Ads AI Optimization
Description: ## Change
Choose the "folder" in the filter options to the folder containing your Ad reports


--- Workflow: 1302_Trello_Limit_Automate_Scheduled.json ---
Name: N/A
Description: ## RSS sources 
Here you can add up to nine sources of RSS. To do so, modify the merge node for the number of RSS feeds you want, duplicate the RSS node and wire it to the trigger and the merge node


--- Workflow: 1303_Manual_Stickynote_Create_Triggered.json ---
Name: Build an OpenAI Assistant with Google Drive Integration
Description: ## Step 1
Create an Assistent with OpenAI

--- Workflow: 1304_Telegram_Code_Monitor_Webhook.json ---
Name: Monitor USDT ERC-20 Wallet Balance with Etherscan and Telegram Notifications
Description: ## USDT ERC-20 Wallet Balance Tracker
**This workflow** Is a basic concept of integrating your ERC-20 wallet with n8n nodes.

--- Workflow: 1305_Telegram_Splitout_Export_Webhook.json ---
Name: All-in-One Telegram/Baserow AI Assistant ü§ñüß† Voice/Photo/Save Notes/Long Term Mem
Description: ## Retrieve Long Term Memories
Baserow

--- Workflow: 1306_Splitout_Schedule_Automation_Webhook.json ---
Name: Hugging Face to Notion
Description: No description found in sticky notes.

--- Workflow: 1307_Code_Converttofile_Send_Webhook.json ---
Name: N/A
Description: ![hctiapi](https://uploads.n8n.io/templates/hctiapi2.png)
## Email Body Screenshot Creation

The **Screenshot HTML** node sends the email's HTML body to the **hcti.io** API, generating a screenshot that visually represents the email's layout. The **Retrieve Screenshot** node then fetches this image, making it available for attachment or review in subsequent steps. This dual-format processing ensures both clarity and flexibility in email analysis workflows.

--- Workflow: 1308_Code_Microsoftoutlook_Send_Webhook.json ---
Name: N/A
Description: ![Gmail](https://uploads.n8n.io/templates/gmail.png)
## Gmail Integration and Data Extraction

This section of the workflow connects to a Gmail account using the **Gmail Trigger** node, capturing incoming emails in real-time, with checks performed every minute. Once an email is detected, its key components‚Äîsuch as the subject, recipient, body, and headers‚Äîare extracted and assigned to variables using the **Set Gmail Variables** node. These variables are structured for subsequent analysis and processing in later steps.

--- Workflow: 1309_Mattermost_Googlecloudnaturallanguage_Send_Triggered.json ---
Name: Analyze the sentiment of feedback and send a message on Mattermost
Description: No description found in sticky notes.

--- Workflow: 1310_Mattermost_Typeform_Send_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1311_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: chrome extension backend with AI
Description: ## N8N en OpenAI image analyser

--- Workflow: 1312_Wait_Schedule_Create_Webhook.json ---
Name: Analyze_Crowdstrike_Detections__search_for_IOCs_in_VirusTotal__create_a_ticket_in_Jira_and_post_a_message_in_Slack
Description: ![crowdstrike](https://i.imgur.com/bXWeemY.png)
## Workflow Overview
This n8n workflow is a robust orchestration tool designed to streamline and automate the response to cybersecurity threats detected by CrowdStrike. By running daily, the script systematically gathers new detection data, enriches it with external intelligence from VirusTotal, and then creates tickets in Jira for incident tracking and resolution. Finally, it posts notifications to Slack to alert the security team promptly. 

## Get details of recent CrowdStrike detections
This section initiates the workflow, scheduled to run daily at midnight, by fetching new detection events from CrowdStrike. It leverages an HTTP Request to query the CrowdStrike API, receiving a list of recent detections. These detections are then individually parsed for further analysis, ensuring that each detection is handled separately and efficiently.


--- Workflow: 1313_Code_HTTP_Automation_Webhook.json ---
Name: üé• Analyze YouTube Video for Summaries, Transcripts & Content + Google Gemini AI
Description: ### Prompt Options

- **default**: Summarizes the video with emphasis on actionable insights, tools, strategies, and resources mentioned.

- **transcribe**: Provides verbatim transcription of all spoken dialogue in the video without additional commentary.

- **timestamps**: Creates a timestamped transcript of the video dialogue in [hh:mm:ss] format.

- **summary**: Generates a concise bullet-point summary of the video's main points.

- **scene**: Provides a comprehensive visual description of the video scene including setting, objects, people, lighting, colors, and camera techniques.

- **clips**: Identifies shareable video segments with timestamps, transcripts, and explanations of their social media appeal.




--- Workflow: 1314_Manual_Stickynote_Automation_Webhook.json ---
Name: Extract & Summarize Bing Copilot Search Results with Gemini AI and Bright Data
Description: ## Note

Deals with the Bing Copilot Search using the Bright Data Web Scraper API.

The Basic LLM Chain and summarization is done to demonstrate the usage of the N8N AI capabilities.

**Please make sure to update the Webhook Notification URL**

--- Workflow: 1315_Telegram_Gmailtool_Automation_Triggered.json ---
Name: N/A
Description: ## Process Telegram Request


--- Workflow: 1316_Form_Stickynote_Automation_Webhook.json ---
Name: Simple OpenAI Image Generator
Description: # Welcome to my Simple OpenAI Image Generator Workflow!

This workflow creates an image with the new OpenAI image model "GPT-Image-1" based on a form input.

## This workflow has the following sequence:

1. Form trigger (image prompt and image size input)
2. Generate the Image via OpenAI API.
3. Return the image to the input form for download.

## The following accesses are required for the workflow:
- OpenAI API access: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/openai/)

You can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz

--- Workflow: 1317_Code_Schedule_Export_Scheduled.json ---
Name: üßπ Archive (delete) duplicate items from a Notion database
Description: ## üßπ Archive (delete) extra duplicate items from Notion database
### ABOUT THIS WORKFLOW
This n8n workflow automatically gets duplicate database pages based on a property and "archives" them (equivalent to deleting them), leaving just one copy.

### SETUP
1. Create a Notion credential.
2. Add it to the Notion nodes, selecting the appropriate database.
3. In the "Set" node ("Format items properly"), specify a reference to the property you want to check for duplicates and assign it to the field "property_to_check". I recommend using the n8n property drag-and-drop feature.
4. Enjoy!

### ABOUT THE TRIGGERS
This workflow offers two possible triggers by default:
- Run every time a page is added to the database.
- Run every day.


You can enable, disable, or modify these triggers as you like.

--- Workflow: 1318_Slack_Stickynote_Automation_Triggered.json ---
Name: Ask a human
Description: ### Sub-workflow: Custom tool
The agent above can call this workflow. It checks if the user has supplied an email address. If they haven't it prompts them to provide one. If they have, it messages a customer support channel for help.

--- Workflow: 1319_Manual_Stickynote_Automation_Triggered.json ---
Name: N/A
Description: ### Load data into database
Fetch file from Google Drive, split it into chunks and insert into Pinecone index

--- Workflow: 1320_Code_Schedule_Automate_Webhook.json ---
Name: Blog Automation TEMPLATE
Description: ## Settings

--- Workflow: 1321_Filter_Manual_Send_Triggered.json ---
Name: N/A
Description: # Auto Categorise Outlook Emails with AI
Built by [Wayne Simpson](https://www.linkedin.com/in/simpsonwayne/) at [nocodecreative.io](https://nocodecreative.io)

--- Workflow: 1322_Manual_Wordpress_Automation_Triggered.json ---
Name: Auto categorize wordpress template
Description: ## How to Auto-Categorize 82 Blog Posts in 2 Minutes using A.I. (No Coding Required)

üí° Read the [case study here](https://rumjahn.com/how-to-use-a-i-to-categorize-wordpress-posts-and-streamline-your-content-organization-process/).

üì∫ Watch the [youtube tutorial here](https://www.youtube.com/watch?v=IvQioioVqhw)



--- Workflow: 1323_Splitout_Code_Automation_Webhook.json ---
Name: Auto-Tag Blog Posts in WordPress with AI
Description: ## Demo Usage in Another Workflow (Tagging an article discovered with an RSS feed)

--- Workflow: 1324_Aggregate_Gmail_Send_Triggered.json ---
Name: N/A
Description: ## Add AI labels to Gmail messages
With this workflow you can automatically set labels for your Gmail message according to its content. 

In this workflow available are 3 labels: "Partnership", "Inquiry" and "Notification". Feel free to adjust labels according to your needs. 

**Please remember to set label names both in your Gmail account and workflow.**

--- Workflow: 1325_Splitout_Limit_Automate_Webhook.json ---
Name: N/A
Description: ## 1. Import Existing Content
[Read more about the HTML node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.html/)

First, we'll need to gather existing content for the brand voice we want to replicate. This content can be blogs, social media posts or internal documents - the idea is to use this content to "train" our AI to produce content from the provided examples. One call out is that the quality and consistency of the content is important to get the desired results.

In this demonstration, we'll grab the latest blog posts off a corporate blog to use as an example. Since, the blog articles are likely consistent because of the source and narrower focus of the medium, it'll serve well to showcase this workflow.

--- Workflow: 1326_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1327_Wordpress_Manual_Automate_Webhook.json ---
Name: Automate Content Generator for WordPress with DeepSeek R1
Description: ## Target
This workflow is designed to automatically generate seo-friendly content for wordpress through DeepSeek R1 by giving input ideas on how to structure the article. A cover image is also generated and uploaded with OpenAI DALL-E 3. This flow is designed to be executed automatically (ad "On a schedule" node) and thus have a complete editorial plan.

This process is useful for blog managers who want to automate content creation and publishing.

## Preliminary step
Create a google sheet with the following columns:
- Date
- Prompt
- Title
- Post ID

Fill in only the "Prompt" column with basic ideas that DeepSeek will work on to generate the content.

--- Workflow: 1328_Jiratool_Schedule_Automate_Scheduled.json ---
Name: N/A
Description: ## 1. Search For Unresolved Long-lived JIRA Issues
[Learn more about the JIRA node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.jira)

In this demonstration, we'll define "long-lived" as any issue which is unresolved after 7 days. Adjust to fit your own criteria.

We'll also use the Execute Workflow node to run the issues separate in parallel. This is a performance optimisation and if not required, the alternative is to use a loop node instead.

--- Workflow: 1329_Splitout_Editimage_Automate_Triggered.json ---
Name: N/A
Description: ## 1. Import Photos To Validate
[Read more about using Google Drive](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googledrive)

In this demonstration, we'll import 5 different portraits to test our AI vision model. For convenience, we'll use Google Drive but feel free to swap this out for other sources such as other storage or by using webhooks.

--- Workflow: 1330_Linkedin_Schedule_Automate_Webhook.json ---
Name: Automate LinkedIn Posts with AI
Description: ## Fetch the day's post from my Notion database
A Notion _"database"_ is just a table on a Notion Page.
This table will have various rows, for which a minimum of three columns are required:
- Name
- Status
- Date

The Date column is the most important, which will dictate when that row from your Notion table containing the text should be posted.

NOTE: each post is required to have a copy and pasted image!

--- Workflow: 1331_Code_Schedule_Automate_Webhook.json ---
Name: Automate Pinterest Analysis & AI-Powered Content Suggestions With Pinterest API
Description: Scheduled trigger at 8:00am to start the workflow. 

This can be updated to your schedule preference as an email with marketing trends can be sent to best fit one's schedule. 

--- Workflow: 1332_Splitout_Zendesk_Send_Triggered.json ---
Name: N/A
Description: ![n8n](https://uploads.n8n.io/templates/qdrantlogo.png)
## Embed your Vector Store
To provide data for your Vector store, you need to pass it in as JSON, and ensure it's setup correctly. This flow pulls the JSON file from Google Drive and extracts the JSON data and then passes it into the qdrant collection. 

--- Workflow: 1333_Splitout_GoogleCalendar_Automate_Webhook.json ---
Name: N/A
Description: ## 1. Periodically Search For Upcoming Meetings
[Read about the Scheduled Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger)

Let's use the Scheduled Trigger node to trigger our Assistant to notify about upcoming meetings. Here, we'll set it for 1 hour intervals to check for meetings scheduled in our Google Calendar. You may need to play with the intervals and frequency depending on how many meetings you typically have.

--- Workflow: 1334_HTTP_Manual_Automation_Webhook.json ---
Name: Analyze Screenshots with AI
Description: ## Setup 
**For Testing use the Setup node to put in test name & url.**

If you want to use this workflow in production, you can expand it to load data from other sources like a DB or Google Sheet

--- Workflow: 1335_Googledocs_Webhook_Process_Webhook.json ---
Name: N/A
Description: ## 1. API to Trigger Workflow
[Read more about using Webhooks](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.webhook/)

This workflow requires the user to submit the RFP document via an API request. It's a common pattern to use the webhook node for this purpose. Be sure to secure this webhook endpoint in production!

--- Workflow: 1336_Strapi_Webhook_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1337_Code_Schedule_Automate_Webhook.json ---
Name: Automate Pinterest Analysis & AI-Powered Content Suggestions With Pinterest API
Description: Scheduled trigger at 8:00am to start the workflow. 

This can be updated to your schedule preference as an email with marketing trends can be sent to best fit one's schedule. 

--- Workflow: 1338_Telegram_Stickynote_Automate_Triggered.json ---
Name: N/A
Description: # Automated Image Analysis and Response via Telegram

## Example: @SubAlertMe_Bot

## Summary:
The automated image analysis and response workflow using n8n is a sophisticated solution designed to streamline the process of analyzing images sent via Telegram and delivering insightful responses based on the analysis outcomes. This cutting-edge workflow employs a series of meticulously orchestrated nodes to ensure seamless automation and efficiency in image processing tasks.

## Use Cases:
This advanced workflow caters to a myriad of scenarios where real-time image analysis and response mechanisms are paramount. The use cases include:
- Providing immediate feedback on images shared within Telegram groups.
- Enabling automated content moderation based on the analysis of image content.
- Facilitating rapid categorization and tagging of images based on the results of the analysis.

## Detailed Workflow Setup:
To effectively implement this workflow, users must adhere to a meticulous setup process, which includes:
- Access to the versatile n8n platform, ensuring seamless workflow orchestration.
- Integration of a Telegram account to facilitate image reception and communication.
- Utilization of an OpenAI account for sophisticated image analysis capabilities.
- Configuration of Telegram and OpenAI credentials within the n8n environment for seamless integration.
- Proficiency in creating and interconnecting nodes within the n8n workflow for optimal functionality.

## Detailed Node Description:
1. **Get the Image (Telegram Trigger):**
 - Actively triggers upon receipt of an image via Telegram, ensuring prompt processing.
 - Extracts essential information from the received image message to initiate further actions.

2. **Merge all fields To get data from trigger:**
 - Seamlessly amalgamates all relevant data fields extracted from the trigger node for comprehensive data consolidation.

3. **Analyze Image (OpenAI):**
 - Harnesses the powerful capabilities of OpenAI services to conduct in-depth analysis of the received image.
 - Processes the image data in base64 format to derive meaningful insights from the visual content.

4. **Aggregate all fields:**
 - Compiles and consolidates all data items for subsequent processing and analysis, ensuring comprehensive data aggregation.

5. **Send Content for the Analyzed Image (Telegram):**
 - Transmits the analyzed content back to the Telegram chat interface for seamless communication.
 - Delivers the analyzed information in textual format, enhancing user understanding and interaction.

6. **Switch Node:**
 - The Switch node is pivotal for decision-making based on predefined conditions within the workflow.
 - It evaluates incoming data to determine the existence or absence of specific elements, such as images in this context.
 - Utilizes a set of rules to assess the presence of image data in the message payload and distinguishes between cases where images are detected and when they are not.
 - This crucial node plays a pivotal role in directing the flow of the workflow based on the outcomes of its evaluations.



## Conclusion:
The automation of image analysis processes through this sophisticated workflow not only enhances operational efficiency but also revolutionizes communication dynamics within Telegram interactions. By incorporating this advanced workflow solution, users can optimize their image analysis workflows, bolster communication efficacy, and unlock new levels of automation in image processing tasks.


--- Workflow: 1339_Manual_HTTP_Automation_Webhook.json ---
Name: Fine-tuning with OpenAI models
Description: # Step 2

Once the .jsonl file for training is uploaded (See the entire process here.: https://platform.openai.com/finetune/), a "new model" will be created and made available via your API. OpenAI will automatically train it based on the uploaded .jsonl file. If the training is successful, the new model will be accessible via API.

eg. ft:gpt-4o-mini-2024-07-18:n3w-italia::XXXXX7B

--- Workflow: 1340_HTTP_Executeworkflow_Automation_Webhook.json ---
Name: [3/3] Anomaly detection tool (crops dataset)
Description: We are working here with crops dataset: 
Existing (so not anomalies) crops images in dataset are:
- 'pearl_millet(bajra)',
- 'tobacco-plant',
- 'cherry',
- 'cotton',
- 'banana',
- 'cucumber',
- 'maize',
- 'wheat',
- 'clove',
- 'jowar',
- 'olive-tree',
- 'soyabean',
- 'coffee-plant',
- 'rice',
- 'lemon',
- 'mustard-oil',
- 'vigna-radiati(mung)',
- 'coconut',
- 'gram',
- 'pineapple',
- 'sugarcane',
- 'sunflower',
- 'chilli',
- 'fox_nut(makhana)',
- 'jute',
- 'papaya',
- 'tea',
- 'cardamom',
- 'almond'


--- Workflow: 1341_Telegram_Splitout_Automate_Webhook.json ---
Name: Automated Research Report Generation with OpenAI, Wikipedia, Google Search, and Gmail/Telegram
Description: # üìã Research Report Workflow üß†üíª

This workflow generates a professional PDF research report on a given topic, sends it via Telegram, and emailsüöÄ


---

## üîç **Query Refiner**
- **What it does**: Refines the input topic for better readability. üßπ
- **Input**: Topic from the HTTP Request (e.g., "the best ai models 2025").
- **Output**: Formatted topic (e.g., "The Best AI Models 2025").
- **‚ú® Detail**: Capitalizes words and ensures "AI" is uppercase.

---

## üìä **Aggregate Research Data**
- **What it does**: Collects research data for the topic. üìö
- **Input**: Refined topic.
- **Output**: Research data (introduction, summary, key findings, etc.) with a timestamp.
- **‚è∞ Note**: The timestamp is used to date the report.

---

## üîó **Merge Split Items**
- **What it does**: Combines and organizes research data into sections. üóÇÔ∏è
- **Input**: Data from Aggregate Research Data.
- **Output**: Structured JSON with sections like `introduction`, `key_findings`, `sources`.
- **üìë Purpose**: Prepares data for the PDF report.

---

## üìù **Generate PDF HTML**
- **What it does**: Creates an HTML template for the PDF report. üñ•Ô∏è
- **Input**: Refined topic and research data.
- **Output**: HTML content, file name (e.g., `research-report-the-best-ai-models-2025-2025-04-09.pdf`), and formatted date.
- **üé® Features**:
  - Professional styling (Helvetica, Georgia fonts, deep blue accents).
  - Sections: Cover page, introduction, summary, key findings, etc.
  - Escapes special characters to prevent HTML errors.
- **‚è≥ Timestamp Fix**: Stores `rawTimestamp` and `formattedDate` (e.g., "April 9, 2025").

---

## üìÑ **Convert HTML to PDF (PDFShift)**
- **What it does**: Converts the HTML to a PDF using the PDFShift API. üñ®Ô∏è
- **Input**: HTML content from the previous node.
- **Output**: JSON response with a URL to the generated PDF.
- **üîë Requirement**: Needs a valid PDFShift API key.
- **‚ö†Ô∏è Note**: Outputs a URL, not the PDF binary data.

---

## ‚¨áÔ∏è **Download PDF**
- **What it does**: Downloads the PDF from the URL provided by PDFShift. üì•
- **Input**: PDF URL from the Convert HTML to PDF node.
- **Output**: Binary PDF data (MIME type: `application/pdf`, ~98 KB).
- **üìõ File Name**: Uses the file name from the previous node (e.g., `research-report-the-best-ai-models-2025-2025-04-09.pdf`).

---

## üì± **Gmail/Telegram**
- **What it does**: Sends the PDF to a Gmail/Telegram chat. üí¨
- **Input**: PDF binary data and metadata (topic, formatted date).
- **Output**: Sends the PDF as a document to the specified chat.
- **üìù Caption**:

--- Workflow: 1342_Linkedin_Telegram_Automate_Webhook.json ---
Name: ‚ú®ü©∑Automated Social Media Content Publishing Factory + System Prompt Composition
Description: ## LLM

--- Workflow: 1343_Splitout_Editimage_Automation_Webhook.json ---
Name: Remove Advanced Background from Google Drive Images
Description: ## About this worfklow 

## How it works
This workflow does watch out for new images uploaded within Google Drive. 
Once there are new images it will download the image. And then run some logic, remove the background and add some padding to the output image. 
**By default Images are saved as .png**
Once done upload it to Google Drive again.
## Features* Select Google Drive Credentials within the Google Drive Nodes
### This workflow supports
* Remove Background
* Transparent Background
* Coloured Background (1 Color)
* Add Padding
* Choose Output Size

## Customize it!
* Feel free to customize the workflow to your needs
* Speed up the workflow: Using fixed output size
### Examples 
* Send Final Images to another service
* For Products: Let ChatGPT Analyze the Product Type
* Add Text with the "Edit Image" Node

### Photroom API Playground
[Click me](https://www.photoroom.com/api/playground)

--- Workflow: 1344_Splitout_Filter_Automation_Webhook.json ---
Name: N/A
Description: 

--- Workflow: 1345_Schedule_Discord_Automation_Scheduled.json ---
Name: YouTube to X Post- AlexK1919
Description: ## Fetch the latest YouTube video and dedupe

Enter your YouTube Channel ID in the "Channel ID" field of this node. You can find your [Channel ID here](https://youtube.com/account_advanced).

--- Workflow: 1346_GoogleCalendar_GoogleSheets_Automate_Triggered.json ---
Name: Automate Event Creation in Google Calendar from Google Sheets
Description: # Automate Event Creation in Google Calendar from Google Sheets


--- Workflow: 1347_Telegram_Gmail_Automation_Triggered.json ---
Name: Forward Filtered Gmail Notifications to Telegram Chat
Description: # Forward Filtered Gmail Notifications to Telegram Chat


--- Workflow: 1348_Form_Automation_Triggered.json ---
Name: Image to license plate number
Description: No description found in sticky notes.

--- Workflow: 1349_HTTP_Slack_Automation_Webhook.json ---
Name: Weather via Slack
Description: No description found in sticky notes.

--- Workflow: 1350_Mysqltool_Stickynote_Automate_Webhook.json ---
Name: modelo do chatbot
Description: TOOLS

--- Workflow: 1351_Manual_Splitout_Automation_Webhook.json ---
Name: Scrape Today's Github Trend 13 Top Repositories
Description: No description found in sticky notes.

--- Workflow: 1352_Splitout_Filter_Automate_Triggered.json ---
Name: BambooHR AI-Powered Company Policies and Benefits Chatbot
Description: ## STEP #1: Retrieve company policies and load them into a vector store

--- Workflow: 1353_Stickynote_Gmail_Send_Triggered.json ---
Name: N/A
Description: ## Gmail trigger
Poll Gmail every x minutes, trigger when a new email is received.

- Gmail API

--- Workflow: 1354_HTTP_Respondtowebhook_Automate_Webhook.json ---
Name: Bitrix24 Chatbot Application Workflow example with Webhook Integration
Description: No description found in sticky notes.

--- Workflow: 1355_Splitout_Webhook_Automate_Webhook.json ---
Name: Bitrix24 Open Chanel RAG Chatbot Application Workflow example with Webhook Integration
Description: Subworkflow for Register Bot
Here are files vector stored for Open line chanel bot
After files are stored they are moved to subfolder

--- Workflow: 1356_Code_Webhook_Import_Webhook.json ---
Name: Bitrix24 Task Form Widget Application Workflow example with Webhook Integration
Description: No description found in sticky notes.

--- Workflow: 1357_Localfile_Wait_Automation_Triggered.json ---
Name: N/A
Description: ## Step 1. Watch Folder and Import New Documents
[Read more about Local File Trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

With n8n's local file trigger, we're able to trigger the workflow when files are created in our target folder. We still have to import them however as the trigger will only give the file's path. The "Extract From" node is used to get at the file's contents.

--- Workflow: 1358_Localfile_Manual_Create_Webhook.json ---
Name: N/A
Description: ## Step 1. Select the target folder
[Read more about local file trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

In this workflow, we'll monitor a specific folder on disk that n8n has access to. Since we're using docker, we can either use the n8n volume or mount a folder from the host machine.

The local file trigger is useful to execute the workflow whenever changes are made to our target folder.

--- Workflow: 1359_Wait_Splitout_Create_Webhook.json ---
Name: N/A
Description: ## Step 1. Download the Tax Code PDF
[Read more about handling Zip Files](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.compression/)

Let's begin by pulling a zip file containing all the tax codes as separate PDF files. We can unzip on the fly with n8n's compression node.

--- Workflow: 1360_Manual_Stickynote_Create_Triggered.json ---
Name: Build an OpenAI Assistant with Google Drive Integration
Description: ## Step 1
Create an Assistent with OpenAI

--- Workflow: 1361_GoogleCalendar_Webhook_Create_Webhook.json ---
Name: Build a Chatbot, Voice Agent and Phone Agent with Voiceflow, Google Calendar and RAG
Description: # STEP 6 - VOICEFLOW

- Register on [Voiceflow](https://www.voiceflow.com/) 
- Create the workflow as shown in the following image
![image](https://i.postimg.cc/3rSPwMn2/langflow.png)
- There are 3 "Captures":
-- n8n_order
-- n8n_appointment
-- n8n_rag
- Add in the created functions the url of the corresponding n8n Webhook trigger node
- Test your Agent
- Get your projectID
- In the Widget section choose Chat or Voice and copy the installation script
![image](https://i.postimg.cc/855gyTZP/voiceflow-agent.png)
![image](https://i.postimg.cc/5Nn4Sk43/voiceflow-agent2.png)

PS. You can import a Twilio number to assign it to your agent for becoming a Phone Agent
![image](https://i.postimg.cc/cLymTTFv/voiceflow-agent3.png)



--- Workflow: 1362_Wait_Webhook_Create_Webhook.json ---
Name: Build a Phone Agent to qualify outbound leads and inbound calls with RetellAI -vide
Description: # Outbound lead qualification call workflow

--- Workflow: 1363_Splitout_GitHub_Create_Webhook.json ---
Name: Building RAG Chatbot for Movie Recommendations with Qdrant and Open AI
Description: Tool, calling Qdrant's recommendation API based on user's request, transformed by AI agent

--- Workflow: 1364_Extractfromfile_Manual_Create_Webhook.json ---
Name: N/A
Description: ## 1. Download Product Brochure PDF
[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

Import your marketing PDF document to build your vector store. This will be used as the knowledgebase by the Sales AI Agent.

For this demonstration, we'll use the HTTP request node to import the YAMAHA POWERED LOUDSPEAKERS 2024 brochure ([Source](https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf)) and an Extract from File node to extract the text contents. 

--- Workflow: 1365_Extractfromfile_Manual_Create_Webhook.json ---
Name: N/A
Description: ## 1. Download Product Brochure PDF
[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

Import your marketing PDF document to build your vector store. This will be used as the knowledgebase by the Sales AI Agent.

For this demonstration, we'll use the HTTP request node to import the YAMAHA POWERED LOUDSPEAKERS 2024 brochure ([Source](https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf)) and an Extract from File node to extract the text contents. 

--- Workflow: 1366_Wait_Code_Automation_Webhook.json ---
Name: OpenAI Assistant for Hubspot Chat
Description: Watch for new message on the chatbot. 
This can be triggered with [n8n chat widget](https://www.npmjs.com/package/@n8n/chat), hubspot or other chat services. 



--- Workflow: 1367_HTTP_Schedule_Automate_Webhook.json ---
Name: üí•workflow n8n d'Auto-Post sur les r√©seaux sociaux - vide
Description: # Auto-Publish to 9 Social Platforms
## Automates distribution using Blotato‚Äôs API.
## The video is auto-published to Instagram, YouTube, TikTok, Facebook, 
## LinkedIn, Threads, Twitter (X), Bluesky, and Pinterest 
## ‚Äî all in one go, with no manual work required.
### ** Documentation : ** [Guide](https://automatisation.notion.site/Workflow-n8n-d-Auto-Post-sur-les-r-seaux-sociaux-1d33d6550fd980b7b43ac417e9a06a9b?pvs=4)

--- Workflow: 1368_Telegram_Limit_Export_Triggered.json ---
Name: ü¶ú‚ú®Use OpenAI to Transcribe Audio + Summarize with AI + Save to Google Drive
Description: ## 3Ô∏è‚É£ Transcribe Audio

--- Workflow: 1369_Editimage_Manual_Automation_Webhook.json ---
Name: N/A
Description: ## Try me out!

### This workflow converts a Candidate Resume PDF to an image which is then "read" by a Vision Language Model (VLM). The VLM assesses if the candidate's CV is a fit for the desired role.

This approach can be employed to combat "hidden prompts" planted in resumes to bypass and/or manipulate automated ATS systems using AI.


### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!


--- Workflow: 1370_HTTP_Extractfromfile_Automation_Webhook.json ---
Name: N/A
Description: **Add direct link to CV and Job description**

--- Workflow: 1371_Form_S3_Import_Triggered.json ---
Name: DigialOceanUpload
Description: No description found in sticky notes.

--- Workflow: 1372_Mysqltool_Stickynote_Automate_Webhook.json ---
Name: modelo do chatbot
Description: TOOLS

--- Workflow: 1373_Manual_Stickynote_Automation_Webhook.json ---
Name: Chat with GitHub OpenAPI Specification using RAG (Pinecone and OpenAI)
Description: ## Indexing content in the vector database
This part of the workflow is responsible for extracting content, generating embeddings and sending them to the Pinecone vector store.

It requests the OpenAPI specifications from GitHub using a HTTP request. Then, it splits the file in chunks, generating embeddings for each chunk using OpenAI, and saving them in Pinecone vector DB.

--- Workflow: 1374_Aggregate_Stickynote_Create_Triggered.json ---
Name: N/A
Description: Read contents of the chat from memory

--- Workflow: 1375_Telegram_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1376_Manual_GoogleDrive_Automation_Triggered.json ---
Name: N/A
Description: ## 1. Setup: Fetch file from Google Drive, split it into chunks and insert into a vector database
Note that running this part multiple times will insert multiple copies into your DB

--- Workflow: 1377_Postgrestool_Stickynote_Automation_Triggered.json ---
Name: Chat with Postgresql Database
Description: ### üë®‚Äçüé§ Setup
1. Add your **postgresql** and **OpenAI** credentials.
2. Click **Chat** button and start asking questions to your database.
3. Activate the workflow and you can make the chat publicly available.

--- Workflow: 1378_Code_Filter_Automation_Triggered.json ---
Name: Chat with Google Sheet
Description: ### Sub-workflow: Custom tool
This can be called by the agent above. It returns three different types of data from the Google Sheet, which can be used together for more complex queries without returning the whole sheet (which might be too big for GPT to handle)

--- Workflow: 1379_Stickynote_Automation_Triggered.json ---
Name: Chat with local LLMs using n8n and Ollama
Description: ## Chat with local LLMs using n8n and Ollama
This n8n workflow allows you to seamlessly interact with your self-hosted Large Language Models (LLMs) through a user-friendly chat interface. By connecting to Ollama, a powerful tool for managing local LLMs, you can send prompts and receive AI-generated responses directly within n8n.

### How it works
1. When chat message received: Captures the user's input from the chat interface.
2. Chat LLM Chain: Sends the input to the Ollama server and receives the AI-generated response.
3. Delivers the LLM's response back to the chat interface.

### Set up steps
* Make sure Ollama is installed and running on your machine before executing this workflow.
* Edit the Ollama address if different from the default.


--- Workflow: 1380_Telegram_Code_Automate_Triggered.json ---
Name: Telegram-bot AI Da Nang
Description: ## Chat input triggered inside n8n
Used for testing and debugging

--- Workflow: 1381_Splitout_Code_Automation_Webhook.json ---
Name: N/A
Description: ## Edit your own prompt ‚¨áÔ∏è


--- Workflow: 1382_Lemlist_Slack_Automate_Webhook.json ---
Name: N/A
Description: ### Get your lemlist API key

1. Go to your lemlist account or create one [HERE](https://app.lemlist.com/create-account)

2. Go to Settings -> Integrations

3. Generate your API Key and copy it

4. On this node, click on create new credential and paste your API key

--- Workflow: 1383_Filter_Slack_Create_Webhook.json ---
Name: N/A
Description: ### When does this fire?
In our setup we have a general team in Linear where we post new tickets to. Additionally, the bug needs to have a certain label and the description needs to be filled. 
You're of course free to adjust this to your needs
üëá

--- Workflow: 1384_Telegram_Stickynote_Create_Triggered.json ---
Name: Post new Google Calendar events to Telegram
Description: ## Post new Google Calendar events to Telegram


--- Workflow: 1385_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: Business WhatsApp AI RAG Chatbot
Description: # STEP 4

## RAG System













* *Respond* webhook receives various POST Requests from Meta regarding WhatsApp messages (user messages + status notifications)
* Check if the incoming JSON contains user message
* Echo back the text message to the user. This is a custom message, not a WhatsApp Business template message


--- Workflow: 1386_Limit_Code_Automation_Scheduled.json ---
Name: N/A
Description: ## Reply draft with OpenAI Assistant
This workflow automatically transfers content of incoming email messages with specific labels into OpenAI Assitant and returns reply draft. After draft is composed, trigger label is deleted from the thread.

**Please remember to configure your OpenAI Assistant first.**

--- Workflow: 1387_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: Image Generation API
Description: ## Webhook Trigger 
**This Node starts listening to requests to the Webhook URL**



--- Workflow: 1388_Splitout_Redis_Automation_Webhook.json ---
Name: N/A
Description: 














### üö® Set Interview Topic Here!

--- Workflow: 1389_Wait_Limit_Import_Webhook.json ---
Name: N/A
Description: **40 at a time seems to be the memory limit on my server - run until complete with batches of 40 or increase based on your server memory**


--- Workflow: 1390_Manual_Stickynote_Automation_Webhook.json ---
Name: Text to Speech (OpenAI)
Description: ## Workflow Trigger
You can replace this manual trigger with another trigger type as required by your use case.

--- Workflow: 1391_Code_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: Ensure these referance this workflow, replace placeholders

--- Workflow: 1392_Telegram_Googleanalytics_Automation_Scheduled.json ---
Name: Google Analytics: Weekly Report
Description: Welcome to my Google Analytics Weekly Report Workflow!

This workflow has the following sequence:

1. time trigger (e.g. every Monday at 7 a.m.)
2. retrieval of Google Analytics data from the last 7 days
3. assignment and summary of the data
4. retrieval of Google Analytics data from the last 7 days of the previous year
5. allocation and summary of the data
6. preparation in tabular form and brief analysis by AI.
7. sending the report as an email
8. preparation in short form by AI for Telegram (optional)
9. sending as Telegram message.

The following accesses are required for the workflow:
- Google Analytics (via Google Analytics API): https://docs.n8n.io/integrations/builtin/credentials/google/
- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)
- SMTP access data (for sending the mail)
- Telegram access data (optional for sending as Telegram message): https://docs.n8n.io/integrations/builtin/credentials/telegram/

You can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz

--- Workflow: 1393_Manual_Editimage_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1394_Manual_Humanticai_Create_Webhook.json ---
Name: Create, update, and get a profile in Humantic AI
Description: No description found in sticky notes.

--- Workflow: 1395_Wait_Code_Create_Webhook.json ---
Name: Create Animated Stories using GPT-4o-mini, Midjourney, Kling and Creatomate API
Description: ## Basic Setting Instruction
Fill in **Basic Params** based on user's need. 
The node concludes three section: style, character and situation_keyword.
GPT-4o-mini will generate image description based on basic params mentioned above.

--- Workflow: 1396_Slack_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ## This is a POST Webhook endpoint

Make sure to configure this webhook using a https:// wraper and dont use the default http://localhost:5678 as that will not be recognized by your slack webhook


Once the data has been sent to your webhook, the next step will be passing it via an AI Agent to process data based on the queries we pass to our agent.

To have some sort of a memory, be sure to set the slack token to the memory node. This way you can refer to other chats from the history.

The final message is relayed back to slack as a new message. Since we can not wait longer than 3000 ms for slack response, we will create anew message with reference to the input we passed.

We can advance this using the tools or data sources for it to be more custom tailored for your company.


--- Workflow: 1397_Manual_Stickynote_Automation_Triggered.json ---
Name: LangChain - Example - Code Node Example
Description: ## Self-coded LLM Chain Node

--- Workflow: 1398_Splitout_Code_Automation_Webhook.json ---
Name: N/A
Description: ## Step 1. Starting Fresh
For this demo, we'll clear any existing records in our Qdrant vector store for the selected company. We do this using the Qdrant's delete points API.

--- Workflow: 1399_Schedule_Slack_Automation_Scheduled.json ---
Name: N/A
Description: ## 1. Query Slack for Messages 
[Read more about the Slack Trigger](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.slack)

Slack API search uses the same search syntax found in the app. Here, we'll use it to filter the latest messages with the ticket emoji within our designated channel called #n8n-tickets. 

--- Workflow: 1400_Wait_Code_Automation_Webhook.json ---
Name: AutoQoutesV2_template
Description: ## Create Image Background
Generate an image using prompt from Google Sheet via PiAPI Flux (Txt2img).

--- Workflow: 1401_Code_Webhook_Automate_Webhook.json ---
Name: Workflow stats
Description: ## Create the main JSON object with the workflow statistics
* `globals` - general information (# of workflows, active workflows, total trigger count)
* `wf_stats` - summary per workflow (number or nodes, unique nodes, list of nodes and tags)
* `nodes-section` - summary per node (number of workflows that use a node and their URLs)
* `tags-section` - summary per tag (number of workflows that use a node and their URLs)
* `webhook-section` - lists all webhook endpoints of the instance and shows the workflow URLs

### You can use this JSON in BI tools to create a custom dashboard

## Learn JS tips & tricks
### Instead of just using one Code node, the workflow contains several nodes with useful advanced tricks.

### JMESPath
* Make a simple array of strings out of a complex array: `$jmespath($json,'nodes[*].type')`
* Extract values based on condition: `$jmespath($input.all(),'[?json.wf_stats.wf_active == `true`]')`

### Map and arrow functions
* Perform operation on each array element: `.map(item => (item.split('.').pop().toUpperCase() ))`
* Calculate sum of values from an array: `.reduce((accumulator, currentValue) => accumulator + currentValue, 0)`

### Create an array with only unique values
* `[...new Set($json.nodes_array)]`

### Date-time conversions with the Luxon library:
* `DateTime.fromISO($json.createdAt).toFormat('yyyy-MM-dd HH:mm:ss')`

### Template literals (Template strings) for creating strings in JS
* `wf-${$json.id}`

--- Workflow: 1402_Code_Manual_Automation_Webhook.json ---
Name: LinkedIn Web Scraping with Bright Data MCP Server & Google Gemini
Description: ## Bright Data LinkedIn Person Scraper

--- Workflow: 1403_Splitout_Datetime_Send_Webhook.json ---
Name: Send Emails from Obsidian
Description: ## Obsidian to Email Overview

This workflow allows you to send your Obsidian notes (including attachments) via email, with YAML metadata for customization.

### Key Features:
- Trigger email sending through [Obsidian's Post Webhook plugin](https://github.com/Masterb1234/obsidian-post-webhook/).
- Parse YAML frontmatter for email metadata like recipients, subject, and more.
- Automatic handling of attachments (images/files) via base64 encoding.
- Append Webhook response automatically to the bottom of your note in Obsidian

--- Workflow: 1404_Aggregate_Telegram_Automation_Triggered.json ---
Name: DSP Agent
Description: No description found in sticky notes.

--- Workflow: 1405_Wait_Splitout_Automation_Webhook.json ---
Name: N/A
Description: ## Daily Podcast Summary
### This workflow will summarize the content in the day's top podcasts for a certain genre, then send you the podcasts with summaries by email

## Setup:
 1. Create a free API key on Taddy here: https://taddy.org/signup/developers
 2. Input your user number and API key into the `TaddyTopDaily` node in the header parameters X-USER-ID and X-API-KEY respectively.
 3. Create access credentials for your Gmail as described here: https://developers.google.com/workspace/guides/create-credentials. Use the credentials from your *client_secret.json* in the `Gmail` node.
 4. In the `Genre` node, set the genre of podcasts you want a summary for. Valid values are: TECHNOLOGY, NEWS, ARTS, COMEDY, SPORTS, FICTION, etc. Look at api.taddy.org for the full list (they will be displayed in the help docs as PODCASTSERIES_TECHNOLOGY, PODCASTSERIES_NEWS, etc.)
 5. Enter your email address in the `Gmail` node.
 6. Change the schedule time for sending email from `Schedule` to whichever time you want to receive the email.
 

## Test:
- Link a `Test Workflow` node in place of the `Schedule` node.
- Hit Test Workflow.
- Check your email for the results.

--- Workflow: 1406_Schedule_Slack_Automation_Scheduled.json ---
Name: Daily meetings summarization with Gemini AI
Description: ### Gemini Flash model a base

--- Workflow: 1407_Splitout_Schedule_Automation_Scheduled.json ---
Name: N/A
Description: ## 1. Fetch Latest AI Grants, Ignore Those Already Seen
[Learn more about the Remove Duplicates node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/)

A cool feature of n8n's remove duplicates node is that it works across executions. What this means for this template is that the node will help us keep track of grant IDs to know if we've already processed them and if so, filter them out so we won't have duplicate alerts.

--- Workflow: 1408_Splitout_Code_Monitor_Triggered.json ---
Name: N/A
Description: ## Build a summary

This is useful to run it in an agentic workflow. You may remove the summary part and return the raw array with the found issues.

--- Workflow: 1409_Send.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1410_Webhook_Discord_Automate_Webhook.json ---
Name: Discord AI bot
Description: No description found in sticky notes.

--- Workflow: 1411_Telegram_Wait_Automation_Triggered.json ---
Name: Telegram Chat with Buffering
Description: ## 1. Receive Message



--- Workflow: 1412_Splitout_Code_Automation_Scheduled.json ---
Name: Scrape Trustpilot Reviews to Google Sheets
Description: ## Edit this node üëá

Change to the name of the company registered on Trustpilot and the maximum number of pages to scrape

--- Workflow: 1413_Aggregate_Telegram_Automation_Triggered.json ---
Name: Dsp agent
Description: No description found in sticky notes.

--- Workflow: 1414_Filter_Summarize_Automation_Triggered.json ---
Name: Store Notion's Pages as Vector Documents into Supabase with OpenAI
Description: ## Store Notion's Pages as Vector Documents into Supabase

**This workflow assumes you have a Supabase project with a table that has a vector column. If you don't have it, follow the instructions here:** [Supabase Vector Columns Guide](https://supabase.com/docs/guides/ai/vector-columns)

## Workflow Description

This workflow automates the process of storing Notion pages as vector documents in a Supabase database with a vector column. The steps are as follows:

1. **Notion Page Added Trigger**:
   - Monitors a specified Notion database for newly added pages. You can create a specific Notion database where you copy the pages you want to store in Supabase.
   - Node: `Page Added in Notion Database`

2. **Retrieve Page Content**:
   - Fetches all block content from the newly added Notion page.
   - Node: `Get Blocks Content`

3. **Filter Non-Text Content**:
   - Excludes blocks of type "image" and "video" to focus on textual content.
   - Node: `Filter - Exclude Media Content`

4. **Summarize Content**:
   - Concatenates the Notion blocks content to create a single text for embedding.
   - Node: `Summarize - Concatenate Notion's blocks content`

5. **Store in Supabase**:
   - Stores the processed documents and their embeddings into a Supabase table with a vector column.
   - Node: `Store Documents in Supabase`

6. **Generate Embeddings**:
   - Utilizes OpenAI's API to generate embeddings for the textual content.
   - Node: `Generate Text Embeddings`


7. **Create Metadata and Load Content**:
   - Loads the block content and creates associated metadata, such as page ID and block ID.
   - Node: `Load Block Content & Create Metadata`

8. **Split Content into Chunks**:
   - Divides the text into smaller chunks for easier processing and embedding generation.
   - Node: `Token Splitter`





--- Workflow: 1415_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: Dynamically generate HTML page from user request using OpenAI Structured Output
Description: ## Generate HTML from user query

**HTTP Request node**
- Send the user query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*
- The response format is inspired by the [Structured Output defined in OpenAI Introduction post](https://openai.com/index/introducing-structured-outputs-in-the-api)
- The output is a JSON containing HTML components and attributed


**OpenAI node**
- Format the response from the previous node from JSON format to HTML format

--- Workflow: 1416_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: Dynamically generate HTML page from user request using OpenAI Structured Output
Description: ## Generate HTML from user query

**HTTP Request node**
- Send the user query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*
- The response format is inspired by the [Structured Output defined in OpenAI Introduction post](https://openai.com/index/introducing-structured-outputs-in-the-api)
- The output is a JSON containing HTML components and attributed


**OpenAI node**
- Format the response from the previous node from JSON format to HTML format

--- Workflow: 1417_Webhook_Respondtowebhook_Create_Webhook.json ---
Name: Dynamically generate HTML page from user request using OpenAI Structured Output
Description: ## Generate HTML from user query

**HTTP Request node**
- Send the user query to OpenAI, with a defined JSON response format - *using HTTP Request node as it has not yet been implemented in the OpenAI nodes*
- The response format is inspired by the [Structured Output defined in OpenAI Introduction post](https://openai.com/index/introducing-structured-outputs-in-the-api)
- The output is a JSON containing HTML components and attributed


**OpenAI node**
- Format the response from the previous node from JSON format to HTML format

--- Workflow: 1418_Schedule_Nocodb_Automation_Scheduled.json ---
Name: Noco Kanban Board with AI Prioritization
Description: ## Incident Form
This workflow is triggered when someone fills incident form. You could replace it for example with email or webhook, but you will need to update references in other nodes to new fields

--- Workflow: 1419_HTTP_Schedule_Automation_Scheduled.json ---
Name: Scans von PDF zu Nextcloud
Description: ## Copy Scanner Documents to Nextcloud
** Needed USB-Scanner and Program ScanServJS with an API

--- Workflow: 1420_Form_Extractfromfile_Automate_Triggered.json ---
Name: AI CV Screening Workflow
Description: No description found in sticky notes.

--- Workflow: 1421_Postgres_Googlecloudnaturallanguage_Automation_Scheduled.json ---
Name: ETL pipeline
Description: No description found in sticky notes.

--- Workflow: 1422_Manual_Stickynote_Automation_Webhook.json ---
Name: Lead Generation System (Template)
Description: ## Lead Generation
Get thousands of enriched leads in seconds.

--- Workflow: 1423_Code_Editimage_Automation_Webhook.json ---
Name: N/A
Description: ## Try it out!

### This workflow takes an image and generates a caption for it using AI. The OpenAI node has been able to do this for a while but this workflow demonstrates how to achieve the same with other multimodal vision models such as Google's Gemini.

Additional, we'll use the Edit Image node to overlay the generated caption onto the image. This can be useful for publications or can be repurposed for copyrights and/or watermarks.

### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!


--- Workflow: 1424_Telegram_Code_Automation_Webhook.json ---
Name: üìÑ‚ú® Easy Wordpress Content Creation from PDF Document + Human In The Loop with Gmail Approval
Description: ## Upload PDF and Extract Text

--- Workflow: 1425_Splitout_Elasticsearch_Create_Webhook.json ---
Name: N/A
Description: ## 1. Get Source Image
[Read more about setting variables for your workflow](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set)

For this demo, we'll manually define an image to process. In production however, this image can come from a variety of sources such as drives, webhooks and more.

--- Workflow: 1426_Code_Schedule_Export_Webhook.json ---
Name: Backup workflows to git repository on Gitea
Description: Workflow changes committed to the repository

--- Workflow: 1427_Emailreadimap_Manual_Send_Webhook.json ---
Name: Effortless Email Management with AI
Description: # STEP 1

## Create Qdrant Collection
Change:
- QDRANTURL
- COLLECTION

--- Workflow: 1428_Code_Schedule_Send_Scheduled.json ---
Name: N/A
Description: ### 4. Using Subworkflows to run executions concurrently
This configuration is desired when sequential execution is slow and unnecessary. Also if one email fails, it doesn't fail the execution for everyone else.

--- Workflow: 1429_Code_Schedule_Send_Scheduled.json ---
Name: N/A
Description: ### 4. Using Subworkflows to run executions concurrently
This configuration is desired when sequential execution is slow and unnecessary. Also if one email fails, it doesn't fail the execution for everyone else.

--- Workflow: 1430_Aggregate_Schedule_Send_Scheduled.json ---
Name: Email Summary Agent
Description: - Starts the workflow every day at 7 AM.
- Adjust the time if you want the workflow to run at a different hour.

--- Workflow: 1431_Wait_Redis_Send_Triggered.json ---
Name: N/A
Description: ## Step 2. Buffer Incoming Messages
[Learn more about using Redis](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.redis)

* New messages are captured into a list.
* After X seconds, we get a fresh copy of this list
* If the last message on the list is the same as the incoming message, then we know no new follow-on messages were sent within the last 5 seconds. Hence the user should be waiting and it is safe to reply.
* But if the reverse is true, then we will abort the execution here.

--- Workflow: 1432_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: N/A
Description: ![Imgur](https://uploads.n8n.io/templates/slack.png)
## Events Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). 

The second node extracts the payload from slack into an object that n8n can understand. 

--- Workflow: 1433_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: N/A
Description: ![Imgur](https://uploads.n8n.io/templates/slack.png)
## Events Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). 

The second node extracts the payload from slack into an object that n8n can understand. 

--- Workflow: 1434_Strapi_Splitout_Automation_Webhook.json ---
Name: N/A
Description: 

















### üö® Set Destination Folders Here

--- Workflow: 1435_Code_Slack_Automation_Webhook.json ---
Name: piepdrive-test
Description: # Enrich Pipedrive's Organization Data with GPT-4o When an Organization is Created in Pipedrive

This workflow **enriches a Pipedrive organization's data by adding a note to the organization object in Pipedrive**. It assumes there is a custom "website" field in your Pipedrive setup, as data will be scraped from this website to generate a note using OpenAI.

## ‚ö†Ô∏è Disclaimer
**These workflows use a scraping API. Before using it, ensure you comply with the regulations regarding web scraping in your country or state**.

## Important Notes
- The OpenAI model used is GPT-4o, chosen for its large input token context capacity. However, it is also **the most expensive option**, you should take cost into consideration.

- The system prompt in the OpenAI Node generates output with relevant information, but feel free to improve or **modify it according to your needs**.

## **How It Works**

### Node 1: `Pipedrive Trigger - An Organization is Created`
This is the trigger of the workflow. When **an organization object is created in Pipedrive**, this node is triggered and retrieves the data. Make sure you have a "website" custom field (the name of the field in the n8n node will appear as a random ID and not with the Pipedrive custom field name).

### Node 2: `ScrapingBee - Get Organization's Website's Homepage Content`
This node **scrapes the content** from the URL of the website associated with the **Pipedrive Organization** created in Node 1. The workflow uses the [ScrapingBee](https://www.scrapingbee.com/) API, but you can use any preferred API or simply the HTTP request node in n8n.

### Node 3: `OpenAI - Message GPT-4o with Scraped Data`
This node sends HTML-scraped data from the previous node to the **OpenAI GPT-4 model**. The system prompt instructs the model to **extract company data**, such as products or services offered and competitors (if known by the model), and format it as HTML for optimal use in a Pipedrive Note.

### Node 4: `Pipedrive - Create a Note with OpenAI Output`
This node **adds a Note to the Organization created in Pipedrive** using the OpenAI node output. The Note will include the company description, target market, selling products, and competitors (if GPT-4 was able to determine them).

### Node 5 & 6: `HTML To Markdown` & `Code - Markdown to Slack Markdown`
These two nodes **format the HTML output to Slack Markdown**.

The Note created in Pipedrive is in HTML format, **as specified by the System Prompt of the OpenAI Node**. To send it to Slack, it needs to be converted to Markdown and then to Slack-specific Markdown.

### Node 7: `Slack - Notify`
This node **sends a message in Slack containing the Pipedrive Organization Note** created with this workflow.


--- Workflow: 1436_Manual_HTTP_Automation_Webhook.json ---
Name: N/A
Description: ## 1. Use Airtable to Capture Survey Photos
[Read more about AirTable](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.airtable)

To enable this workflow, we need a database where we can retreive the title and photo to analyse and write the generate values back to. Airtable is perfect for this since it has a robust API we can work with.

For this demo, we'll manually trigger but this can be changed for forms or other triggers.

--- Workflow: 1437_Splitout_Code_Automation_Triggered.json ---
Name: AI Logo Sheet Extractor to Airtable
Description: ## Attribute Creation and Mapping those created or existing Ids 

--- Workflow: 1438_Extractfromfile_Manual_Process_Webhook.json ---
Name: N/A
Description: ## Workflow: Extract data from PDF with Claude 3.5 Sonnet or Gemini 2.0 Flash

**Overview**
- This workflow helps you compare Claude 3.5 Sonnet and Gemini 2.0 Flash when extracting data from a PDF
- This workflow extracts and processes the data within a PDF in **one single step**, **instead of calling an OCR and then an LLM‚Äù**


**How it works**
- The initial 2 steps download the PDF and convert it to base64.
- This base64 string is then sent to both Claude 3.5 Sonnet and Gemini 2.0 Flash to extract information.
- This workflow is made to let you compare results, latency, and cost (in their dedicated dashboard).


**How to use it**
- Set up your Google Drive if not already done
- Select a document on your Google Drive
- Modify the prompt in "Define Prompt" to extract the information you need and transform it as wanted.
- Get a [Claude API key](https://console.anthropic.com/settings/keys) and/or [Gemini API key](https://aistudio.google.com/app/apikey)
- Note that you can deactivate one of the 2 API calls if you don't want to try both
- Test the Workflow


--- Workflow: 1439_Telegram_Code_Create_Webhook.json ---
Name: N/A
Description: ### Add chat ID
Remember to set your actual ID to trigger automation from Telegram.

--- Workflow: 1440_HTTP_Executeworkflow_Automation_Webhook.json ---
Name: N/A
Description: ### ... or watch set up video [13 min]
[![Youtube Thumbnail](https://cflobdhpqwnoisuctsoc.supabase.co/storage/v1/object/public/my_storage/Youtube%20AI%20Agent%20Blur.png)](https://youtu.be/6RmLZS8Yl4E)


--- Workflow: 1441_Form_Automation_Triggered.json ---
Name: Image to license plate number
Description: No description found in sticky notes.

--- Workflow: 1442_Noop_Stickynote_Automation_Triggered.json ---
Name: Extract personal data with a self-hosted LLM Mistral NeMo
Description: ## Update data source
When you change the data source, remember to update the `Prompt Source (User Message)` setting in the **Basic LLM Chain node**.

--- Workflow: 1443_Splitout_Extractfromfile_Automation_Triggered.json ---
Name: Extract spend details (template)
Description: # A. Get data
- Set up labels in Gmail
- Suggested using Gmail filters to move emails to labels automatically

--- Workflow: 1444_Extractfromfile_Converttofile_Automation_Webhook.json ---
Name: Extract text from PDF and image using Vertex AI (Gemini) into CSV
Description: ## How to extract PDF and image text into CSV using n8n (without manual data entry)

This workflow will extract text data from PDF and images, then store it as CSV.

[üí° You can read more about this workflow here](https://rumjahn.com/how-to-create-an-a-i-agent-to-analyze-matomo-analytics-using-n8n-for-free/)

--- Workflow: 1445_Manual_Stickynote_Automation_Webhook.json ---
Name: Extract Amazon Best Seller Electronic Information with Bright Data and Google Gemini
Description: ## LLM Usages

Google Gemini Flash Exp model is being used.

Information Extraction for building the structured data

--- Workflow: 1446_Code_Schedule_Automate_Scheduled.json ---
Name: My workflow 2
Description: ## Cron trigger
Google Trends update the RSS feed every 10 minutes. This will start wordflow 1 minute after. 

--- Workflow: 1447_HTTP_Schedule_Automation_Webhook.json ---
Name: URL Pinger
Description: No description found in sticky notes.

--- Workflow: 1448_Telegram_Stickynote_Automation_Triggered.json ---
Name: Play with Spotify from Telegram
Description: ## Telegram to Spotify 
Ask AI about a track with artist and song name or if you can't remember describe it and AI does it's thing.


--- Workflow: 1449_Manual_Webhook_Automate_Webhook.json ---
Name: NetSuite Rest API workflow
Description: No description found in sticky notes.

--- Workflow: 1450_Telegram_Automation_Webhook.json ---
Name: Coinmarketcap Price Agent
Description: No description found in sticky notes.

--- Workflow: 1451_Splitout_Schedule_Automation_Webhook.json ---
Name: Hugging Face  to Notion
Description: No description found in sticky notes.

--- Workflow: 1452_Telegram_Stickynote_Automate_Triggered.json ---
Name: Speech Support Workflow
Description: ## Dynamic System Prompting:

This node sets the AI's system prompt according to the user's request identified in the incoming message.

--- Workflow: 1453_Stopanderror_Code_Import_Triggered.json ---
Name: Load Prompts from Github Repo and auto populate n8n expressions
Description: # Set The variables in your prompt here

--- Workflow: 1454_Splitout_Schedule_Import_Webhook.json ---
Name: Fetch Squarespace Blog & Event Collections to Google Sheets  
Description: ## Change this node
Edit the HTTP Request URL to your Squarespace blog URL

eg: https://beyondspace.studio/blog


--- Workflow: 1455_Respondtowebhook_Form_Automation_Webhook.json ---
Name: N/A
Description: ### Set style prompt
Each Edit fields node after the Switch sets `stylePrompt`, used in huggingface node.

--- Workflow: 1456_Wait_HTTP_Automation_Webhook.json ---
Name: Flux Dev Image Generation Fal.ai
Description: ## Set Parameter Here 
set Image Prompt and related settings

--- Workflow: 1457_Manual_Stickynote_Process_Triggered.json ---
Name: [AI/LangChain] Output Parser 4
Description: ### Parser which defines the output format and which gets used to validate the output

--- Workflow: 1458_HTTP_Stickynote_Import_Webhook.json ---
Name: Optimise images uploaded to GDrive
Description: ## Automatically optimise images uploaded to Google drive folder
Each time an image is added to a google drive folder, this workflow will send it to tinypng.com to optimise the size and resave it to a google drive location of your choice.



--- Workflow: 1459_Splitout_Converttofile_Create_Webhook.json ---
Name: New OpenAI Image Generation
Description: ## [CLICK HERE to Watch Video](https://youtu.be/YmDezgolqzU?si=BgMjRm55-T_CYAs7)

OpenAI just dropped API access for their new image generation ‚Äî and it changes everything. In this quick walkthrough, I show you exactly how to integrate it with n8n using an HTTP request node. Learn how to send prompts, convert base64 to binary, and automate image handling. This is a big one. Don‚Äôt miss it.

üîó Official API Overview: https://openai.com/index/image-generation-api/
üîó API Reference ‚Äì Create Image: https://platform.openai.com/docs/api-reference/images/create

### *New:  Make.com scenario here: https://drive.google.com/file/d/1Uz-mA0LnUZ_tnUWBR2AAlVxs3LBlGKfk/view?usp=sharing


--- Workflow: 1460_Code_Schedule_Automation_Scheduled.json ---
Name: INSEE Enrichment for Agile CRM
Description: ### Enrich CRM data with data from French INSEE OpenDatabase API
This workflow takes all company entries from **Agile CRM** and enriches their data using the French [Insee Opendata API](https://portail-api.insee.fr/) (Free Access)

__This will update :__ 
1) Official Address of the company headquarters
2) Add government company id number (SIREN) in a Custom Field

--- Workflow: 1461_Code_Manual_Automation_Webhook.json ---
Name: YouTube Video Analyzer with AI
Description: Get a FREE API on youtube-transcript.io and insert the Authentication

--- Workflow: 1462_HTTP_Executeworkflow_Automation_Webhook.json ---
Name: [3/3] Anomaly detection tool (crops dataset)
Description: We are working here with crops dataset: 
Existing (so not anomalies) crops images in dataset are:
- 'pearl_millet(bajra)',
- 'tobacco-plant',
- 'cherry',
- 'cotton',
- 'banana',
- 'cucumber',
- 'maize',
- 'wheat',
- 'clove',
- 'jowar',
- 'olive-tree',
- 'soyabean',
- 'coffee-plant',
- 'rice',
- 'lemon',
- 'mustard-oil',
- 'vigna-radiati(mung)',
- 'coconut',
- 'gram',
- 'pineapple',
- 'sugarcane',
- 'sunflower',
- 'chilli',
- 'fox_nut(makhana)',
- 'jute',
- 'papaya',
- 'tea',
- 'cardamom',
- 'almond'


--- Workflow: 1463_Splitout_Code_Automate_Webhook.json ---
Name: ‚ö°üìΩÔ∏è Ultimate AI-Powered Chatbot for YouTube Summarization & Analysis
Description: ## ü§ñ AI Agent Chatbot for YouTube Videos

--- Workflow: 1464_HTTP_Stickynote_Automation_Webhook.json ---
Name: AI-Powered Research with Jina AI Deep Search
Description: 
# **üöÄ Developed by Leonard van Hemert**  

Thank you for using **FREE: Open Deep Research 2.0**! üéâ  

This workflow was created to **democratize AI-powered research** and make advanced **automated knowledge discovery** available to **everyone**, without **API restrictions** or **cost barriers**.  

If you find this useful, feel free to **connect with me on LinkedIn** and stay updated on my latest AI & automation projects!  

üîó **Follow me on LinkedIn**: [Leonard van Hemert](https://www.linkedin.com/in/leonard-van-hemert/)  

I truly appreciate the support from the **n8n community**, and I can‚Äôt wait to see how you use and improve this workflow! üöÄ  

Happy researching,  
**Leonard van Hemert** üí°

--- Workflow: 1465_Wait_Splitout_Create_Webhook.json ---
Name: Search LinkedIn companies, Score with AI and add them to Google Sheet CRM
Description: ## LinkedIn Company Search
This section initiates the workflow and searches for your target companies on LinkedIn using the Ghost Genius API.

You can filter and refine your search using keywords, company size, location, industry, or even whether the company has active job postings. Use the "Set Variables" node for it (this node also allows you to customize the AI Lead Scoring prompt).

Note that you can retrieve a maximum of 1000 companies per search (corresponding to 100 LinkedIn pages), so it's important not to exceed this number of results to avoid losing prospects.

Example: Let's say I want to target Growth Marketing Agencies with 11-50 employees. I do my search and see that there are 10,000 results. So I refine my search by using location to go country by country and retrieve all 10,000 results in several batches ranging from 500 to 1000 depending on the country.

Tips: To test the workflow or to see the number of results of your search, change the pagination parameter (Max Pages) in the "Search Companies" node. It will be displayed at the very top of the response JSON.

--- Workflow: 1466_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: TEMPLATE - Multi Methods API Endpoint
Description: #### Creation
Creates a new record

--- Workflow: 1467_Manual_Stickynote_Automation_Webhook.json ---
Name: Google Search Engine Results Page Extraction with Bright Data
Description: ## Bright Data Google Search SERP (Search Engine Results Page)

Deals with the Google Search using the Bright Data Web Scraper API.

The Information Extraction, Summarization and AI Agent are being used to demonstrate the usage of the N8N AI capabilities.

**Please make sure to Set the Google Search Query and update the Webhook Notification URL**

--- Workflow: 1468_Splitout_Code_Automation_Webhook.json ---
Name: Telegram channel to Readeck & Hoarder
Description: ## Readeck

--- Workflow: 1469_Wait_Splitout_Automation_Webhook.json ---
Name: Content to 9:16 Aspect Image Generator v1
Description: # AlexK1919 
![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)

#### I‚Äôm Alex, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.

### Example AirTable Base
https://airtable.com/appRDq3E42JNtruIP/shrnc9EzlxpCq7Vxe

### Link to my n8n Workflow Templates
https://n8n.io/creators/alexk1919

### Workflow Overview Video
https://www.youtube.com/@alexk1919_

### Products Used
[AirTable](https://airtable.com)
[OpenAI](https://openai.com/)
[Leonardo.ai](https://app.leonardo.ai/?via=alexk1919)

### About Me
https://beacons.ai/alexk1919


--- Workflow: 1470_Telegram_Code_Create_Webhook.json ---
Name: Generate Instagram Content from Top Trends with AI Image Generation
Description: ## All Credentials You Need
** Instagram Business Account Id
** Telegram Chat Id
** Rapid Api Key
** Replicate Token

--- Workflow: 1471_Splitout_Aggregate_Create_Triggered.json ---
Name: N/A
Description: ## Generate SEO Seed Keywords Using AI

This flow uses an AI node to generate Seed Keywords to focus SEO efforts on based on your ideal customer profile

**Outputs:** 
- List of 20 Seed Keywords


**Pre-requisites / Dependencies:**
- You know your ideal customer profile (ICP)
- An AI API account (either OpenAI or Anthropic recommended)

--- Workflow: 1472_Extractfromfile_Converttofile_Create_Triggered.json ---
Name: Generate SQL queries from schema only - AI-powered
Description: ## Run this part only once
This section:
* loads a list of all tables from the database hosted on [db4free](https://db4free.net/signup.php) 
* extracts the database schema for each table and adds the table name
* converts the schema into a binary JSON format
* saves the schema `./chinook_mysql.json` file locally

***Now you can use chat to "talk" to your data!*** üéâ

--- Workflow: 1473_HTTP_Respondtowebhook_Create_Webhook.json ---
Name: N/A
Description: ## Generate Text-to-Speech Using Elevenlabs via API
This workflow provides an API endpoint to generate speech from text using [Elevenlabs.io](https://elevenlabs.io/), a popular text-to-speech service.

### Step 1: Configure Custom Credentials in n8n
To set up your credentials in n8n, create a new custom authentication entry with the following JSON structure:
```json
{
 "headers": {
 "xi-api-key": "your-elevenlabs-api-key"
 }
}
```
Replace `"your-elevenlabs-api-key"` with your actual Elevenlabs API key.

### Step 2: Send a POST Request to the Webhook
Send a POST request to the workflow's webhook endpoint with these two parameters:
- `voice_id`: The ID of the voice from Elevenlabs that you want to use.
- `text`: The text you want to convert to speech.

This workflow has been a significant time-saver in my video production tasks. I hope it proves just as useful to you!

Happy automating! 
The n8Ninja

--- Workflow: 1474_Respondtowebhook_Stickynote_Create_Webhook.json ---
Name: Generate audio from text using OpenAI - text-to-speech Workflow
Description: This `Webhook` node triggers the workflow when it receives a POST request.

### 1. Test Mode:
* Use the test webhook URL
* Click the `Test workflow` button on the canvas. (In test mode, the webhook only works for one call after you click this button)

### 1. Production Mode:
* The workflow must be active for a **Production URL** to run successfully.
* You can activate the workflow using the toggle in the top-right of the editor.
* Note that unlike test URL calls, production URL calls aren't shown on the canvas (only in the executions list).

--- Workflow: 1475_Manual_Stickynote_Automation_Triggered.json ---
Name: N/A
Description: ### Get Color Channels
[Source: https://www.pinecone.io/learn/series/image-search/color-histograms/](https://www.pinecone.io/learn/series/image-search/color-histograms/)

--- Workflow: 1476_Respondtowebhook_Stickynote_Import_Webhook.json ---
Name: Get Airtable data in Obsidian Notes
Description: [![YouTube Video](https://img.youtube.com/vi/2PIdeTgsENo/0.jpg)](https://www.youtube.com/watch?v=2PIdeTgsENo)

--- Workflow: 1477_Webhook_Slack_Update_Webhook.json ---
Name: Get event triggered notifications / updates on preferred messaging channels with TwentyCRM
Description: **1. ‚òùÔ∏è Set up `On new TwentyCRM event` Trigger's url at webhook in TwentyCRM**

--- Workflow: 1478_Code_Todoist_Automate_Scheduled.json ---
Name: My workflow 4
Description: No description found in sticky notes.

--- Workflow: 1479_Gmail_Stickynote_Create_Triggered.json ---
Name: Gmail AI auto-responder: create draft replies to incoming emails
Description: ## When I receive an Email


--- Workflow: 1480_Googleanalytics_Code_Automation_Webhook.json ---
Name: Google analytics template
Description: ## Send Google analytics to A.I. and save results to baserow

This workflow will check for country views, page engagement and google search console results. It will take this week's data and compare it to last week's data.

[You can read more about this workflow here](https://rumjahn.com/how-i-used-a-i-to-be-an-seo-expert-and-analyzed-my-google-analytics-data-in-n8n-and-make-com/)

--- Workflow: 1481_HTTP_Form_Send_Webhook.json ---
Name: Send TTS (Text-to-speech) voice calls
Description: ## STEP 1
[Register here to ClickSend](https://clicksend.com/?u=586989) and obtain your API Key and 2 ‚Ç¨ of free credits

In the node "Send Voice" create a "Basic Auth" with the username you registered and the API Key provided as your password

--- Workflow: 1482_Telegram_Code_Create_Webhook.json ---
Name: Generate Instagram Content from Top Trends with AI Image Generation
Description: ## All Credentials You Need
**  Instagram Business Account Id
** Telegram Chat Id
**  Rapid Api Key
** Replicate Token

--- Workflow: 1483_Limit_Code_Automation_Webhook.json ---
Name: Linkedin Chrome Extensions
Description: ## Resolve Chrome Extensions which are tracked by Linkedin

**Linkedin tracks which Chrome extensions are installed in your browser.**  This workflow uses a huge JSON of chrome extension ids, extracted from Linkedin pages, and builds a pretty Google Sheet with the list of these extensions - with extension names. This workflow web scrapes Google to search for chrome extension id - and extracts the first search result.

1. Clone this Google Sheet template: https://docs.google.com/spreadsheets/d/1nVtoqx-wxRl6ckP9rBHSL3xiCURZ8pbyywvEor0VwOY/edit?gid=0#gid=0

2. Get API key for Google SERP API access here: https://rapidapi.com/restyler/api/serp-api1

3. Create n8n header auth for Google SERP API


Some context: https://www.linkedin.com/feed/update/urn:li:activity:7244984812497702912/

Follow the author: https://www.linkedin.com/in/anthony-sidashin/


--- Workflow: 1484_Wait_Code_Create_Webhook.json ---
Name: Motion-illustration Workflow Generated with Midjourney and Kling API
Description: ## Motion-illustration
This workflow is primarily designed to generate dynamic illustrations for content creators and social media professionals with APIs provided by PiAPI.

--- Workflow: 1485_Telegram_Stickynote_Automate_Triggered.json ---
Name: Telegram AI multi-format chatbot
Description: ## Receive and pre-process messages 


--- Workflow: 1486_Noop_Stickynote_Automation_Triggered.json ---
Name: Extract personal data with a self-hosted LLM Mistral NeMo
Description: ## Update data source
When you change the data source, remember to update the `Prompt Source (User Message)` setting in the **Basic LLM Chain node**.

--- Workflow: 1487_Telegram_Extractfromfile_Automate_Webhook.json ---
Name: HR & IT Helpdesk Chatbot with Audio Transcription
Description: ## 1. Download & Extract Internal Policy Documents
[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

Begin by importing the PDF documents that contain your internal policies and FAQs‚Äîthese will become the knowledge base for your Internal Helpdesk Assistant. For example, you can store a company handbook or IT/HR policy PDFs on a shared drive or cloud storage and reference a direct download link here.

In this demonstration, we'll use the **HTTP Request node** to fetch the PDF file from a given URL and then parse its text contents using the **Extract from File node**. Once extracted, these text chunks will be used to build the vector store that underpins your helpdesk chatbot‚Äôs responses.

[Example Employee Handbook with Policies](https://s3.amazonaws.com/scschoolfiles/656/employee_handbook_print_1.pdf)

--- Workflow: 1488_Extractfromfile_Form_Automation_Triggered.json ---
Name: HR Job Posting and Evaluation with AI
Description: ## Grab User Details and Update in Airtable


--- Workflow: 1489_Splitout_Code_Automation_Webhook.json ---
Name: HN Who is Hiring Scrape
Description: ## Go to https://hn.algolia.com
- filter by "Ask HN: Who is hiring?" (important with quotes for full match)
- sort by date
- Chrome Network Tab > find API call > click "Copy as cURL"
- n8n HTTP node -> import cURL and paste 
- I've set the API key as Header Auth so you will have to do the above yourself to make this work

--- Workflow: 1490_Telegram_Splitout_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1491_Linkedin_Wait_Create_Webhook.json ---
Name: Hacker News to Video Template - AlexK1919
Description: # Choose your data source 
## This can be swapped for any other data source of your choosing.

--- Workflow: 1492_Schedule_Twilio_Automation_Webhook.json ---
Name: N/A
Description: ## Step 6. Filter Open Enquiries from Airtable

### üí°Criteria For Follow Up Candidates
* No Scheduled Appointment
* No Request to STOP
* No Previous Follow-up in Past 3 days
* Follow-up is less than 3 times

--- Workflow: 1493_Extractfromfile_Form_Automation_Webhook.json ---
Name: N/A
Description: ## 1. Application Form To Upload CV
[Learn more the Form Trigger node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/)

Our application process starts with a simple file upload to get the applicant's CV for processing.

--- Workflow: 1494_Microsofttodo_Webhook_Automation_Webhook.json ---
Name: MiniBear Webhook
Description: **Webhook from Line**

















You need to set-up this webhook at Line Manager or Line Developer Console

You'll need to copy Webhook URL from this node to put in Line Console

Also, don't forget to remove 'test' part when going for production

https://developers.line.biz/en/docs/messaging-api/receiving-messages/


--- Workflow: 1495_Splitout_Limit_Import_Webhook.json ---
Name: Insert and retrieve documents
Description: ## Scrape latest Paul Graham essays

--- Workflow: 1496_Telegram_Webhook_Automation_Webhook.json ---
Name: üîçüõ†Ô∏èPerplexity Researcher to HTML Web Page
Description: ## Create Article from Perplexity Research

--- Workflow: 1497_Automation.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1498_Stopanderror_Limit_Sync_Webhook.json ---
Name: Notion to Clockify Sync Template
Description: # Sync Clients

--- Workflow: 1499_Splitout_Filter_Monitor_Triggered.json ---
Name: n8napi-check-workflow-which-model-is-using
Description: ## Change to your n8n domain here



--- Workflow: 1500_Code_Webhook_Automation_Webhook.json ---
Name: puq-docker-minio-deploy
Description: ## üëã Welcome to PUQ Docker MinIO deploy!
## Template for MinIO: API Backend for WHMCS/WISECP by PUQcloud

v.1

This is an n8n template that creates an API backend for the WHMCS/WISECP module developed by PUQcloud.

## Setup Instructions

### 1. Configure API Webhook and SSH Access
- Create a Credential (Basic Auth) for the **Webhook API Block** in n8n.
- Create a Credential for **SSH access** to a server with Docker installed (**SSH Block**).

### 2. Modify Template Parameters
In the **Parameters** block of the template, update the following settings:

- `server_domain` ‚Äì must match the domain of the WHMCS/WISECP Docker server.
- `clients_dir` ‚Äì directory where user data related to Docker and disks will be stored.
- `mount_dir` ‚Äì default mount point for the container disk (recommended not to change).

**Do not modify** the following technical parameters:

- `screen_left`
- `screen_right`

## Additional Resources
- Full documentation: [https://doc.puq.info/books/docker-minio-whmcs-module](https://doc.puq.info/books/docker-minio-whmcs-module)
- WHMCS module: [https://puqcloud.com/whmcs-module-docker-minio.php](https://puqcloud.com/whmcs-module-docker-minio.php)



--- Workflow: 1501_Extractfromfile_Form_Automate_Triggered.json ---
Name: Automated Resume Review System Using OpenAI + Google Sheets
Description: ## Submission, Saving to Google Drive & Extraction

**Captures user info from the form.**
**Uploads resume to Google Drive.**
**Extracts data from the PDF (resume).**

--- Workflow: 1502_Webhook_Slack_Automate_Webhook.json ---
Name: N/A
Description: ![Imgur](https://i.imgur.com/iKyMV0N.png)
## Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). The second node responds to the periodic security challenges that Slack sends to ensure the N8n webhook is still active. 

--- Workflow: 1503_Manual_HTTP_Export_Webhook.json ---
Name: Export Zammad Objects Users, Roles, Groups and Organizations to Excel
Description: No description found in sticky notes.

--- Workflow: 1504_Stopanderror_Code_Automation_Webhook.json ---
Name: 2. Refresh Pipedrive tokens
Description: ## Step 2:
Create a workflow to refresh your access token when the access token requires a refresh.

--- Workflow: 1505_Manual_Stickynote_Send_Webhook.json ---
Name: [hiroshidigital.com] Send Message In Larksuite
Description: You can get app_id and app_secret in Lark here: https://open.larksuite.com/

--- Workflow: 1506_Aggregate_Telegram_Automation_Triggered.json ---
Name: N/A
Description: 
# N8N Workflow: AI-Enhanced Image Processing and Communication

## Description:
This n8n workflow integrates artificial intelligence to optimize image processing tasks and streamline communication via Telegram. Each node in the workflow provides specific benefits that contribute to enhancing user engagement and facilitating efficient communication.

## Title:
AI-Enhanced Image Processing and Communication Workflow with n8n

## Node Names and Benefits:


3. Set up the necessary credentials for the Telegram account and OpenAI API.
4. Configure each node in the workflow to maximize its benefits and optimize user engagement.
5. Run the workflow to leverage AI-enhanced image processing and communication capabilities for enhanced user interactions.
6. Monitor the workflow execution for any errors or issues that may arise during processing.
7. Customize the workflow nodes, parameters, or AI models to align with specific business objectives and user engagement strategies.
8. Embrace the power of AI-driven image processing and interactive communication on Telegram to elevate user engagement and satisfaction levels.

## Elevate your user engagement strategies with AI-powered image processing and seamless communication on Telegram using n8n!


--- Workflow: 1507_Stickynote_Executeworkflow_Automation_Webhook.json ---
Name: CoinMarketCap_DEXScan_Agent_Tool
Description: # üìä CoinMarketCap DEXScan AI Agent Tool (n8n Workflow)

## üß† Multi-Agent System: DEXScan Agent
This workflow powers **DEX intelligence capabilities** in the CoinMarketCap AI Analyst ecosystem. It enables deep insights into **liquidity**, **volume**, **spot pairs**, and **trading activity** across decentralized exchanges.

---

### üîß Connected DEX Tools:
1. **DEX Metadata** ‚Äì `/v4/dex/listings/info`
2. **DEX Networks List** ‚Äì `/v4/dex/networks/list`
3. **DEX Listings Quotes** ‚Äì `/v4/dex/listings/quotes`
4. **DEX Pair Quotes Latest** ‚Äì `/v4/dex/pairs/quotes/latest`
5. **DEX OHLCV Historical** ‚Äì `/v4/dex/pairs/ohlcv/historical`
6. **DEX OHLCV Latest** ‚Äì `/v4/dex/pairs/ohlcv/latest`
7. **DEX Trades Latest** ‚Äì `/v4/dex/pairs/trade/latest`
8. **DEX Spot Pairs Latest** ‚Äì `/v4/dex/spot-pairs/latest`

---

## ‚úÖ Key Capabilities:
- View real-time DEX liquidity and 24h trading volume
- Retrieve metadata (logos, URLs, launch info) for decentralized exchanges
- Track market pair quotes, liquidity, and spot pair data
- Monitor historical OHLCV data for technical analysis
- Identify recent trades and pair-specific activity

---

## üß† Agent Structure
### **1Ô∏è‚É£ DEXScan Brain**
- **Type**: GPT-4o Mini
- **Function**: Understands queries, routes tools, summarizes results

### **2Ô∏è‚É£ Session Memory**
- Maintains contextual state via memory buffer

### **3Ô∏è‚É£ Tool Triggers**
- **HTTP Tools:** Each CMC endpoint is mapped to one of 8 tool nodes with rich parameter control

---

## ‚ö†Ô∏è Notes:
- Use **`contract_address`**, **`network_slug`**, or **`network_id`** in nearly all endpoints
- Avoid using both `convert` and `convert_id` in the same query
- Be cautious of high-volume requests which may exceed token limits (e.g., when requesting OHLCV for many intervals)

---

üìé API responses are designed for fine-tuned filtering. You can retrieve:
- Top trading pairs on Polygon
- Volume-based DEX rankings
- Historical trade data for a Uniswap pair
- Real-time liquidity on Solana spot pairs

--- Workflow: 1508_Wait_Manual_Automation_Webhook.json ---
Name: Indeed Company Data Scraper & Summarization with Airtable, Bright Data and Google Gemini
Description: ## Note

Deals with the Company web scraping by utilizing Bright Data Web Unlocker Product.

The Basic LLM Chain, Summarization and AI Agent are being used to demonstrate the usage of the n8n AI capabilities.

**Please make sure to connect to Airtable with the Base Table as "Indeed" and the default Table1 filled with the indeed links to scrape. 

Also make sure to update the Webhook Notification URL**

--- Workflow: 1509_Stickynote_Automation_Webhook.json ---
Name: Integrating AI with Open-Meteo API for Enhanced Weather Forecasting
Description: ## Integrating AI with Open-Meteo API for Enhanced Weather Forecasting

## Use case

### Workshop

We are using this workflow in our workshops to teach how to use Tools a.k.a functions with artificial intelligence. In this specific case, we will use a generic "AI Agent" node to illustrate that it could use other models from different data providers.

### Enhanced Weather Forecasting

In this small example, it's easy to demonstrate how to obtain weather forecast results from the Open-Meteo site to accurately display the upcoming days.

This can be used to plan travel decisions, for example.

## What this workflow does

1. We will make an HTTP request to find out the geographic coordinates of a city.
2. Then, we will make other HTTP requests to discover the weather for the upcoming days.

In this workshop, we demonstrate that the AI will be able to determine which tool to call first‚Äîit will first call the geolocation tool and then the weather forecast tool. All of this within a single client conversation call.


## Setup

Insert an OpenAI Key and activate the workflow.

by Davi Saranszky Mesquita
https://www.linkedin.com/in/mesquitadavi/

--- Workflow: 1510_Datetime_Code_Automation_Webhook.json ---
Name: Intelligent Web Query and Semantic Re-Ranking Flow
Description: 
## Step 1. Set Up a Free Brave Web Search Query API Key

To attain the free web search API tier from Brave, follow these steps:

1. Visit api.search.brave.com
2. Create an account
3. Subscribe to the free plan (no charge)
4. Navigate to the API Keys section
5. Generate an API key. For the subscription type, choose "Free".
6. Go to the "Query" Nodes and change the "X-Subscription-Token" value to your API Key.


--- Workflow: 1511_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ### AI agent that can scrape webpages
Remake of https://n8n.io/workflows/2006-ai-agent-that-can-scrape-webpages/

**Changes**:
* Replaces Execute Workflow Tool and Subworkflow
* Replaces Response Formatting

--- Workflow: 1512_Wait_Splitout_Process_Webhook.json ---
Name: N/A
Description: ## 2. Advanced PDF Processing with LlamaParse
[Read more about using HTTP Requests](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)

LlamaIndex's LlamaCloud is a cloud-based service that allows you to upload,
parse, and index document. LlamaParse is a tool offered by LlamaCloud
to parse for complex PDFs with embedded objects ie PDF Tables and figures.

At time of writing, you can parse 1000 pdfs/day with LlamaCloud's free plan
by signing up at [https://cloud.llamaindex.ai/](https://cloud.llamaindex.ai/?ref=n8n.io).

--- Workflow: 1513_Wait_Splitout_Process_Webhook.json ---
Name: N/A
Description: ## 2. Advanced PDF Processing with LlamaParse
[Read more about using HTTP Requests](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/)

LlamaIndex's LlamaCloud is a cloud-based service that allows you to upload,
parse, and index document. LlamaParse is a tool offered by LlamaCloud
to parse for complex PDFs with embedded objects ie PDF Tables and figures.

At time of writing, you can parse 1000 pdfs/day with LlamaCloud's free plan
by signing up at [https://cloud.llamaindex.ai/](https://cloud.llamaindex.ai/?ref=n8n.io).

--- Workflow: 1514_Code_HTTP_Create_Webhook.json ---
Name: Dynamically create tables in Airtable for your Webflow form submissions
Description: # Manage Webflow form submissions in Airtable
## Full guide with video
[Full guide with video here](https://blog.kreonovo.co.za/create-tables-in-airtable-with-webflow-form-submissions/)

his automation workflow will dynamically create tables in an Airtable base for each of your Webflow Site Forms. Then, every form submission will be added as a record in those tables.

## Getting started
1. Create Webflow credential using API V1 Token
2. Create a Personal Access Token for Airtable
3. Connect credentials (please look at the notes to ensure the correct nodes are connected)

That's it! You do not need to add any custom code to your Webflow forms or site.

The name of your forms in the form settings section of the Designer in Webflow will be used to create the Airtable tables. This workflow will automatically do this for you.


--- Workflow: 1515_Telegram_Stickynote_Send_Triggered.json ---
Name: Translate Telegram audio messages with AI (55 supported languages) v1
Description: ## Translation

- Converts from speech to text.

- Translates the language from the native language to translated language (as specified in settings node)



--- Workflow: 1516_Manual_Stickynote_Send_Webhook.json ---
Name: Email verification with Icypeas (single)
Description: ## Email verification with Icypeas (single)

This workflow demonstrates how to perform an email verification using Icypeas. Visit https://icypeas.com to create your account.




--- Workflow: 1517_Manual_Code_Automation_Webhook.json ---
Name: Perform a domain search (single) with Icypeas
Description: ## Perform a domain search (single) with Icypeas

This workflow demonstrates how to perform a domain scan using Icypeas. Visit https://icypeas.com to create your account.




--- Workflow: 1518_Code_Manual_Process_Webhook.json ---
Name: Convert image from jpg/png to webp
Description: ## Convert image from jpg/png to webp

This workflow automates the process of converting images from **JPG/PNG** format to **WEBP** using the **APYHub API**. It retrieves image URLs from a **Google Sheet**, converts the images, and uploads the converted files to **Google Drive**. 

This workflow is a powerful tool for automating image conversion tasks, saving time and ensuring that images are efficiently converted and stored in the desired format.

--- Workflow: 1519_HTTP_Stickynote_Automation_Webhook.json ---
Name: üêãDeepSeek V3 Chat & R1 Reasoning Quick Start
Description: ## DeepSeek using HTTP Request
### DeepSeek Reasoner R1
https://api-docs.deepseek.com/
Raw Body

--- Workflow: 1520_HTTP_Respondtowebhook_Automation_Webhook.json ---
Name: YouTube Video Transcriber
Description: ## Entry Point

The workflow entry point is the  node chat message.

--- Workflow: 1521_Whatsapp_Stickynote_Automation_Webhook.json ---
Name: AI Customer-Support Assistant ¬∑ WhatsApp Ready ¬∑ Works for Any Business
Description: # Step by Step Setup Guide

### **The technology that powers this AI Agent‚Äîcontinuously crawling, extracting, and generating answers‚Äîincurs real operating costs to stay online.**
### **That‚Äôs why the workflow requires an active membership, priced at only **\$29 per month**. Comparable AI-support platforms charge **\$150 ‚Äì \$500 each month**, so with this template you either save a large chunk of that expense for your own business or earn the same amount by reselling the chatbot to clients‚Äîwhile paying just \$29 yourself. *And because the bot pulls fresh information from the site in real time, you never have to ‚Äúre-train‚Äù a model, saving you even more time and money.***

 **Activate your membership here:** [https://lemolex.gumroad.com/l/ejsnx](https://lemolex.gumroad.com/l/ejsnx)

### Let's start setting this up step by step:
*Total hands-on time: ‚âà 15 minutes*

1. Activate the tools with the membership generated key: 
- Go to the membership link to get your key.
- Copy the key (e.g 6F0E4C97-B72A4E69-A11BF6C4-AF123456) and paste it in the body parameters of list_links and get_page (tools):
*Name: auth-token*
*Value:  6F0E4C97-B72A4E69-A11BF6C4-AF123456* **(example)**

2. Customize for Your Company:
- Copy the Root URL of your company's website (Home Page).
- Open the AI Agent node and inside the `System Message`, change the following values:
[Company Name] with your company name (e.g [Company Name] -> Facebook)
[https://www.your-company-url.com] with your company Root URL that you copied before.
Check for these 2 values along the entire text.
- Go back to the tools list_links and get_page and paste the Root URL inside the body parameters, specifically:
*Name: url*
*Value: https://www.your-company-url.com **(e.g https://www.facebook.com)**

3. Connect your credentials:
- Go to the OpenAI Chat Model node and connect your OpenAI credentials.
- Go to the Postgres Users Memory node and connect your Supabase credentials. A tutorial for this: https://youtu.be/6w5f_jsPYSQ?si=MPdXYUjxv3fghQPj&t=105 (Minute 1:45 to 5:00)
- Go to the WhatsApp nodes "WhatsApp Trigger", "Send Pre-approved Template Message to Reopen the Conversation" and "Send AI Agent's Answer" to connect your credentials. A tutorial for this: https://youtu.be/ZrhTQle55LQ?si=MO_leooogO9KchCV
- Go to the "Send Pre-approved Template Message to Reopen the Conversation" and select the template message under the "Template" parameter.
***If you don't want to use this feature (not recommended) delete the nodes "24-hour window check", "If" and "Send Pre-approved Template Message to Reopen the Conversation". Then connect the AI Agent node to the "cleanAnswer" node.***


### **You are ready**

--- Workflow: 1522_Telegram_Schedule_Send_Webhook.json ---
Name: Template - SSL Expiry Alert System
Description: Uses SSL-Checker.io to verify the SSL certificate of each URL. Fetches details like the host, validity period, and days remaining until expiry.

--- Workflow: 1523_Datetime_Code_Automation_Scheduled.json ---
Name: Daylight Saving Time Notification
Description: ## How it works
- check list of timezones
- check if any timezone switches from/to Daylight Saving Time
- notify on Slack

## Remember to set up
- Add timezones to "Timezones List"
- Slack notification channel


--- Workflow: 1524_Schedule_Manual_Automation_Scheduled.json ---
Name: Retry Execution Hourly
Description: - ## check for failed executions hourly.
- ## filter out those that have successful reexecution ids.
- ## log into n8n and get the session ids.
- ## retry the executions.

- h


--- Workflow: 1525_Webhook_Telegram_Create_Webhook.json ---
Name: Send Telegram Alerts for New WooCommerce Orders
Description: ## ‚öôÔ∏è Setup Instructions

### 1. üõí **Configure WooCommerce Webhook**
- Navigate to **WooCommerce ‚û°Ô∏è Settings ‚û°Ô∏è Advanced ‚û°Ô∏è Webhooks** in your WordPress dashboard.
- Click on ‚ûï **Add Webhook**.
- Set the **Status** to **Active**.
- Choose **Topic**: **Order updated**.
- Paste the **Webhook URL** from the üîó Webhook node in this workflow into the **Delivery URL** field.
- Click üíæ **Save Webhook**.

### 2. ü§ñ **Create a Telegram Bot**
- Open **Telegram** and start a chat with **@BotFather**.
- Send the command **/newbot** and follow the instructions to create your bot.
- Copy the **API Token** provided by **BotFather**.

### 3. üîë **Set Up Telegram Credentials in n8n**
- In **n8n**, go to **Credentials**.
- Click ‚ûï **Create** and select **Telegram Bot**.
- Paste the **API Token** you copied earlier.
- **Save** the credentials.

### 4. ‚úèÔ∏è **Configure the Telegram Node**
- Open the üì® **Send Order Notification to Telegram** node.
- Select your **Telegram credentials**.
- Enter your **Chat ID** where you want to receive notifications.  
  **Tip**: Use **@userinfobot** in Telegram to find your **Chat ID**.

### 5. üöÄ **Activate and Test the Workflow**
- Ensure the workflow is üü¢ **Active**.
- Place a new order in your **WooCommerce store**.
- Update the order status to **"Processing"**.
- You should receive a **Telegram notification** with the **order details**!

## üí° Notes
- **Customize the message format** in the üñãÔ∏è **Design Message Template** node to include additional order details if needed.


--- Workflow: 1526_Mautic_Webhook_Automation_Webhook.json ---
Name: Shopify + Mautic
Description: ## Webhook Validation
We use the same key shared with Mautic to hash the incoming request. If the computed hash is identical to the one delivered the request is valid and can be processed

--- Workflow: 1527_Limit_Schedule_Automation_Scheduled.json ---
Name: RAG on living data
Description: ## Switch trigger (optional)
If you are on the cloud plan, consider switching to the Notion Trigger Node instead, to save on executions.

--- Workflow: 1528_Manual_Gmail_Send_Triggered.json ---
Name: Summarize Google Drive Documents with Mistral AI and Send via Gmail
Description: No description found in sticky notes.

--- Workflow: 1529_Googleanalytics_Code_Automation_Webhook.json ---
Name: Google analytics template
Description: ## Send Google analytics to A.I. and save results to baserow

This workflow will check for country views, page engagement and google search console results. It will take this week's data and compare it to last week's data.

[You can read more about this workflow here](https://rumjahn.com/how-i-used-a-i-to-be-an-seo-expert-and-analyzed-my-google-analytics-data-in-n8n-and-make-com/)

--- Workflow: 1530_HTTP_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ![n8n](https://i.imgur.com/lKnBNnH.png)
## Receive Query from Parent Workflow
This node receives input from the AI Agent in the top level workflow where it passes just the Slack Message directly to this workflow.

--- Workflow: 1531_Splitout_Comparedatasets_Sync_Webhook.json ---
Name: Entra User to Zammad User Sync
Description: ## Select Entra Users in a named Entra Group that should be synced to Zammad





--- Workflow: 1532_Manual_Wait_Automation_Webhook.json ---
Name: (Not published) Three-View Orthographic Projection to Dynamic Video Conversion
Description: No description found in sticky notes.

--- Workflow: 1533_Telegram_Splitout_Automation_Webhook.json ---
Name: Summarize YouTube Videos & Chat About Content with GPT-4o-mini via Telegram
Description: ## Get a video URL
Get video url via webhook or message

For this I recommend using a shortcut 
if you are using apple. 
This allows you to share a video
directly to n8n via webhook


--- Workflow: 1534_Stickynote_Googlecalendartool_Automation_Triggered.json ---
Name: Personal Assistant MCP server
Description: # Calendar nodes

You could order your agent to create a new event in your Google Calendar, find a specific event, get multiple events or update an event's details. 

**The true power of these nodes regarding Email, CRM and Calendar remains in combining multiple into one set of instructions**.

## Examples:

- Find the contact for Jhon for A. Corp and send him an email asking saying that you have scheduled the meeting for next Wednesday at 9AM. Draft an email to remind him of the details and the topic of discussion being the weekly update call and the main company bottlenecks.
- Update the contact details for Jhon since he changed his email and company to B corp and john[at]bcorpfakeemail[dot]com and please update me about my upcoming meetings with him next month.
- Send me a summary for all my meetings today. Draft one email for each different person that I'll meet with today, reminding them about today's meeting


--- Workflow: 1535_HTTP_Form_Automate_Webhook.json ---
Name: üí•üõ†Ô∏èAutomate Blog Content Creation with GPT-4, Perplexity & WordPress
Description: ## Perplexity Section
üåê Calls Perplexity API to get fresh research based on a form input.




--- Workflow: 1536_Rssfeedread_Extractfromfile_Automation_Webhook.json ---
Name: YouTube Videos with AI Summaries on Discord
Description: ### Summarise Your YouTube Videos with AI for Discord

üìΩÔ∏è [Watch the Video Tutorial](https://mrc.fm/ai2d)

* Add your [YouTube channel ID](https://www.youtube.com/account_advanced) to the URL in the first node: `https://www.youtube.com/feeds/videos.xml?channel_id=YOUR_CHANNEL_ID`.

* Ensure authorization with the YouTube channel that you want to download captions from.

--- Workflow: 1537_Form_GoogleSheets_Automation_Triggered.json ---
Name: Contact Form Text Classifier for eCommerce
Description: ## Important notes

This very simple workflow is ideal for eCommerce businesses or customer support teams looking to automate and streamline the handling of contact form submissions.

- It is possible to hook any external form such as CF7 for Wordpress through a webhook
- It is possible to send the email through other providers by replacing them with the relative nodes (Gmail, Outlook....)
- It is possible to change the collection database with other tools

--- Workflow: 1538_HTTP_Googlecalendartool_Automation_Webhook.json ---
Name: LINE Assistant with Google Calendar and Gmail Integration
Description: No description found in sticky notes.

--- Workflow: 1539_Telegram_Splitout_Automation_Triggered.json ---
Name: AI Document Assistant via Telegram + Supabase
Description: ‚úÖ Scenario 2 ‚Äì Document Upload and Embedding

Flow for downloading a document sent via Telegram, extracting its text, generating embeddings, and inserting them into Supabase Vector Store.

--- Workflow: 1540_Markdown_Stickynote_Automation_Webhook.json ---
Name: Airtable markdown to html
Description: # Tutorial
[Youtube video](https://www.youtube.com/watch?v=PAoxZjICd7o)

--- Workflow: 1541_Webhook_Code_Create_Webhook.json ---
Name: Notify_user_in_Slack_of_quarantined_email_and_create_Jira_ticket_if_opened
Description: ![Sublime Security](https://i.imgur.com/DfXJLIw.png)
# Workflow Overview

This workflow is initiated by `Sublime Security` whenever an inbound email undergoes scanning and triggers an alert.

In the event that Sublime Security is set up to automatically quarantine the email, this workflow will make an effort to inform the recipient through Slack. To accomplish this, it will utilize the recipient's mailbox address to search for their corresponding Slack username.

If the flagged email has already been opened, this workflow will additionally create a Jira ticket to manage the incident.

## **HTTP Request Node Requirements**
1. Create a rule in Sublime Security which has [auto-quarantine enabled](https://docs.sublimesecurity.com/docs/quarantine).
2. [Create a webhook](https://docs.sublimesecurity.com/docs/webhooks) in Sublime which will send an alert to the `Receive Sublime Security Alert` node whenever a selected rule is triggered.

## **Credentials**
- Sublime Security: Find your API key for [Sublime Security](https://docs.sublimesecurity.com/reference/authentication#create-an-api-key) and save it as an n8n credential with Header Auth in the format `Authorization: Bearer YOUR-API-KEY`.

- Slack: Provide credentials for a Slack app that has access to `users:read.email` and `im:write` scopes.


--- Workflow: 1542_Splitout_HTTP_Create_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1543_Manual_Openai_Automation_Triggered.json ---
Name: Summarize Google Sheets form feedback via OpenAI's GPT-4
Description: ### 1. Create a Google Sheet document
* This tutorial uses Google Sheet document connected to Google Forms, but a standalone Sheet document will work too
* Adapt initial trigger to your needs: run manually or at some time intervals

[Link to the Google Sheets template](https://docs.google.com/spreadsheets/d/1Kcr1oF_RrfNQJczmJDpwClOSYpvSnwbeX-_pdUo91-I/edit?usp=sharing)

--- Workflow: 1544_Aggregate_Schedule_Send_Scheduled.json ---
Name: Email Summary Agent
Description: - Starts the workflow every day at 7 AM.
- Adjust the time if you want the workflow to run at a different hour.

--- Workflow: 1545_Manual_Code_Automation_Triggered.json ---
Name: pdf to text
Description: No description found in sticky notes.

--- Workflow: 1546_Manual_Splitout_Automation_Webhook.json ---
Name: Scrape Latest 20 TechCrunch Articles
Description: No description found in sticky notes.

--- Workflow: 1547_Manual_HTTP_Automation_Webhook.json ---
Name: Merge PDFs
Description: No description found in sticky notes.

--- Workflow: 1548_Splitout_Code_Automation_Webhook.json ---
Name: Make OpenAI Citation for File Retrieval RAG
Description: ## Within N8N, there will be a chat button to test

--- Workflow: 1549_Wait_Dropbox_Automation_Webhook.json ---
Name: N/A
Description: # Adobe API Wrapper

See Adobe documentation:
- https://developer.adobe.com/document-services/docs/overview/pdf-services-api/howtos/
- https://developer.adobe.com/document-services/docs/overview/pdf-extract-api/gettingstarted/

In short, this workflow does the following steps :

- Authentication
- Upload an asset (pdf) to adobe
- Wait for the asset to be processed by Adobe
- Download the result

## Credential

Credentials are not "predefined" and you'll have to create 2 custom credentials, detailed in the workflow.

## Result

The result will depend on the transformation requested. It could be 1 of various files (json, zip...) accessible via download URL returned by the workflow.

Workflow can be tested with a PDF filed fetched with Dorpbox for example or any storage provider. 

--- Workflow: 1550_Wordpress_Manual_Automation_Webhook.json ---
Name: The Ultimate Guide to Optimize WordPress Blog Posts with AI
Description: Fetches the context of the article you want to generate via AI

--- Workflow: 1551_Mondaycom_Schedule_Send_Scheduled.json ---
Name: Microsoft Outlook AI Email Assistant
Description: # Microsoft Outlook AI Email Assistant

--- Workflow: 1552_Manual_Summarize_Automation_Triggered.json ---
Name: SearchApi Youtube Video Summary
Description: ## Youtube Video Summary
Given a **video_id** from Youtube, we concatenate the data and pass it to a summarization chain. To run this workflow, you need to have the credentials for SearchApi.io and some LLM provider.

--- Workflow: 1553_Mondaycom_Splitout_Automation_Webhook.json ---
Name: TEMPLATES
Description: No description found in sticky notes.

--- Workflow: 1554_Form_GoogleSheets_Automation_Triggered.json ---
Name: Contact Form Text Classifier for eCommerce
Description: ## Important notes

This very simple workflow is ideal for eCommerce businesses or customer support teams looking to automate and streamline the handling of contact form submissions.

- It is possible to hook any external form such as CF7 for Wordpress through a webhook
- It is possible to send the email through other providers by replacing them with the relative nodes (Gmail, Outlook....)
- It is possible to change the collection database with other tools

--- Workflow: 1555_Mongodbtool_Stickynote_Automation_Triggered.json ---
Name: MongoDB Agent
Description: ## AI Agent powered by OpenAI and MongoDB 

This flow is designed to work as an AI autonomous agent that can get chat messages, query data from MongoDB using the aggregation framework.

Following by augmenting the results from the sample movies collection and allowing storing my favorite movies back to the database using an "insert" flow. 

--- Workflow: 1556_Splitout_Code_Monitor_Scheduled.json ---
Name: N/A
Description: # Monthly Spotify Track Archiving and Playlist Classification

This n8n workflow allows you to automatically archive your monthly Spotify liked tracks in a Google Sheet, along with playlist details and descriptions. Based on this data, Claude 3.5 is used to classify each track into multiple playlists and add them in bulk.

## Who is this template for?
This workflow template is perfect for Spotify users who want to systematically archive their listening history and organize their tracks into custom playlists.

## What problem does this workflow solve?
It automates the monthly process of tracking, storing, and categorizing Spotify tracks into relevant playlists, helping users maintain well-organized music collections and keep a historical record of their listening habits.

## Workflow Overview
- **Trigger Options**: Can be initiated manually or on a set schedule.
- **Spotify Playlists Retrieval**: Fetches the current playlists and filters them by owner.
- **Track Details Collection**: Retrieves information such as track ID and popularity from the user‚Äôs library.
- **Audio Features Fetching**: Uses Spotify's API to get audio features for each track.
- **Data Merging**: Combines track information with their audio features.
- **Duplicate Checking**: Filters out tracks that have already been logged in Google Sheets.
- **Data Logging**: Archives new tracks into a Google Sheet.
- **AI Classification**: Uses an AI model to classify tracks into suitable playlists.
- **Playlist Updates**: Adds classified tracks to the corresponding playlists.

## Setup Instructions
1. **Credentials Setup**: 
 Make sure you have valid Spotify OAuth2 and Google Sheets access credentials.
2. **Trigger Configuration**: 
 Choose between manual or scheduled triggers to start the workflow.
3. **Google Sheets Preparation**: 
 Set up a Google Sheet with the necessary structure for logging track details.
4. **Spotify Playlists Setup**: 
 Have a diverse range of playlists and exhaustive description (see example) ready to accommodate different music genres and moods.

## Customization Options
- **Adjust Playlist Conditions**: 
 Modify the AI model‚Äôs classification criteria to align with your personal music preferences.
- **Enhance Track Analysis**: 
 Incorporate additional audio features or external data sources for more refined track categorization.
- **Personalize Data Logging**: 
 Customize which track attributes to log in Google Sheets based on your archival preferences.
- **Configure Scheduling**: 
 Set a preferred schedule for periodic track archiving, e.g., monthly or weekly.

## Cost Estimate 
For 300 tracks, the token usage amounts to approximately 60,000 tokens (58,000 for input and 2,000 for completion), costing around 20 cents with Claude 3.5 Sonnet (as of October 2024).

--- Workflow: 1557_Stickynote_Automation_Triggered.json ---
Name: üîêü¶ôü§ñ Private & Local Ollama Self-Hosted LLM Router
Description: # üîêü¶ôü§ñ Private & Local Ollama Self-Hosted + Dynamic LLM Router




--- Workflow: 1558_HTTP_Stickynote_Automate_Webhook.json ---
Name: ‚ú®üìäMulti-AI Agent Chatbot for Postgres/Supabase DB and QuickCharts + Tool Router
Description: ## ü§ñPrimary AI Manager Agent

--- Workflow: 1559_Splitout_Code_Automate_Webhook.json ---
Name: Automate PDF Image Extraction & Analysis with GPT-4o and Google Drive
Description: ###  Setup
1.Set up your credentials when you first open the workflow. You‚Äôll need accounts for OpenAI, Convert API, and Google Drive.
2.Convert API does not rate-limit your API, sometimes you may receive 503 service unavailable error.
Nevertheless, it doesn‚Äôt mean that you cannot convert your file. It simply means that you should retry the conversion in a few seconds.
3.Upload a PDF with images to Google Drive.
4.Remove unnecessary parts and retrieve image-related information.
5.Integrate image and image analysis information together.
6.Analyze each image using the OPENAI GPT-4o model.
7.Retrieve all image analysis content and image URL
8.Integrate multiple image URLs and analysis content
9.Output content to a .txt file.

Template was created in n8n v1.83.2

--- Workflow: 1560_Splitout_Code_Automation_Webhook.json ---
Name: [n8n] - Shopify Orders to D365 Business Central Sales Orders / Sales Invoices
Description: ## Shopify Line Locations
For multi-location Shopify accounts, these group of nodes get the active location id for each order line.

--- Workflow: 1561_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: Business WhatsApp AI RAG Chatbot
Description: # STEP 4

## RAG System













* *Respond* webhook receives various POST Requests from Meta regarding WhatsApp messages (user messages + status notifications)
* Check if the incoming JSON contains user message
* Echo back the text message to the user. This is a custom message, not a WhatsApp Business template message


--- Workflow: 1562_Filter_Manual_Import_Webhook.json ---
Name: Import CSV from URL to GoogleSheet
Description: ### Google API has rate-limits for read and write operations, that's why we take only a subset of the data

To import the whole dataset please add Split In Batches and a Wait node with a sufficient delay.

--- Workflow: 1563_Wait_Schedule_Monitor_Scheduled.json ---
Name: PG&E Daily Cost Tracker
Description: ## Heads up!
To get this workflow running correctly, please enter your PG&E credentials below

--- Workflow: 1564_Splitout_Manual_Create_Webhook.json ---
Name: Search LinkedIn companies and add them to Airtable CRM
Description: ## LinkedIn Company Search
This section initiates the workflow and searches for your target companies on LinkedIn using the Ghost Genius API. 

You can filter and refine your search using keywords, company size, location, industry, or even whether the company has active job postings. Use the "Set Variables" node for it.

Note that you can retrieve a maximum of 1000 companies per search (corresponding to 100 LinkedIn pages), so it's important not to exceed this number of results to avoid losing prospects.

**Example:** Let's say I want to target Growth Marketing Agencies with 11-50 employees. I do my search and see that there are 10,000 results. So I refine my search by using location to go country by country and retrieve all 10,000 results in several batches ranging from 500 to 1000 depending on the country.

**Tips:** To test the workflow or to see the number of results of your search, change the pagination parameter (Max Pages) in the "Search Companies" node. It will be displayed at the very top of the response JSON.

--- Workflow: 1565_Gmail_Stickynote_Create_Triggered.json ---
Name: Save New Sales Opportunities
Description: ## Summarize emails and save them as notes on sales opportunity in Odoo

Set up steps:
* Configure Google Cloud credentials with Gmail access
* Configure OpenAI credentials
* Configure Odoo credentials
 

--- Workflow: 1566_Wait_Splitout_Automation_Webhook.json ---
Name: N/A
Description: ## Try It Out!

### This n8n template takes a video and extracts frames from it which are used with a multimodal LLM to generate a script. The script is then passed to the same multimodal LLM to generate a voiceover clip.

This template was inspired by [Processing and narrating a video with GPT's visual capabilities and the TTS API](https://cookbook.openai.com/examples/gpt_with_vision_for_video_understanding)

* Video is downloaded using the HTTP node.
* Python code node is used to extract the frames using OpenCV.
* Loop node is used o batch the frames for the LLM to generate partial scripts.
* All partial scripts are combined to form the full script which is then sent to OpenAI to generate audio from it.
* The finished voiceover clip is uploaded to Google Drive.

Sample the finished product here: https://drive.google.com/file/d/1-XCoii0leGB2MffBMPpCZoxboVyeyeIX/view?usp=sharing


### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

--- Workflow: 1567_Stickynote_Automation_Webhook.json ---
Name: Integrating AI with Open-Meteo API for Enhanced Weather Forecasting
Description: ## Integrating AI with Open-Meteo API for Enhanced Weather Forecasting

## Use case

### Workshop

We are using this workflow in our workshops to teach how to use Tools a.k.a functions with artificial intelligence. In this specific case, we will use a generic "AI Agent" node to illustrate that it could use other models from different data providers.

### Enhanced Weather Forecasting

In this small example, it's easy to demonstrate how to obtain weather forecast results from the Open-Meteo site to accurately display the upcoming days.

This can be used to plan travel decisions, for example.

## What this workflow does

1. We will make an HTTP request to find out the geographic coordinates of a city.
2. Then, we will make other HTTP requests to discover the weather for the upcoming days.

In this workshop, we demonstrate that the AI will be able to determine which tool to call first‚Äîit will first call the geolocation tool and then the weather forecast tool. All of this within a single client conversation call.


## Setup

Insert an OpenAI Key and activate the workflow.

by Davi Saranszky Mesquita
https://www.linkedin.com/in/mesquitadavi/

--- Workflow: 1568_Stickynote_Notion_Automation_Triggered.json ---
Name: N/A
Description: # Generate new workflow version for specific notion db schema
Input a Notion database URL and get an AI Assistant chatbot workflow for it based on this template: https://n8n.io/workflows/2413-notion-knowledge-base-ai-assistant/

Project in notion: https://www.notion.so/n8n/Chat-with-notion-database-84eec91b74dd4e36ba97edda17c2c306

--- Workflow: 1569_Stickynote_Notion_Automation_Webhook.json ---
Name: N/A
Description: ## Notion knowledge base assistant [v1]
Built as part of the [30 Day AI Sprint](https://30dayaisprint.notion.site/) by [@maxtkacz](https://x.com/maxtkacz)


--- Workflow: 1570_Filter_Summarize_Automation_Triggered.json ---
Name: Prod: Notion to Vector Store - Dimension 768
Description: No description found in sticky notes.

--- Workflow: 1571_Markdown_Stickynote_Send.json ---
Name: Very simple Human in the loop system email with AI e IMAP
Description: Chain that summarizes the received email

--- Workflow: 1572_Wait_Schedule_Automate_Scheduled.json ---
Name: WhatsApp business bot
Description: ## Send a WhatsApp (WA) template message
Occurs after a user submitted a new Google form. If the user opted-in for WA notifications during the form submission, a template message will be sent via WhatsApp.

**IMPORTANT!**
1. You will need to create a new WA template message on the [Meta Business portal](https://business.facebook.com/wa/manage/message-templates/)
2. To send outgoing WA messages you'll need an Access Token and a WhatsApp Business Account ID. These can be obtained via Meta Developers Portal after creating an a new App. Please refer to this [n8n blog article on creating WhatsApp bots](https://blog.n8n.io/whatsapp-bot/#step-1-set-up-a-whatsapp-business-account)

--- Workflow: 1573_GoogleCalendar_Slack_Create_Webhook.json ---
Name: Generate google meet links in slack
Description: ### 1. Setup: Add a Slack App
**a.** Visit https://api.slack.com/apps, click on `New App` and choose a name and workspace.
**b.** Click on `OAuth & Permissions` and scroll down to Scopes -> Bot token Scopes
**c.** Add the `chat:write` scope & `chat:write.public`
**d.** Navigate to `Slash Commands` and click `Create New Command`
**e.** Use `/meet` as the command
**f.** Copy the production URL from the **Webhook** node into `Request URL` within your slash command
**g.** Add relevant description and usage hint
**h.** Go to `Install app` and click install
**i.** Don't worry about app distribution, that's only if you're trying to publish an app on the slack store

--- Workflow: 1574_Schedule_Youtube_Create_Scheduled.json ---
Name: Post New YouTube Videos to X
Description: üÜî Ensure you enter your YouTube Channel ID in the "Channel ID" field of this node. You can find your [Channel ID here](https://youtube.com/account_advanced).

--- Workflow: 1575_Telegramtool_Woocommercetool_Automate_Webhook.json ---
Name: WooCommerce AI Chatbot Workflow for Post-Sales Support
Description: # STEP 1

## Create Qdrant Collection
Change:
- QDRANTURL
- COLLECTION

--- Workflow: 1576_Aggregate_Stickynote_Automate_Webhook.json ---
Name: Ahrefs Keyword Research Workflow
Description: ## Keyword Query Extraction
This ai agent is important so that you always make sure for all queries you send, only the keyword phrase will be passed over to the API request node, and if you misspell any word, it will be corrected.

--- Workflow: 1577_Respondtowebhook_Stickynote_Create_Webhook.json ---
Name: Generate audio from text using OpenAI - text-to-speech Workflow
Description: This `Webhook` node triggers the workflow when it receives a POST request.

### 1. Test Mode:
* Use the test webhook URL
* Click the `Test workflow` button on the canvas. (In test mode, the webhook only works for one call after you click this button)

### 1. Production Mode:
* The workflow must be active for a **Production URL** to run successfully.
* You can activate the workflow using the toggle in the top-right of the editor.
* Note that unlike test URL calls, production URL calls aren't shown on the canvas (only in the executions list).

--- Workflow: 1578_Webhook_Code_Automation_Webhook.json ---
Name: Obsidian Notes Read Aloud: Available as a Podcast Feed
Description: ## Send Notes to Webhook
**Setup:**
- Install [Post Webhook Plugin](https://github.com/Masterb1234/obsidian-post-webhook/) in Obsidian
- Enter n8n Webhook URL and name in plugin settings

**Usage:**
- Select text or use full note
- Open Command Palette (Ctrl+P)
- Choose 'Send Note/Selection to [name]'
- Audio file appears in Podcast Feed and note

--- Workflow: 1579_Wait_Manual_Automation_Webhook.json ---
Name: Structured Bulk Data Extract with Bright Data Web Scraper
Description: ## Note

Deals with the Amazon web scraping by utilizing Bright Data Web Scraper Product.


**Please make sure to set the Bright Data 
 -> Dataset Id, Request URL and update the Webhook Notification URL**

Refer 
- https://brightdata.com/products/web-scraper/ai
- https://brightdata.com/products/web-scraper

--- Workflow: 1580_HTTP_Stickynote_Automate_Webhook.json ---
Name: Open Deep Research - AI-Powered Autonomous Research Workflow
Description: ## SerpAPI Setup Instructions
1. Obtain your API key from https://serpapi.com/manage-api-key.
2. Save your API key securely in n8n credentials (do not use plain text).

--- Workflow: 1581_Manual_Stickynote_Create_Triggered.json ---
Name: OpenAI Assistant workflow: uploa file, create an Assistant, chat with it!
Description: ## STEP 1. Get a Google Drive file and upload to OpenAI 

[Music Festival example document](https://docs.google.com/document/d/1_miLvjUQJ-E9bWgEBK87nHZre26-4Fz0RpfSfO548H0/edit?usp=sharing
)

[OpenAI API doc for the file upload](https://platform.openai.com/docs/api-reference/files)


--- Workflow: 1582_Summarize_Stickynote_Automation_Triggered.json ---
Name: OpenAI Assistant with custom n8n tools
Description: ## Sub-workflow: Return the capitals of fictional countries
It can either list the countries it knows about or return the capital of a specific country

--- Workflow: 1583_Readbinaryfiles_Code_Automation_Webhook.json ---
Name: OpenAI-model-examples
Description: ## The old way of using text completion and text edit
### Davinci model is 10 times more expensive then ChatGPT, consider switching to the new API:
https://openai.com/blog/introducing-chatgpt-and-whisper-apis


--- Workflow: 1584_Manual_HTTP_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1585_Splitout_Code_Update_Webhook.json ---
Name: Printify Automation - Update Title and Description - AlexK1919
Description: # AlexK1919 
![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)

#### I‚Äôm Alex Kim, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.


### About Me
https://beacons.ai/alexk1919

### Products Used 
[OpenAI](https://openai.com)
[Printify](https://printify.com/)

[Google Sheets Template for this Workflow](https://docs.google.com/spreadsheets/d/12Y7M5YSUW1e8UUOjupzctOrEtgMK-0Wb32zcVpNcfjk/edit?gid=0#gid=0)

--- Workflow: 1586_Code_Respondtowebhook_Automate_Webhook.json ---
Name: Youtube Discord Bot
Description: No description found in sticky notes.

--- Workflow: 1587_Executecommand_Localfile_Automation_Triggered.json ---
Name: N/A
Description: ## Step 1. Select the target folder
[Read more about local file trigger](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

In this workflow, we'll monitor a specific folder on disk that n8n has access to. Since we're using docker, we can either use the n8n volume or mount a folder from the host machine.

The local file trigger is useful to execute the workflow whenever changes are made to our target folder.

--- Workflow: 1588_Emailreadimap_Markdown_Send.json ---
Name: AI Email processing autoresponder with approval (Yes/No)
Description: # Main Flow

## Preliminary step:
Create a vector database on Qdrant and tokenize the documents useful for generating a response


## How it works
This workflow is designed to automate the process of handling incoming emails, summarizing their content, generating appropriate responses with RAG, and obtaining approval (YES/NO button) before sending replies.

This workflow is designed to handle general inquiries that come in via corporate email via IMAP and generate responses using RAG. You can quickly integrate Gmail and Outlook via the appropriate trigger nodes

--- Workflow: 1589_Wait_Webhook_Automation_Webhook.json ---
Name: FLUX-fill standalone
Description: # Deliver the editor with links to the images

--- Workflow: 1590_Extractfromfile_Converttofile_Create_Triggered.json ---
Name: Generate SQL queries from schema only - AI-powered
Description: ## Run this part only once
This section:
* loads a list of all tables from the database hosted on [db4free](https://db4free.net/signup.php) 
* extracts the database schema for each table and adds the table name
* converts the schema into a binary JSON format
* saves the schema `./chinook_mysql.json` file locally

***Now you can use chat to "talk" to your data!*** üéâ

--- Workflow: 1591_Splitout_Code_Automate_Webhook.json ---
Name: n8n Subworkflow Dependency Graph & Auto-Tagging
Description: # n8n Subworkflow Dependency Graph & Auto-Tagging

--- Workflow: 1592_Slack_Stickynote_Automate_Webhook.json ---
Name: My workflow 6
Description: ## Command Trigger

Copy the webhook URL, paste it into the Request URL of the Slack slash command, and complete the creation.


ÏõπÌõÖ URLÏùÑ Î≥µÏÇ¨ÌïòÏó¨ Ïä¨Îûô Ïä¨ÎûòÏãú Ïª§Îß®ÎìúÏùò Request URLÏóê Î∂ôÏù¥Í≥† ÏÉùÏÑ±ÏùÑ ÏôÑÎ£åÌïòÏÑ∏Ïöî.

--- Workflow: 1593_HTTP_Schedule_Import_Webhook.json ---
Name: Automated Daily Weather Data Fetcher and Storage
Description: Automated Daily Weather Data Fetcher and Storage



--- Workflow: 1594_Code_Schedule_Automation_Webhook.json ---
Name: Matomo Analytics Report
Description: ## Send Matomo analytics to A.I. and save results to baserow

This workflow will check for visitors who have visited more than 3 times. It will take this week's data and compare it to last week's data and give SEO suggestions.

[Watch youtube tutorial here](https://www.youtube.com/watch?v=hGzdhXyU-o8)

[Get my SEO A.I. agent system here](https://2828633406999.gumroad.com/l/rumjahn)

[üí° You can read more about this workflow here](https://rumjahn.com/how-to-create-an-a-i-agent-to-analyze-matomo-analytics-using-n8n-for-free/)


--- Workflow: 1595_Telegram_Schedule_Update_Webhook.json ---
Name: n8n update
Description: ## Default Variables  
Before starting, please set the following variables:  

- **working-directory**: The directory where your `docker-compose.yml` file is located.  
- **n8n-container-name**: The name of your n8n Docker container.  
- **telegram-id**: Your Telegram chat ID. You can find it by messaging `@get_id_bot` on Telegram.  


--- Workflow: 1596_Telegram_Code_Automate_Webhook.json ---
Name: Parents smart bot
Description: No description found in sticky notes.

--- Workflow: 1597_Export.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1598_HTTP_Schedule_Automation_Scheduled.json ---
Name: AirQuality Scheduler
Description: ## How to Get Your Ambee API Key
Ambee offers free API access, but you need to sign up using a work or university email address (e.g., name@company.com, name@uni.edu). Personal emails like Gmail or Outlook won't be accepted.

Steps to get your key:

1.Go to https://www.getambee.com

2.Click ‚ÄúTry API for Free‚Äù

3.Use your organization or school email when signing up

4.Confirm your email and copy the key from your dashboard

5.Paste it into the HTTP Request node headers:

x-api-key: YOUR_KEY_HERE
 Tip: If you‚Äôre a student, your university email usually works just fine.



--- Workflow: 1599_Woocommercetool_Manual_Automation_Webhook.json ---
Name: OpenAI Personal Shopper with RAG and WooCommerce
Description: Replace the URL and Collection name with your own

--- Workflow: 1600_Wait_Code_Automation_Scheduled.json ---
Name: Phishing_analysis__URLScan_io_and_Virustotal_
Description: ![Scheduled](https://i.imgur.com/PcOuvAL.png)
## Workflow Overview

This n8n workflow is engineered to enhance cybersecurity measures by analyzing potential phishing URLs using URLScan.io and VirusTotal. 

It is designed to automatically process and evaluate URLs from incoming messages for malicious content.

This workflow is tuned specifically for `Outlook`, but you can replace outlook with your mail provider of choice. 

The workflow can be initiated manually or scheduled to run automatically, ensuring consistent checks against phishing threats. By integrating with leading cybersecurity tools, it provides a comprehensive analysis, strengthening your organization's defense against phishing attacks.

## Execution Schedule

It can be triggered at will by clicking "Execute Workflow" or set to run on a schedule. To align with your operational needs, customize the `Schedule Trigger` to your preferred frequency, ensuring continuous monitoring for phishing attempts.

--- Workflow: 1601_Webhook_Respondtowebhook_Automation_Webhook.json ---
Name: AI Agent to chat with you Search Console Data, using OpenAI and Postgres
Description: ## Webhook - ChatInput

This webhook serves as the endpoint for receiving `ChatInput` data. Ensure that you include:
- `chatInput` ‚Äì the content you wish to send (üòâ)
- `sessionId` ‚Äì a unique identifier for the session

If you're using an interface such as **Open WebUI**, the `sessionId` will be generated automatically.

--- Workflow: 1602_Schedule_Youtube_Create_Scheduled.json ---
Name: Post New YouTube Videos to X
Description: üÜî Ensure you enter your YouTube Channel ID in the "Channel ID" field of this node. You can find your [Channel ID here](https://youtube.com/account_advanced).

--- Workflow: 1603_Splitout_Manual_Automation_Webhook.json ---
Name: Vision-Based AI Agent Scraper - with Google Sheets, ScrapingBee, and Gemini
Description: ## Trigger
The default trigger is **When clicking ‚ÄòTest workflow‚Äô**, meaning the workflow will **need to be triggered manually**. 

You can replace this by selecting a **trigger of your choice**.


--- Workflow: 1604_Manual_Openai_Automation_Triggered.json ---
Name: Prepare CSV files with GPT-4
Description: ## This is a helper workflow to create 3 CSV files
### Feel free to adapt as needed
### Some mock data from GPT is pinned for convenience

--- Workflow: 1605_Code_Editimage_Automation_Webhook.json ---
Name: N/A
Description: Fig 1. Output of Object Detection
![](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/download_1_qmqyyo#full-width)

--- Workflow: 1606_Telegram_Webhook_Automation_Webhook.json ---
Name: N/A
Description: ## API Key for Proxmox
** Create Credentails *** ensure to create credentials in Proxmox Data Center as API Key and then create credentails. 
** Add Credentials to n8n ** Click on Credentails, add new Credentails and Chose Header Auth
** In Header Auth Below will be used 
Name : Authorization
Value : PVEAPIToken=<user>@<realm>!<token-id>=<token-value>

Suppose my token id is n8n and key is 1234 so value will be as below

Value : PVEAPIToken=root@pam!n8n=1234


--- Workflow: 1607_Schedule_Notion_Sync_Scheduled.json ---
Name: Sync Todoist tasks to Notion
Description: No description found in sticky notes.

--- Workflow: 1608_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: chrome extension backend with AI
Description: ## N8N en OpenAI image analyser

--- Workflow: 1609_Wait_Schedule_Automation_Scheduled.json ---
Name: Keep discord clean
Description: **Note ‚òùÔ∏è**
Don‚Äôt forget to setup an error workflow to get notified if something goes wrong

--- Workflow: 1610_Telegram_Googledocs_Automate_Triggered.json ---
Name: ü§ñüß† AI Agent Chatbot + LONG TERM Memory + Note Storage + Telegram
Description: ## Retrieve Long Term Memories
Google Docs

--- Workflow: 1611_Form_Stickynote_Automate_Triggered.json ---
Name: Automated Form Submission Data Storage in Airtable
Description: Automated Form Submission Data Storage in Airtable

--- Workflow: 1612_Webhook_Code_Automate_Webhook.json ---
Name: LINE BOT - Google Sheets Record Receipt
Description: ## Prepare data
**- Get content image from Line** 
https://api-data.line.me/v2/bot/message/xxx/content

**- Get image URL to Binary**

--- Workflow: 1613_Gmailtool_Stickynote_Automation_Triggered.json ---
Name: Gmail MCP Server
Description: ## Message Tools


--- Workflow: 1614_Schedule_HTTP_Send_Webhook.json ---
Name: SSL Expiry Alert
Description: Triggers the workflow once a week.

--- Workflow: 1615_HTTP_Emailreadimap_Send_Webhook.json ---
Name: Summarize emails with A.I. then send to messenger
Description: ## Summarize emails with A.I.
You can find out more about the [use case](https://rumjahn.com/how-a-i-saved-my-kids-school-life-and-my-marriage/)

--- Workflow: 1616_Manual_Stickynote_Send_Webhook.json ---
Name: The Easiest Way to Send SMS Worldwide
Description: ## STEP 1
[Register here to ClickSend](https://clicksend.com/?u=586989) and obtain your API Key and 2 ‚Ç¨ of free credits

In the node "Send SMS" create a "Basic Auth" with the username you registered and the API Key provided as your password

--- Workflow: 1617_HTTP_Stickynote_Automation_Webhook.json ---
Name: üîçüõ†Ô∏è Tavily Search & Extract - Template
Description: ## Tavily API Search Endpoint

**Base URL**: `https://api.tavily.com/search`
**Method**: POST

### Required Parameters
- `query`: The search query string
- `api_key`: Your Tavily API key

### Optional Parameters
- `search_depth`: "basic" or "advanced" (default: "basic")
- `topic`: "general" or "news" (default: "general") 
- `max_results`: Maximum number of results to return (default: 5)
- `include_images`: Include query-related images (default: false)
- `include_answer`: Include AI-generated answer (default: false)
- `include_raw_content`: Include parsed HTML content (default: false)
- `include_domains`: List of domains to include
- `exclude_domains`: List of domains to exclude
- `time_range`: Filter by time range ("day", "week", "month", "year")
- `days`: Number of days back for news results (default: 3)

### Example Request
```json
{
    "api_key": "tvly-YOUR_API_KEY",
    "query": "Who is Leo Messi?",
    "search_depth": "basic",
    "include_answer": false,
    "include_images": true,
    "max_results": 5
}
```


--- Workflow: 1618_Openai_GoogleSheets_Create_Triggered.json ---
Name: Qualify new leads in Google Sheets via OpenAI's GPT-4
Description: ### 1. Create a Google Sheet document
* This template uses Google Sheet document connected to Google Forms, but a standalone Sheet document will work too
* Adapt initial trigger to your needs: check for new entries periodically or add a manual trigger

[Link to the Google Sheet template](https://docs.google.com/spreadsheets/d/1jk8ZbfOMObvHGGImc0sBJTZB_hracO4jRqfbryMgzEs)

--- Workflow: 1619_Code_Pipedrive_Automation_Triggered.json ---
Name: N/A
Description: ## About the workflow
The workflow reads every reply that is received from a cold email campaign and qualifies if the lead is interested in a meeting. If the lead is interested, a deal is made in pipedrive. You can add as many email inboxes as you need!

## Setup:
- Add credentials to the Gmail, OpenAI and Pipedrive Nodes.
- Add a in_campaign field in Pipedrive for persons. In Pipedrive click on your credentials at the top right, go to company settings > Data fields > Person and click on add custom field. Single option [TRUE/FALSE].
- If you have only one email inbox, you can delete one of the Gmail nodes.
- If you have more than two email inboxes, you can duplicate a Gmail node as many times as you like. Just connect it to the Get email node, and you are good to go!
- In the Gmail inbox nodes, select Inbox under label names and uncheck Simplify.

--- Workflow: 1620_GoogleCalendar_Form_Automation_Triggered.json ---
Name: N/A
Description: ## 1. Qualify Enquiries Using AI
[Learn more about the text classifier](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier/)

With n8n's multi-forms, you‚Äôre no longer stuck creating long, overwhelming forms. Instead, you have more flexibility and control to design smarter, more engaging form experiences.

In this demo, we‚Äôll explore an appointment request scenario where a user wants to schedule a call to discuss their inquiry. However, not all inquiries require a meeting, making it a perfect use case for AI to pre-qualify the request. We can handle this validation using the text classifier node.

--- Workflow: 1621_Manual_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ## Credentials Setup

1/ Go to the perplexity dashboard, purchase some credits and create an API Key

https://www.perplexity.ai/settings/api

2/ In the perplexity Request node, use Generic Credentials, Header Auth. 

For the name, use the value "Authorization"
And for the value "Bearer pplx-e4...59ea" (Your Perplexity Api Key)



--- Workflow: 1622_Manual_N8N_Automation_Triggered.json ---
Name: N/A
Description: 













### üö®Required
You'll need an n8n API key. Note: available workflows will be scoped to your key.

--- Workflow: 1623_Stopanderror_Code_Import_Triggered.json ---
Name: Load Prompts from Github Repo and auto populate n8n expressions
Description: # Set The variables in your prompt here

--- Workflow: 1624_Stickynote_Executeworkflow_Automation_Webhook.json ---
Name: CoinMarketCap_Crypto_Agent_Tool
Description: # üß† CoinMarketCap_Crypto_Agent_Tool Guide

This agent is part of the modular **CoinMarketCap AI Analyst** system in **n8n**, focused on **cryptocurrency-level queries** such as price, supply, metadata, rankings, and conversions.

## üîå Endpoints Supported:
1. `/v1/cryptocurrency/map` ‚Äì Get IDs, symbols, names
2. `/v2/cryptocurrency/info` ‚Äì Get metadata, logos, whitepapers
3. `/v1/cryptocurrency/listings/latest` ‚Äì Market rankings by cap
4. `/v2/cryptocurrency/quotes/latest` ‚Äì Price, volume, and supply
5. `/v1/global-metrics/quotes/latest` ‚Äì Total market cap, BTC dominance
6. `/v1/tools/price-conversion` ‚Äì Fiat and crypto conversions

## üß† Node Overview:
- **üß† Brain**: `GPT-4o Mini`
- **üíæ Memory**: Session context buffer
- **‚öôÔ∏è Tools**: 6 live API endpoints

## ‚öôÔ∏è Required Inputs:
- `message` ‚Äì User query
- `sessionId` ‚Äì Used to preserve memory between calls

## üìù Tip:
Use descriptive prompts like:
- ‚ÄúWhat is the CoinMarketCap ID for ETH?‚Äù
- ‚ÄúConvert 1000 DOGE to BTC.‚Äù
- ‚ÄúShow top 10 tokens by market cap.‚Äù

--- Workflow: 1625_Splitout_Schedule_Monitor_Webhook.json ---
Name: n8n Community Topic Tracker by Keyword
Description: ## Modify the Query Parameter

**Double-click** the node to open it for editing.

Adjust the value of the "q" parameter to match the keyword you wish to monitor.





--- Workflow: 1626_Stickynote_GoogleDrive_Automate_Triggered.json ---
Name: RAG Workflow For Company Documents stored in Google Drive
Description: ## Chat with company documents

--- Workflow: 1627_Splitout_Code_Automation_Triggered.json ---
Name: RAG:Context-Aware Chunking | Google Drive to Pinecone via OpenRouter & Gemini
Description: ## Prepare Document. 
This section is responsible for downloading the file from Google Drive, splitting the text into sections by detecting separators, and preparing them for looping.

--- Workflow: 1628_Emailsend_Code_Automation_Webhook.json ---
Name: Property Lead Contact Enrichment from CRM
Description: # Property Lead Automation Workflow

This workflow automatically searches for potential real estate leads based on configured criteria, obtains owner contact information through skip tracing, and pushes the leads to your CRM. It can be run manually or scheduled to run daily.

## Steps: Property Search ‚Üí Filter Results ‚Üí Skip Trace ‚Üí Format Data ‚Üí Export (Excel & CRM)

--- Workflow: 1629_Schedule_Stickynote_Automation_Scheduled.json ---
Name: Reschedule overdue Asana tasks and clean up completed tasks
Description: ### ‚öôÔ∏è Set Up 

1. Add your **Asana** credentials
2. Schedule the workflow to run at desired intervals (e.g., daily or weekly).
3. Select your **Workspace Name** and your **Assignee Name** (user) in the **Get user tasks** node
4. *(Optional) Tailor filtering conditions to match your preferred due-date rules and removal criteria.*
5. **Activate the workflow** and watch your Asana workspace stay up to date and clutter-free.

--- Workflow: 1630_Code_Form_Automation_Triggered.json ---
Name: Form with Dynamic Dropdown Field
Description: ## Form setup

- Customize your form fields. 
- The dropdown field will auto-update with values from your data source. 
- Other form fields can be added as needed (limited to one dropdown field).
- Connect to your workflow that processes the submitted form data.

### Form requires production mode for testing

--- Workflow: 1631_HTTP_Telegram_Automation_Webhook.json ---
Name: NeurochainAI Basic API Integration
Description: ## ERROR

--- Workflow: 1632_HTTP_Telegram_Monitor_Webhook.json ---
Name: Telegram Tron Wallet Blacklist Checker
Description: ## TRON USDT Blacklist Checker
**This template checks USDT wallets on the TRON blockchain and queries whether they have been blacklisted.**

--- Workflow: 1633_Manual_Stickynote_Automation_Webhook.json ---
Name: dub.co URL Shortener
Description: ## Dub.co API Limits:
Dub‚Äôs API is capped at 10 requests per second per user.

--- Workflow: 1634_Automation.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1635_Localfile_Splitout_Automation_Triggered.json ---
Name: N/A
Description: ## Step 1. Wait For Incoming Bank Statements
[Read more about the local file triggers](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger)

For this demo, we'll show that n8n is more than capable working with the local filesystem. This gives great benefits in terms of privacy and data security.

For our datastore, we're using a locally hosted XLSX Excel file which we'll query and update throughout this workflow.

--- Workflow: 1636_Manual_Openai_Automation_Triggered.json ---
Name: N/A
Description: ## What this workflow does
‚úîÔ∏é 1) Get posts from reddit that might be about n8n
 - Filter for the most relevant posts (posted in last 7 days and more than 5 upvotes and is original content)

‚úîÔ∏é 2) Check if the post is actually about n8n

‚úîÔ∏é 3) if it is, categorise with OpenAi.


--- Workflow: 1637_Splitout_Code_Automation_Triggered.json ---
Name: N/A
Description: ## Remove PII from CSV Files
This workflow monitors a Google Drive folder for new CSV files, identifies and removes PII columns using OpenAI, and uploads the sanitized file back to the drive. It requires Google Drive and OpenAI integrations with API access enabled.

--- Workflow: 1638_Wait_Splitout_Send_Webhook.json ---
Name: N/A
Description: ## 1. WhatsApp Trigger
[Learn more about the WhatsApp Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger)

To start receiving WhatsApp messages in your workflow, there are quite a few steps involved so be sure to follow the n8n documentation. When we recieve WhatsApp messages, we'll split out the messages part of the payload and handle them depending on the message type using the Switch node.

--- Workflow: 1639_Wait_Webhook_Automation_Webhook.json ---
Name: Resume Screening & Behavioral Interviews with Gemini, Elevenlabs, & Notion ATS copy
Description: ## Applicant Qualifications
### Creates individual summary for Education, Job History, and Skills that is sent to LLM for processing; captures total years of experience

--- Workflow: 1640_HTTP_Stickynote_Automation_Webhook.json ---
Name: Push Multiple Files to Github Repo via Github REST API
Description: ## Push Multiple Files to GitHub Repo  
A streamlined workflow for uploading multiple files to a GitHub repository via the GitHub REST API. This solution addresses a significant limitation of the native GitHub n8n node, which supports only single-file uploads.

This approach enables batch file operations, making it particularly valuable for automation scenarios that require simultaneous uploads of multiple files to your GitHub repositories.

### Setup Instructions:
1. Create a new GitHub Personal Access Token [here](https://github.com/settings/personal-access-tokens). In the "Repository access" section, select your repository and grant "Read and write" permissions under the "Contents" category.  
2. Configure your GitHub information in the "Set GitHub Info" node.  
3. Update the "Create New Tree" node with your filenames and content. You can add as many tree entries (files) as needed.

--- Workflow: 1641_Extractfromfile_Manual_Automation_Webhook.json ---
Name: youtube chapter generator
Description: 
## Get Captions

--- Workflow: 1642_Splitout_Code_Automation_Webhook.json ---
Name: Find Top Keywords
Description: ## Create time for yesterday and today. This will be used to gather and search for news articles within a specific range.

--- Workflow: 1643_Slack_Manual_Automate_Webhook.json ---
Name: Slack AI Chatbot with RAG for company staff
Description: # STEP 1

## Create Qdrant Collection
Change:
- QDRANTURL
- COLLECTION

--- Workflow: 1644_Code_Schedule_Automation_Scheduled.json ---
Name: UTM Link Creator & QR Code Generator with Scheduled Google Analytics Reports
Description: Create a marketing link with UTM parameters. Easily store in database and have QR code created and ready as well.

Type in requirements:
website URL
campaign id
campaign source
campaign medium
campaign name
campaign term



--- Workflow: 1645_Limit_Splitout_Automation_Webhook.json ---
Name: Scrape Trustpilot Reviews with DeepSeek, Analyze Sentiment with OpenAI
Description: Change to the name of the company registered on Trustpilot and the maximum number of pages to scrape

--- Workflow: 1646_Code_Schedule_Create_Scheduled.json ---
Name: News Extraction
Description: Select only the newest news: todays date going back xy days

--- Workflow: 1647_Splitout_Limit_Automation_Webhook.json ---
Name: N/A
Description: ## Scrape latest Paul Graham essays

--- Workflow: 1648_Splitout_Converttofile_Send_Webhook.json ---
Name: Scrape Books from URL with Dumpling AI, Clean HTML, Save to Sheets, Email as CSV
Description: ### Scrape Books from URL with Dumpling AI, Clean HTML, Save to Sheets, Email as CSV

üìå This workflow scrapes book data from a website, turns it into a CSV, saves it, and sends it by email.

üîß It starts from a Google Sheets trigger, fetches the page using DumplingAI, extracts books, sorts by price, and emails the CSV.

‚úÖ Make sure APIs for Gmail, Sheets & Drive are enabled in Google Cloud. Update the URL in the "Fetch website content" node.


--- Workflow: 1649_Form_Extractfromfile_Automate_Triggered.json ---
Name: AI CV Screening Workflow
Description: No description found in sticky notes.

--- Workflow: 1650_Manual_Stickynote_Automation_Webhook.json ---
Name: Search & Summarize Web Data with Perplexity, Gemini AI & Bright Data to Webhooks
Description: ## Note

Deals with the Perplexity Search using the Bright Data Web Scrapper API.

The information extraction and summarization are done to demonstrate the usage of the N8N AI capabilities.

**Please make sure to update the Webhook Notification URL**

--- Workflow: 1651_HTTP_Schedule_Automation_Webhook.json ---
Name: Gratitude Jar Reminder
Description: ## Trigger 
We schedule the trigger at 9.00 pm before going to bed. This flow is to reflect what is the great thing that happened today.

--- Workflow: 1652_Googleanalytics_Code_Automation_Webhook.json ---
Name: Google analytics template
Description: ## Send Google analytics to A.I. and save results to baserow

This workflow will check for country views, page engagement and google search console results. It will take this week's data and compare it to last week's data.

[You can read more about this workflow here](https://rumjahn.com/how-i-used-a-i-to-be-an-seo-expert-and-analyzed-my-google-analytics-data-in-n8n-and-make-com/)

--- Workflow: 1653_Code_Webhook_Send_Webhook.json ---
Name: N/A
Description: ### Configuration
If you decide to use your own spreadsheet, it is up to you to ensure all columns are present before running this workflow. A good way to do this is to run this workflow once with **empty** `spreadsheetid` and `worksheetId` variables (see the `Configure` node). Then map the output from `Store spreadsheet ID` to this node.

It is recommended that you specify the `spreadsheetId` and `worksheetId`, since relying solely on a workflow's static data is considered bad practice.
















__`spreadsheetId`__: The ID of the spreadsheet where Pipedrive deals will be stored.
__`worksheetId`__: The ID of the worksheet where Pipedrive deals will be stored.
__`spreadsheetName`(required)__: The human readable name of the spreadsheet where Pipedrive deals will be stored.
__`worksheetName`(required)__: The human readable name of the worksheet in the spreadsheet where Pipedrive deals will be stored.
__`recipients`(required)__: Comma-separated list of email recipients to send ChatGPT emails to. Use `*` to send ChatGPT response to every email address.
__`maxTokenSize`(required)__: The maximum token size for the model you choose. See possible models from OpenAI [here](https://platform.openai.com/docs/models/gpt-3).
__`replyTokenSize`(required)__: The reply's maximum token size. Default is 300. This determines how much text the AI will reply with.

--- Workflow: 1654_HTTP_Telegram_Send_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1655_HTTP_Schedule_Send_Webhook.json ---
Name: N/A
Description: ![](https://raw.githubusercontent.com/2innnnn0/30-Days-of-ChatGPT/refs/heads/main/datapopcorn_logo_50px.png)
# Daily Cartoon (w/ AI Translate)

### How it works
- Automates the retrieval of Calvin and Hobbes daily comics.
- Extracts the comic image URL from the website.
- Translates comic dialogues to English and Korean(Other Language)
- Posts the comic and translations to Discord daily.

### Set up steps
- Estimated setup time: ~10-15 minutes.
- Use a **Schedule Trigger** to automate the workflow at 9 AM daily.
- Add nodes for parameter setup, HTTP request, data extraction, and integration with Discord.
- Add detailed notes to each node in the workflow for easy understanding.

--- Workflow: 1656_Code_Readpdf_Send_Triggered.json ---
Name: N/A
Description: ## Send specific PDF attachments from Gmail to Google Drive using OpenAI

_**DISCLAIMER**: You may have varying success when using this workflow so be prepared to validate the correctness of OpenAI's results._

This workflow reads PDF textual content and sends the text to OpenAI. Attachments of interest will then be uploaded to a specified Google Drive folder. For example, you may wish to send invoices received from an email to an inbox folder in Google Drive for later processing. This workflow has been designed to easily change the search term to match your needs. See the workflow for more details.

### How it works
1. Triggers off on the `On email received` node.
2. Iterates over the attachments in the email.
3. Uses the `OpenAI` node to filter out the attachments that do not match the search term set in the `Configure` node. You could match on various PDF files (i.e. invoice, receipt, or contract).
4. If the PDF attachment matches the search term, the workflow uses the `Google Drive` node to upload the PDF attachment to a specific Google Drive folder.


Workflow written by [David Sha](https://davidsha.me).

--- Workflow: 1657_Splitout_Schedule_Monitor_Scheduled.json ---
Name: N/A
Description: ## 1. Continuously Monitor Active Linear Issues
[Learn more about the GraphQL node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.graphql)

To keep up with the latest changes in our active Linear tickets, we'll need to use Linear's GraphQL endpoint because filtering is currently unavailable in the official Linear.app node.

For this demonstration, we'll check for updated tickets every 30mins.

--- Workflow: 1658_Splitout_Schedule_Monitor_Scheduled.json ---
Name: N/A
Description: ## 1. Continuously Monitor Active Linear Issues
[Learn more about the GraphQL node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.graphql)

To keep up with the latest changes in our active Linear tickets, we'll need to use Linear's GraphQL endpoint because filtering is currently unavailable in the official Linear.app node.

For this demonstration, we'll check for updated tickets every 30mins.

--- Workflow: 1659_Rssfeedread_Extractfromfile_Automation_Webhook.json ---
Name: YouTube Videos with AI Summaries on Discord
Description: ### Summarise Your YouTube Videos with AI for Discord

üìΩÔ∏è [Watch the Video Tutorial](https://mrc.fm/ai2d)

* Add your [YouTube channel ID](https://www.youtube.com/account_advanced) to the URL in the first node: `https://www.youtube.com/feeds/videos.xml?channel_id=YOUR_CHANNEL_ID`.

* Ensure authorization with the YouTube channel that you want to download captions from.

--- Workflow: 1660_Splitout_HTTP_Create_Webhook.json ---
Name: Generate New Keywords with Search Volumes‚öíÔ∏è‚öíÔ∏èüü¢üü¢
Description: ## Generate new keywords for SEO with the monthly Search volumes

This workflow is an improvement on the workflows below. It can be used to generate new keywords that you can use for your SEO campaigns or Google ads campaigns


[Generate SEO Keyword Search Volume Data using Google API](https://n8n.io/workflows/2494-generate-seo-keyword-search-volume-data-using-google-api/) and [Generating Keywords using Google Autosuggest](https://n8n.io/workflows/2155-generating-keywords-using-google-autosuggest/)

## Usage
1. Send the keywords you need as an array to this workflow
2. Pin the data and map it to the `set Keywords`  node
3. Map the keywords to the Google ads API with the location and Language of your choice
4. Split the results and set them data 
5. Pass this to the next nodes as needed for storage
6. Make a copy of this [spreedsheet](https://docs.google.com/spreadsheets/d/10mXXLB987b7UySHtS9F4EilxeqbQjTkLOfMabnR2i5s/edit?usp=sharing) and update the data accordingly

## Having challenges with the google Ads API? Read this [blog ](https://funautomations.io/workflows/automating-keyword-generation-with-n8n-google-ads-api/)

Made by [@Imperol](https://www.linkedin.com/in/zacharia-kimotho/)

--- Workflow: 1661_GoogleSheets_Stickynote_Monitor_Triggered.json ---
Name: AI agent: expense tracker in Google Sheets and n8n chat
Description: ## Save your expenses via chat message. 

LLM will parse your message to structured JSON and save as a new row into Google Sheet.

## Installation
### 1. Set up Google Sheets:
Clone this Sheet:
https://docs.google.com/spreadsheets/d/1D0r3tun7LF7Ypb21CmbTKEtn76WE-kaHvBCM5NdgiPU/edit?gid=0#gid=0

(File -> Make a copy)

Choose this sheet into "Save expense into Google Sheets" node.


### 2. Fix sub-workflow dropdown: 
open "Parse msg and save to Sheets" node (which is an n8n sub-workflow executor tool) and choose the SAME workflow in the dropdown. it will allow n8n to call "Workflow Input Trigger" properly when needed.


### 3. Activate the workflow to make chat work properly.
Sent message to chat, something like "car wash; 59.3 usd; 25 jan 2024"

you should get a response:
Your expense saved, here is the output of save sub-workflow:{"cost":59.3,"descr":"car wash","date":"2024-01-25","msg":"car wash; 59.3 usd; 25 jan 2024"}

and new row in Google sheets should be inserted!

--- Workflow: 1662_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ![Siri Template Thumbnail](https://uploads.n8n.io/devrel/wf-siri-header.png#full-width)
## "Hey Siri, Ask Agent" workflow
**Made by [Max Tkacz](https://www.linkedin.com/in/maxtkacz) during the [30 Day AI Sprint](https://30dayaisprint.notion.site/)**

This template integrates with Apple Shortcuts to trigger an n8n AI Agent via a "Hey Siri" command. The shortcut prompts for spoken input, transcribes it, and sends it to the workflow's `When Called by Apple Shortcut` Webhook trigger. The AI Agent processes the input and Siri dictates the response back to you.

The workflow also passes the current date and time to the `AI Agent`, which you can extend with additional context, like data from an App node, for more customized responses.



--- Workflow: 1663_Slack_Stickynote_Automate_Webhook.json ---
Name: My workflow 6
Description: ## Command Trigger

Copy the webhook URL, paste it into the Request URL of the Slack slash command, and complete the creation.


ÏõπÌõÖ URLÏùÑ Î≥µÏÇ¨ÌïòÏó¨ Ïä¨Îûô Ïä¨ÎûòÏãú Ïª§Îß®ÎìúÏùò Request URLÏóê Î∂ôÏù¥Í≥† ÏÉùÏÑ±ÏùÑ ÏôÑÎ£åÌïòÏÑ∏Ïöî.

--- Workflow: 1664_Code_HTTP_Send_Webhook.json ---
Name: N/A
Description: ## Personalize here

### Set: 
- your name
- your company name
- your company activity, used to find a match with your leads
- your email, used as the sender

--- Workflow: 1665_Bannerbear_Discord_Automation_Webhook.json ---
Name: N/A
Description: ## 1. Start with n8n Forms
[Read more about using forms](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger/)

For this demo, we'll use the form trigger for simple data capture but you could use webhooks for better customisation and/or integration into other workflows.

--- Workflow: 1666_Code_Manual_Automation_Webhook.json ---
Name: Spot Workplace Discrimination Patterns with AI
Description: # Spot Workplace Discrimination Patterns using ScrapingBee, Glassdoor, OpenAI, and QuickChart


--- Workflow: 1667_Filter_Summarize_Automation_Triggered.json ---
Name: Store Notion's Pages as Vector Documents into Supabase with OpenAI
Description: ## Store Notion's Pages as Vector Documents into Supabase

**This workflow assumes you have a Supabase project with a table that has a vector column. If you don't have it, follow the instructions here:** [Supabase Vector Columns Guide](https://supabase.com/docs/guides/ai/vector-columns)

## Workflow Description

This workflow automates the process of storing Notion pages as vector documents in a Supabase database with a vector column. The steps are as follows:

1. **Notion Page Added Trigger**:
 - Monitors a specified Notion database for newly added pages. You can create a specific Notion database where you copy the pages you want to store in Supabase.
 - Node: `Page Added in Notion Database`

2. **Retrieve Page Content**:
 - Fetches all block content from the newly added Notion page.
 - Node: `Get Blocks Content`

3. **Filter Non-Text Content**:
 - Excludes blocks of type "image" and "video" to focus on textual content.
 - Node: `Filter - Exclude Media Content`

4. **Summarize Content**:
 - Concatenates the Notion blocks content to create a single text for embedding.
 - Node: `Summarize - Concatenate Notion's blocks content`

5. **Store in Supabase**:
 - Stores the processed documents and their embeddings into a Supabase table with a vector column.
 - Node: `Store Documents in Supabase`

6. **Generate Embeddings**:
 - Utilizes OpenAI's API to generate embeddings for the textual content.
 - Node: `Generate Text Embeddings`


7. **Create Metadata and Load Content**:
 - Loads the block content and creates associated metadata, such as page ID and block ID.
 - Node: `Load Block Content & Create Metadata`

8. **Split Content into Chunks**:
 - Divides the text into smaller chunks for easier processing and embedding generation.
 - Node: `Token Splitter`





--- Workflow: 1668_GoogleCalendar_Filter_Automation_Triggered.json ---
Name: Calendar_scheduling
Description: ## Check if incoming email is about appointment
We use LLM to check subject and body of the email and determine if it's an appointment request. 

--- Workflow: 1669_Manual_Openai_Automation_Triggered.json ---
Name: Summarize Google Sheets form feedback via OpenAI's GPT-4
Description: ### 1. Create a Google Sheet document
* This tutorial uses Google Sheet document connected to Google Forms, but a standalone Sheet document will work too
* Adapt initial trigger to your needs: run manually or at some time intervals

[Link to the Google Sheets template](https://docs.google.com/spreadsheets/d/1Kcr1oF_RrfNQJczmJDpwClOSYpvSnwbeX-_pdUo91-I/edit?usp=sharing)

--- Workflow: 1670_Code_Schedule_Automation_Webhook.json ---
Name: SERPBear analytics template
Description: ## Send Matomo analytics to A.I. and save results to baserow

This workflow will check the Google keywords for your site and it's rank.

[üí° You can read more about this workflow here](https://rumjahn.com/how-to-create-an-a-i-agent-to-analyze-serpbear-keyword-rankings-using-n8n-for-free-without-any-coding-skills-required/)

--- Workflow: 1671_Code_Schedule_Automation_Webhook.json ---
Name: Umami analytics template
Description: ## Send data from Umami to A.I. and then save to Baserow

You can find out more about the stats available in the [Umami API](https://umami.is/docs/api/website-stats-api)

Read the [case study here](https://rumjahn.com/how-to-analyze-umami-data-using-n8n-and-a-i-to-improve-seo-and-uncover-hidden-insights-for-better-content-optimization/).



--- Workflow: 1672_HTTP_Form_Automation_Webhook.json ---
Name: N/A
Description: **Summarize YouTube videos**

This project automates the summarization of YouTube videos, transforming lengthy content into concise, actionable insights. By leveraging AI and workflow automation, it extracts video transcripts, analyzes key points, and generates summaries, saving time for content creators, researchers, and professionals. Perfect for staying informed, conducting research, or repurposing video content efficiently.

--- Workflow: 1673_GoogleDrive_GoogleSheets_Automation_Triggered.json ---
Name: Google Doc Summarizer to Google Sheets
Description: ## Get Latest File


--- Workflow: 1674_HTTP_Emailreadimap_Send_Webhook.json ---
Name: Summarize emails with A.I. then send to messenger
Description: ## Summarize emails with A.I.
You can find out more about the [use case](https://rumjahn.com/how-a-i-saved-my-kids-school-life-and-my-marriage/)

--- Workflow: 1675_HTTP_Emailreadimap_Send_Webhook.json ---
Name: Summarize emails with A.I. then send to messenger
Description: ## Summarize emails with A.I.
You can find out more about the [use case](https://rumjahn.com/how-a-i-saved-my-kids-school-life-and-my-marriage/)

--- Workflow: 1676_Manual_Wait_Automation_Webhook.json ---
Name: Summarize Glassdoor Company Info with Google Gemini and Bright Data Web Scraper
Description: ## Note

Deals with the Glassdoor data extraction by using the Bright Data Web Scrapper API.

The summarization chain is being used to demonstrate the usage of the N8N AI capabilities.

--- Workflow: 1677_Supabase_Stickynote_Automation_Triggered.json ---
Name: N/A
Description: # INSERTING

- it's important to use the same embedding model when for any interaction with your vector database (inserting, upserting and retrieval)

--- Workflow: 1678_Splitout_Code_Automation_Webhook.json ---
Name: N/A
Description: ## Step 1. Import Survey Responses
[Read more about Google Sheets](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets)

Our approach requires to import all participant responses as vectors with metadata linking them to the questions being answered. To do this, we'll generate questiona and answer pairs from the survey.

--- Workflow: 1679_Telegram_GoogleCalendar_Automation_Scheduled.json ---
Name: Google Calendar Event Reminder
Description: ## Google Calendar Event Reminder
This smart **Google Calendar** workflow fixes that by sending you a clear, friendly reminder exactly **1 hour before your event starts**‚Äîdelivered through **Telegram** as if a personal assistant were looking out for you. Powered by **AI**, it transforms cold calendar alerts into warm, conversational nudges you won't ignore.

--- Workflow: 1680_Supabase_Stickynote_Automation_Triggered.json ---
Name: A/B Split Testing
Description: ## 1. Receive Message



--- Workflow: 1681_Airtoptool_Slack_Automation_Triggered.json ---
Name: Airtop Web Agent
Description: ## Note
This sub-workflow simplifies the session management for the agent

--- Workflow: 1682_Stickynote_Notion_Automation_Triggered.json ---
Name: Whisper Transkription copy
Description: ## Trigger and Download of audio file

In this example I'm using Google Drive. 
As soon as a audio file is uploaded the trigger will start and download the audio file. 

--- Workflow: 1683_Compression_Manual_Automation_Webhook.json ---
Name: SQL agent with memory
Description: ## Run this part only once
This section:
* downloads the example zip file from https://www.sqlitetutorial.net/sqlite-sample-database/
* extracts the archive (it contains only a single file)
* saves the extracted `chinook.db` SQLite database locally

Now you can use chat to "talk" to your data!

--- Workflow: 1684_HTTP_Telegram_Automation_Webhook.json ---
Name: NeurochainAI Basic API Integration
Description: ## ERROR

--- Workflow: 1685_Openai_Telegram_Automate_Triggered.json ---
Name: Telegram AI-bot
Description: ## Error fallback for unsupported commands

--- Workflow: 1686_Telegram_Stickynote_Automate_Triggered.json ---
Name: Telegram AI multi-format chatbot
Description: ## Receive and pre-process messages 


--- Workflow: 1687_HTTP_Telegram_Automate_Webhook.json ---
Name: Telegram AI Langchain bot
Description: ## Generate an image with Dall-E 3 and send it via Telegram

--- Workflow: 1688_HTTP_Telegram_Automate_Webhook.json ---
Name: N/A
Description: SQL query to create table in Supabase:

```
create table
 public.telegram_users (
 id uuid not null default gen_random_uuid (),
 date_created timestamp with time zone not null default (now() at time zone 'utc'::text),
 telegram_id bigint null,
 openai_thread_id text null,
 constraint telegram_users_pkey primary key (id)
 ) tablespace pg_default;
```

--- Workflow: 1689_Stopanderror_Telegram_Automation_Triggered.json ---
Name: Telegram RAG pdf
Description: # Load data into database
Fetch file from **Telegram**, split it into chunks and insert into **Pinecone** index, a message from **Telegram** will be sent just to let the user know that the process finished

--- Workflow: 1690_Telegram_Stickynote_Automation_Triggered.json ---
Name: Play with Spotify from Telegram
Description: ## Telegram to Spotify 
Ask AI about a track with artist and song name or if you can't remember describe it and AI does it's thing.


--- Workflow: 1691_Stickynote_Automation_Triggered.json ---
Name: üó®Ô∏èOllama Chat
Description: # ü¶ô Ollama Chat Workflow

A simple N8N workflow that integrates Ollama LLM for chat message processing and returns a structured JSON object.

## Overview
This workflow creates a chat interface that processes messages using the Llama 3.2 model through Ollama. When a chat message is received, it gets processed through a basic LLM chain and returns a response.

## Components
- **Trigger Node**
- **Processing Node**
- **Model Node**
- **JSON to Object Node**
- **Structured Response Node**
- **Error Response Node**

## Workflow Structure
1. The chat trigger node receives incoming messages
2. Messages are passed to the Basic LLM Chain
3. The Ollama Model processes the input using Llama 3.2
4. Responses are returned through the chain

## Prerequisites
- N8N installation
- Ollama setup with Llama 3.2 model
- Valid Ollama API credentials

## Configuration
1. Set up the Ollama API credentials in N8N
2. Ensure the Llama 3.2 model is available in your Ollama installation



--- Workflow: 1692_Respondtowebhook_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ## Workflow: Text automations using Apple Shortcuts

**Overview**
- This workflow answers user requests sent via Apple Shortcuts
- Several Shortcuts call the same webhook, with a query and a type of query
- Types of query are:
 - translate to english
 - translate to spanish
 - correct grammar (without changing the actual content)
 - make content shorter
 - make content longer


**How it works**
- Select a text you are writing
- Launch the shortcut
- The text is sent to the webhook
- Depending on the type of request, a different prompt is used
- Each request is sent to an OpenAI node
- The workflow responds to the request with the response from GPT
- Shortcut replace the selected text with the new one

**How to use it**
- Activate the workflow
- Download [this Shortcut template](https://drive.usercontent.google.com/u/0/uc?id=16zs5iJX7KeX_4e0SoV49_KfbU7-EF0NE&export=download)
- Install the shortcut
- In step 2 of the shortcut, change the url of the Webhook
- In Shortcut details, "add Keyboard Shortcut" with the key you want to use to launch the shortcut
- Go to settings, advanced, check "Allow running scripts"
- You are ready to use the shortcut. Select a text and hit the keyboard shortcut you just defined


**Notes**
- If you use rich formatting, you'll have to test multiple ways to replace characters in the output. For example, you might use `{{ $json.message.content.output.replaceAll('\n', "<br/>") }}` in the "Respond to Shortcut" node depending on the app you use most.
- This is a basic example that you can extend and modify at your will
- You can duplicate and modify the example shortcut based on your need, as well as making new automations in this workflow.

--- Workflow: 1693_Respondtowebhook_Stickynote_Automate_Webhook.json ---
Name: N/A
Description: ## Workflow: Text automations using Apple Shortcuts

**Overview**
- This workflow answers user requests sent via Apple Shortcuts
- Several Shortcuts call the same webhook, with a query and a type of query
- Types of query are:
 - translate to english
 - translate to spanish
 - correct grammar (without changing the actual content)
 - make content shorter
 - make content longer


**How it works**
- Select a text you are writing
- Launch the shortcut
- The text is sent to the webhook
- Depending on the type of request, a different prompt is used
- Each request is sent to an OpenAI node
- The workflow responds to the request with the response from GPT
- Shortcut replace the selected text with the new one

**How to use it**
- Activate the workflow
- Download [this Shortcut template](https://drive.usercontent.google.com/u/0/uc?id=16zs5iJX7KeX_4e0SoV49_KfbU7-EF0NE&export=download)
- Install the shortcut
- In step 2 of the shortcut, change the url of the Webhook
- In Shortcut details, "add Keyboard Shortcut" with the key you want to use to launch the shortcut
- Go to settings, advanced, check "Allow running scripts"
- You are ready to use the shortcut. Select a text and hit the keyboard shortcut you just defined


**Notes**
- If you use rich formatting, you'll have to test multiple ways to replace characters in the output. For example, you might use `{{ $json.message.content.output.replaceAll('\n', "<br/>") }}` in the "Respond to Shortcut" node depending on the app you use most.
- This is a basic example that you can extend and modify at your will
- You can duplicate and modify the example shortcut based on your need, as well as making new automations in this workflow.

--- Workflow: 1694_Webhook_HTTP_Automation_Webhook.json ---
Name: Enrich Company Data from Google Sheet with OpenAI Agent and Scraper Tool
Description: # Enrich Company Data from Google Sheet with OpenAI Scraper Agent

This workflow demonstrates how to enrich data from a list of companies in a spreadsheet. While this workflow is production-ready if all steps are followed, adding error handling would enhance its robustness.

## Impportant notes

- **Check legal regulations**: This workflow involves scraping, so make sure to check the legal regulations around scraping in your country before getting started. Better safe than sorry!
- **Mind those tokens**: OpenAI tokens can add up fast, so keep an eye on usage unless you want a surprising bill that could knock your socks off! üí∏

## Main Workflow

### Node 1 - `Webhook`
This node triggers the workflow via a webhook call. You can replace it with any other trigger of your choice, such as form submission, a new row added in Google Sheets, or a manual trigger.

### Node 2 - `Get Rows from Google Sheet`
This node retrieves the list of companies from your spreadsheet. The columns in this Google Sheet are:

- **Company**: The name of the company
- **Website**: The website URL of the company  
  *These two fields are required at this step.*

- **Business Area**: The business area deduced by OpenAI from the scraped data
- **Offer**: The offer deduced by OpenAI from the scraped data
- **Value Proposition**: The value proposition deduced by OpenAI from the scraped data
- **Business Model**: The business model deduced by OpenAI from the scraped data
- **ICP**: The Ideal Customer Profile deduced by OpenAI from the scraped data
- **Additional Information**: Information related to the scraped data, including:
  - **Information Sufficiency**:
    - *Description*: Indicates if the information was sufficient to provide a full analysis.
    - *Options*: "Sufficient" or "Insufficient"
  - **Insufficient Details**:
    - *Description*: If labeled "Insufficient," specifies what information was missing or needed to complete the analysis.
  - **Mismatched Content**:
    - *Description*: Indicates whether the page content aligns with that of a typical company page.
  - **Suggested Actions**:
    - *Description*: Provides recommendations if the page content is insufficient or mismatched, such as verifying the URL or searching for alternative sources.

### Node 3 - `Loop Over Items`
This node ensures that, in subsequent steps, the website in "extra workflow input" corresponds to the row being processed. You can delete this node, but you'll need to ensure that the "query" sent to the scraping workflow corresponds to the website of the specific company being scraped (rather than just the first row).

### Node 4 - `AI Agent`
This AI agent is configured with a prompt to extract data from the content it receives. The node has three sub-nodes:
  
  - **OpenAI Chat Model**: The model used is currently `gpt4-o-mini`.
  - **Call n8n Workflow**: This sub-node calls the workflow to use ScrapingBee and retrieves the scraped data.
  - **Structured Output Parser**: This parser structures the output for clarity and ease of use, and then adds rows to the Google Sheet.

### Node 5 - `Update Company Row in Google Sheet`
This node updates the specific company's row in Google Sheets with the enriched data.

## Scraper Agent Workflow

### Node 1 - `Tool Called from Agent`
This is the trigger for when the AI Agent calls the Scraper. A query is sent with:
- Company name
- Website (the URL of the website)

### Node 2 - `Set Company URL`
This node renames a field, which may seem trivial but is useful for performing transformations on data received from the AI Agent.

### Node 3 - `ScrapingBee: Scrape Company's Website`
This node scrapes data from the URL provided using ScrapingBee. You can use any scraper of your choice, but ScrapingBee is recommended, as it allows you to configure scraper behavior directly. Once configured, copy the provided "curl" command and import it into n8n.

### Node 4 - `HTML to Markdown`
This node converts the scraped HTML data to Markdown, which is then sent to OpenAI. The Markdown format generally uses fewer tokens than HTML.

## Improving the Workflow
It's always a pleasure to share workflows, but creators sometimes want to keep some magic to themselves ‚ú®. Here are some ways you can enhance this workflow:

- Handle potential errors
- Configure the scraper tool to scrape other pages on the website. Although this will cost more tokens, it can be useful (e.g., scraping "Pricing" or "About Us" pages in addition to the homepage).
- Instead of Google Sheets, connect directly to your CRM to enrich company data.
- Trigger the workflow from form submissions on your website and send the scraped data about the lead to a Slack or Teams channel.


--- Workflow: 1695_Limit_Code_Automation_Scheduled.json ---
Name: Github Releases
Description: ## GitHub Releases Config
- Edit the JavaScript array within this node's code area.
- Modify or add the repositories you want to follow. Each repository object needs a `name` (custom display name) and `github` (format: `owner/repo`).
- Example:
   ```javascript
   {
    "name": "n8n", // Custom display name
    "github": "n8n-io/n8n" // GitHub path
   },
   {
    "name": "LobeChat",
    "github": "lobehub/lobe-chat"
   }
   // ... add more repositories
   ```

--- Workflow: 1696_Wait_Code_Automate_Webhook.json ---
Name: Automated Content SEO Audit Report
Description: ## Content SEO Audit Report
A workflow powered by DataForSEO and Google Search Analytics API that generate a comprehensive content audit report for any website up to 1000 pages, 100% customized to your brand's colors.

### Set up instructions:
1. Add a new credential "Basic Auth" by following this [guide](https://docs.n8n.io/integrations/builtin/credentials/httprequest/). You can get your DataForSEO API credentials [here](https://app.dataforseo.com/api-access). DataForSEO offer a free $1 credit when you register, which is plenty enough to test the workflow as the cost is about ~$0.20 per 500-page report. Finally, assign your Basic Auth account to the node "Create Task", "Check Task Status", "Get Raw Audit Data" and "Get Source URLs Data".
2. Add a new credential "Google OAuth2 API" by following this [guide](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/). Assign your Google OAuth2 account to the node "Query GSC API".
3. Update the "Set Fields" node with the following information:
- dfs_domain: The website domain you want to crawl.
- company_name: Your company name (Will be displayed on the final report)
- company_website: Your company website URL (Will be displayed on the final report)
- company_logo_url: Your company logo URL (Will be displayed on the final report)
- brand_primary_color: Your primary brand color. (Will be used to customize the final report to your brand's colors)
- brand_secondary_color: Your secondary brand color. (Will be used to customize the final report to your brand's colors)
- gsc_property_type: Set to "domain" or "url" depending of the property type set in your Google Search Console account for the target website (dfs_domain).
4. Start the workflow. Once done, download the HTML file in the last node "Download Report". 

Voil√†! You have a comprehensive content audit report ready to be sent to your client via email, customized to your own branding.

**Note**: The workflow take approximately 20 minutes to run for ~500 pages. If you want to customize this workflow for your own need, feel free to [contact us](https://customworkflows.ai/work-with-us).

--- Workflow: 1697_Schedule_HTTP_Monitor_Scheduled.json ---
Name: Amazon Product Price Tracker
Description: # Amazon Product Price Tracker

This workflow automates price monitoring for Amazon products using the ScrapeOps API. It tracks price changes over time, alerts you when prices cross your defined thresholds, and maintains a historical record of all price movements.

## Features
- Scheduled price checks for multiple Amazon products
- Price change calculations (absolute and percentage)
- Smart alerting based on customizable thresholds
- Automated email notifications with detailed price information
- Historical price tracking for trend analysis

--- Workflow: 1698_Stickynote_Notion_Automation_Triggered.json ---
Name: Whisper Transkription copy
Description: ## Trigger and Download of audio file

In this example I'm using Google Drive. 
As soon as a audio file is uploaded the trigger will start and download the audio file. 

--- Workflow: 1699_Code_Editimage_Automation_Webhook.json ---
Name: N/A
Description: ## Try Me Out!

### This workflow converts a bank statement to markdown, faithfully capturing the details using the power of Vision Language Models ("VLMs"). The resulting markdown can then be parsed again by your standard LLM to extract data such as identifying all deposit table rows in the document.

This workflow is able to handle both downloaded PDFs as well as scanned PDFs. Be sure to protect sensitive data before running this workflow.

### Need Help?
Join the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!

--- Workflow: 1700_HTTP_Webhook_Process_Webhook.json ---
Name: Transform Image to Lego Style Using Line and Dall-E
Description: No description found in sticky notes.

--- Workflow: 1701_Telegram_Stickynote_Send_Triggered.json ---
Name: Translate Telegram audio messages with AI (55 supported languages) v1
Description: ## Translation

- Converts from speech to text.

- Translates the language from the native language to translated language (as specified in settings node)



--- Workflow: 1702_Manual_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: 1] In ElevenLabs, add a voice to your [voice lab](https://elevenlabs.io/voice-lab) and copy its ID. Open this node and add the ID there

--- Workflow: 1703_Stickynote_Webhook_Automation_Webhook.json ---
Name: Travel Planning Agent with Couchbase Vector Search, Gemini 2.0 Flash and OpenAI
Description: ## AI Travel Agent Powered by Couchbase.

### You will need to:
1. Setup your Google API Credentials for the Gemini LLM
2. Setup your OpenAI Credentials for the OpenAI embedding nodes.
3. Create a Couchbase cluster (using [Couchbase Capella](https://cloud.couchbase.com/) in the cloud, or Couchbase Server)
4. Add [Database credentials](https://docs.couchbase.com/cloud/clusters/manage-database-users.html#create-database-credentials) with appropriate permissions for the operations you want to perform
5. Configure [Allowed IP addresses](https://docs.couchbase.com/cloud/clusters/allow-ip-address.html) for your n8n instance. Use `0.0.0.0/0` for easier testing.
6. Create a bucket, scope, and collection. We recommend the following:
   - Bucket: `travel-agent`
   - Scope: `vectors`
   - Collection: `points-of-interest`
7. Navigate to the Data Tools, click the Search tab, and click Import Search Index. Upload the following JSON file found [here](https://gist.github.com/ejscribner/6f16343d4b44b1af31e8f344557814b0).


Once all of that is configured you will need to send the loading webhook with some data points (see example).

This should create vectorized data in  `points-of-interest` collection.

Once you have data points there try to ask the Agent questions about the data points and test the response. Eg. "Where should I go for a romantic getaway?"

--- Workflow: 1704_Manual_Schedule_Automation_Scheduled.json ---
Name: N/A
Description: ## Scheduled posting 
Write a tweet every 6 hours and randomize the minutes that it's posted at to make it seem natural.


--- Workflow: 1705_Wait_Manual_Automate_Webhook.json ---
Name: Fully automated Video Captions generation with json2video
Description: ## Check video status

--- Workflow: 1706_Summarize_Stickynote_Automation_Triggered.json ---
Name: Jira Retrospective
Description: ## Epic Done?
This Node is Triggered on any issue change in Jira. However it only triggers the automation when the Epic status is changed to **Done**

--- Workflow: 1707_Manual_Stickynote_Automate_Webhook.json ---
Name: Scrape Web Data with Bright Data, Google Gemini and MCP Automated AI Agent
Description: ## Bright Data Web Scraper

--- Workflow: 1708_Telegram_Stickynote_Create_Webhook.json ---
Name: Agentic Telegram AI bot with LangChain nodes and new tools
Description: ## Generate an image with Dall-E-3 and send it via Telegram

--- Workflow: 1709_Linkedin_Wordpress_Automation_Webhook.json ---
Name: AI Social Media Publisher from WordPress
Description: Get the Post ID of the Wordpress article on which you want to generate the caption for social media

--- Workflow: 1710_Code_Schedule_Automation_Scheduled.json ---
Name: UTM Link Creator & QR Code Generator with Scheduled Google Analytics Reports
Description: Create a marketing link with UTM parameters. Easily store in database and have QR code created and ready as well.

Type in requirements:
website URL
campaign id
campaign source
campaign medium
campaign name
campaign term



--- Workflow: 1711_Limit_Code_Automate_Webhook.json ---
Name: Selenium Ultimate Scraper Workflow
Description: ## N8N Ultimate Scraper - Workflow

This workflow's objective is to collect data from any website page, whether it requires login or not.

For example, you can collect the number of stars of the n8n-ultimate-scraper project on GitHub.

## Requirements
**Selenium Container**: Selenium is an open-source automation framework for web applications, enabling browser control and interaction through scripts in various programming languages.
You can deploy the Docker Compose file from the associated GitHub project to set up your Selenium container and configuration: https://github.com/Touxan/n8n-ultimate-scraper

**Residential Proxy Server**: To scrape data at scale without being blocked, I personally recommend GeoNode. They offer affordable, high-quality residential proxies: https://geonode.com/invite/98895

**OpenAI API Key**: For using GPT-4.

## Optional
Session Cookies Collection: To use login functionality with the n8n Ultimate Scraper, you need to collect session cookies from the target website. You can do this using the extension created for this application in the GitHub project: https://github.com/Touxan/n8n-ultimate-scraper. Follow the installation procedure to use it.

## How to use 
Deploy the project with all the requiremnts and request your webhook.

**Example of request**:
curl -X POST http://localhost:5678/webhook-test/yourwebhookid \
-H "Content-Type: application/json" \
-d '{
 "subject": "Hugging Face",
 "Url": "github.com",
 "Target data": [
 {
 "DataName": "Followers",
 "description": "The number of followers of the GitHub page"
 },
 {
 "DataName": "Total Stars",
 "description": "The total numbers of stars on the different repos"
 }
 ],
 "cookies": []
}'

You can also scrape link like this : 
curl -X POST http://localhost:5678/webhook-test/67d77918-2d5b-48c1-ae73-2004b32125f0 \
-H "Content-Type: application/json" \
-d '{
 "Target Url": "https://github.com",
 "Target data": [
 {
 "DataName": "Followers",
 "description": "The number of followers of the GitHub page"
 },
 {
 "DataName": "Total Stars",
 "description": "The total numbers of stars on the different repo"
 }
]
}'

**Note**
The maximum nimber of Target data is 5.

--- Workflow: 1712_Telegram_Automation_Webhook.json ---
Name: Ultimate Personal Assistant
Description: No description found in sticky notes.

--- Workflow: 1713_Code_Webhook_Automate_Webhook.json ---
Name: Workflow dashboard with mermaid.js
Description: ## IMPORTANT NOTE FOR CLOUD USERS
### Since the cloud version doesn't support environmental variables, please update the following fields:

1. **instance_url**. Change the `{{$env["N8N_PROTOCOL"]}}://{{$env["N8N_HOST"]}}` expression to your cloud instance URL
2. **webhook_path**. Change the `{{$env["N8N_ENDPOINT_WEBHOOK"] || "webhook"}}` simply to the `webhook`. So that the production webhook is called correclty.

--- Workflow: 1714_Manual_Start_Update_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1715_Error_Telegram_Automation_Webhook.json ---
Name: template in store
Description: ## Description
This automation allows you to upload a video to a configured Google Drive folder, and it will automatically create descriptions and upload it to Instagram and TikTok.

## How to Use
1. Generate an API token at upload-post.com and add to Upload to Tiktok and Upload to Instagram nodes
2. Configure your Google Drive folder
3. Customize the OpenAI prompt for your specific use case
4. Optional: Configure Telegram for error notifications

## Requirements
- upload-post.com account
- Google Drive account
- OpenAI API key


--- Workflow: 1716_Limit_Schedule_Automation_Scheduled.json ---
Name: RAG on living data
Description: ## Switch trigger (optional)
If you are on the cloud plan, consider switching to the Notion Trigger Node instead, to save on executions.

--- Workflow: 1717_Wait_Code_Automation_Webhook.json ---
Name: TopSourcer - Finds LinkedIn Profiles using natural language
Description: Click "Open Chat" after activating the workflow.

Here, paste in a job description or describe your ideal candidate.

--- Workflow: 1718_Schedule_Filter_Automation_Scheduled.json ---
Name: N/A
Description: ## üí´ To setup this template

1. Add your Todoist credentials
2. Add your OpenAI credentials
3. Set your project names and add priority

--- Workflow: 1719_Stickynote_Automation_Triggered.json ---
Name: Use any LLM-Model via OpenRouter
Description: ## Settings
Specify the model

--- Workflow: 1720_HTTP_Stickynote_Import_Webhook.json ---
Name: get_a_web_page
Description: ## Send URL got Crawl
This can be reused by Ai Agents and any Workspace to crawl a site. All that Workspace has to do is send a request:

```json
 {
 "url": "Some URL to Get"
 }
```

--- Workflow: 1721_Splitout_Manual_Automate_Webhook.json ---
Name: Automate Etsy Data Mining with Bright Data Scrape & Google Gemini
Description: ## Note

Deals with the Esty web scraping by utilizing the Bright Data Web Unlocker Product.

The Information Extraction node being used to demonstrate the usage of the N8N AI capabilities.

**Please make sure to set the Indeed search query and update the Webhook Notification URL**

--- Workflow: 1722_Webhook_Code_Automation_Webhook.json ---
Name: Basic PDF Digital Sign Service
Description: # Cryptographic Operations
## Generate Certificate and  Sign PDF

--- Workflow: 1723_Airtabletool_Stickynote_Automation_Triggered.json ---
Name: AI Social Media Caption Creator
Description: # Welcome to my AI Social Media Caption Creator Workflow!

This workflow automatically creates a social media post caption in an editorial plan in Airtable. It also uses background information on the target group, tonality, etc. stored in Airtable.

## This workflow has the following sequence:

1. Airtable trigger (scan for new records every minute)
2. Wait 1 Minute so the Airtable record creator has time to write the Briefing field
3. retrieval of Airtable record data
4. AI Agent to write a caption for a social media post. The agent is instructed to use background information stored in Airtable (such as target group, tonality, etc.) to create the post.
5. Format the output and assign it to the correct field in Airtable.
6. Post the caption into Airtable record.

## The following accesses are required for the workflow:
- Airtable Database: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/airtable)
- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)

### Example of an editorial plan in Airtable: https://airtable.com/appIXeIkDPjQefHXN/shrwcY45g48RpcvvC
For this workflow you need the Airtable fields "created_at", "Briefing" and "SoMe_Text_AI"

You can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz

--- Workflow: 1724_Code_Schedule_Automation_Scheduled.json ---
Name: Todoist Weekly Review Template
Description: No description found in sticky notes.

--- Workflow: 1725_HTTP_Code_Process_Webhook.json ---
Name: Convert Parquet, Avro, ORC & Feather via ParquetReader to JSON
Description: ### ‚úÖ **How to Use This Flow**

#### üì• Trigger via File Upload

You can trigger this flow by sending a `POST` request with a file using **curl**, **Postman**, or **from another n8n flow**.

#### üîß Example (via `curl`):
```bash
curl -X POST http://localhost:5678/webhook-test/convert \
-F "file=@converted.parquet"
```
> Replace `converted.parquet` with your local file path. You can also send Avro, ORC or Feather files.

#### üîÅ Reuse from Other Flows
You can **reuse this flow** by calling the webhook from another n8n workflow using an **HTTP Request** node.  
Make sure to send the file as **form-data** with the field name `file`.

#### üîç What This Flow Does:
- Receives the uploaded file via webhook (`file`)
- Sends it to `https://api.parquetreader.com/parquet` as `multipart/form-data` (field name: `file`)
- Receives parsed data, schema, and metadata


--- Workflow: 1726_Code_Webhook_Automation_Webhook.json ---
Name: Docsify example
Description: ## Main Docsify webhook
In response, n8n serves the main html page with the [Docsify JS library](https://docsify.js.org/)

--- Workflow: 1727_Wait_Splitout_Create_Webhook.json ---
Name: address validation
Description: ## Get and Prepare Oder Data

--- Workflow: 1728_Code_Filter_Import_Webhook.json ---
Name: [1/3 - anomaly detection] [1/2 - KNN classification] Batch upload dataset to Qdrant (crops dataset)
Description: In the next workflow, we're going to use Qdrant to get the number of images belonging to each crop type defined by `crop_name` (for example, *"cucumber"*). 
To get this information about counts in payload fields, we need to create an index on that field to optimise the resources (it needs to be done once). That's what is happening here

--- Workflow: 1729_HTTP_Executeworkflow_Automation_Webhook.json ---
Name: [2/2] KNN classifier (lands dataset)
Description: Here we're classifying existing types of satellite imagery of land types:
- 'agricultural',
- 'airplane',
- 'baseballdiamond',
- 'beach',
- 'buildings',
- 'chaparral',
- 'denseresidential',
- 'forest',
- 'freeway',
- 'golfcourse',
- 'harbor',
- 'intersection',
- 'mediumresidential',
- 'mobilehomepark',
- 'overpass',
- 'parkinglot',
- 'river',
- 'runway',
- 'sparseresidential',
- 'storagetanks',
- 'tenniscourt'


--- Workflow: 1730_HTTP_Executeworkflow_Automation_Webhook.json ---
Name: [2/2] KNN classifier (lands dataset)
Description: Here we're classifying existing types of satellite imagery of land types:
- 'agricultural',
- 'airplane',
- 'baseballdiamond',
- 'beach',
- 'buildings',
- 'chaparral',
- 'denseresidential',
- 'forest',
- 'freeway',
- 'golfcourse',
- 'harbor',
- 'intersection',
- 'mediumresidential',
- 'mobilehomepark',
- 'overpass',
- 'parkinglot',
- 'river',
- 'runway',
- 'sparseresidential',
- 'storagetanks',
- 'tenniscourt'


--- Workflow: 1731_Splitout_Code_Automation_Webhook.json ---
Name: [2/3] Set up medoids (2 types) for anomaly detection (crops dataset)
Description: ## Setting Up Medoids for Anomaly Detection
### Preparatory workflow to set cluster centres and cluster threshold scores, so anomalies can be detected based on these thresholds
Here, we're using two approaches to set up these centres: the upper branch is the *"distance matrix approach"*, and the lower is the *"multimodal embedding model approach"*.

--- Workflow: 1732_HTTP_Executeworkflow_Automation_Webhook.json ---
Name: [3/3] Anomaly detection tool (crops dataset)
Description: We are working here with crops dataset: 
Existing (so not anomalies) crops images in dataset are:
- 'pearl_millet(bajra)',
- 'tobacco-plant',
- 'cherry',
- 'cotton',
- 'banana',
- 'cucumber',
- 'maize',
- 'wheat',
- 'clove',
- 'jowar',
- 'olive-tree',
- 'soyabean',
- 'coffee-plant',
- 'rice',
- 'lemon',
- 'mustard-oil',
- 'vigna-radiati(mung)',
- 'coconut',
- 'gram',
- 'pineapple',
- 'sugarcane',
- 'sunflower',
- 'chilli',
- 'fox_nut(makhana)',
- 'jute',
- 'papaya',
- 'tea',
- 'cardamom',
- 'almond'


--- Workflow: 1733_Webhook_Slack_Automate_Webhook.json ---
Name: N/A
Description: ![Imgur](https://i.imgur.com/iKyMV0N.png)
## Events Webhook Trigger
The first node receives all messages from Slack API via Subscription Events API. You can find more information about setting up the subscription events API by [clicking here](https://api.slack.com/apis/connections/events-api). 

The second node extracts the payload from slack into an object that n8n can understand. 

--- Workflow: 1734_Stickynote_Automation_Triggered.json ---
Name: Use any LLM-Model via OpenRouter
Description: ## Settings
Specify the model

--- Workflow: 1735_Manual_Airtop_Automation_Triggered.json ---
Name: Sell a Used Car
Description: No description found in sticky notes.

--- Workflow: 1736_Wait_Schedule_Automation_Webhook.json ---
Name: N/A
Description: ### Part A. Generate Base Images
Before we can run our visual regression tests, we must generate a series of base screenshots to compare against. This part of the workflow uses an external website screenshotting service, [Apify.com](https://www.apify.com?fpr=414q6), to achieve this. This part of the workflow should only be run when we want to update our base screenshots.

--- Workflow: 1737_HTTP_Stickynote_Automation_Webhook.json ---
Name: N/A
Description: ### Overview 
- This workflow aims to provide data visualization capabilities to a native SQL Agent. 
- Together, they can help foster data analysis and data visualization within a team. 
- It uses the native SQL Agent that works well and adds visualization capabilities thanks to OpenAI‚Äôs Structured Output and Quickchart.io. 

### How it works 
1. Information Extraction: 
 - The Information Extractor identifies and extracts the user's question. 
 - If the question includes a visualization aspect, the SQL Agent alone may not respond accurately. 
2. SQL Querying: 
 - It leverages a regular SQL Agent: it connects to a database, queries it, and translates the response into a human-readable format. 
3. Chart Decision: 
 - The Text Classifier determines whether the user would benefit from a chart to support the SQL Agent's response. 
4. Chart Generation: 
 - If a chart is needed, the sub-workflow dynamically generates a chart and appends it to the SQL Agent‚Äôs response. 
 - If not, the SQL Agent‚Äôs response is output as is. 
5. Calling OpenAI for Chart Definition: 
 - The sub-workflow calls OpenAI via the HTTP Request node to retrieve a chart definition. 
6. Building and Returning the Chart: 
 - In the "Set Response" node, the chart definition is appended to a Quickchart.io URL, generating the final chart image. 
 - The AI Agent returns the response along with the chart. 

### How to use it 
- Use an existing database or create a new one. 
- For example, I've used [this Kaggle dataset](https://www.kaggle.com/datasets/ihelon/coffee-sales/versions/15?resource=download) and uploaded it to a Supabase DB. 
- Add the PostgreSQL or MySQL credentials. 
- Alternatively, you can use SQLite binary files (check [this template](https://n8n.io/workflows/2292-talk-to-your-sqlite-database-with-a-langchain-ai-agent/)). 
- Activate the workflow. 
- Start chatting with the AI SQL Agent. 
- If the Text Classifier determines a chart would be useful, it will generate one in addition to the SQL Agent's response. 

### Notes 
- The full Quickchart.io specifications have not been fully integrated, so there may be some glitches (e.g., radar graphs may not display properly due to size limitations). 

--- Workflow: 1738_Schedule_Comparedatasets_Automation_Scheduled.json ---
Name: GoogleSheets MySQL Integration
Description: ## Create a new Google Form with several variables:

-Email Address
-Your name 
-What event are you organizing? 
-When does the event take place? 
-Where does the event take place? 
-Please tell us more about the event. 

- Timestamp variable is added automatically
- Add "DB Status" manually in the Google Sheet


--- Workflow: 1739_Manual_GoogleSheets_Create_Triggered.json ---
Name: List Builder
Description: No description found in sticky notes.

--- Workflow: 1740_Webhook_Respondtowebhook_Automation_Webhook.json ---
Name: Validate Seatable Webhooks with HMAC SHA256 Authentication
Description: ## üìå Validate Seatable Webhooks with HMAC SHA256 Authentication

This mini workflow is designed to **securely validate incoming Seatable webhooks** using HMAC SHA256 signature verification.

### üîê What it does:
- Listens for incoming Seatable webhook requests.
- Calculates a SHA256 HMAC hash of the raw request body using your shared secret.
- Compares the computed hash with the `x-seatable-signature` header (after removing the `sha256=` prefix).
- If the hashes match: responds with **200 OK** and forwards the request to subsequent nodes.
- If the hashes don‚Äôt match: responds with **403 Forbidden**.

### ‚ö†Ô∏è Important Notes:
This workflow is provided as a **template** and is not intended to work standalone. **Please duplicate it** and integrate it with your custom logic at the "Add nodes for processing" node.

Configuration steps:
- Set your **secret key** in the ‚ÄúCalculate sha256‚Äù crypto node (replace the placeholder).
- Adjust the webhook path to suit your environment (or set it to "manual" for testing).
- Connect your actual logic after the verification step.


--- Workflow: 1741_Telegram_Gumroad_Create_Webhook.json ---
Name: 2. Add Beehiiv newsletter subscribers from Gumroad sales
Description: ## Trigger on a new Gumroad sale
### Requirements
- A [Gumroad]() account
- A product listed. We used ours [here](https://1node.gumroad.com/l/topaitools)
- Head to Settings > Advanced, and create a new application

### Set up
- Paste your access token on this Gumroad sale trigger

--- Workflow: 1742_Splitout_Nocodb_Automation_Webhook.json ---
Name: Simple LinkedIn profile collector
Description: ### Adaptation required
Get a free tier for serpAPI (Google Search) at serpapi.com

Set up the credentials for serpAPI

Explanations in the [n8n docs](https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolserpapi/)

--- Workflow: 1743_Wait_Code_Sync_Scheduled.json ---
Name: Shopify to Google Sheets Product Sync Automation
Description: This workflow automates the synchronization of product data from a Shopify store to a Google Sheets document, ensuring seamless management and tracking. It retrieves product details such as title, tags, description, and price from Shopify via GraphQL queries. The outcome is a comprehensive list of products neatly organized in Google Sheets for easy access and analysis.

--- Workflow: 1744_Twittertool_Automation_Triggered.json ---
Name: Automatizacion X
Description: No description found in sticky notes.

--- Workflow: 1745_Wait_Code_Automation_Webhook.json ---
Name: High-Level Service Page SEO Blueprint Report
Description: ## Generate High-Level Service Page Blueprint Report
This powerful workflow generates comprehensive SEO blueprints for service pages by analyzing competitor websites and user intent. By examining the structure, headings, and meta information of top-ranking competitors for a specific target keyword, the workflow creates a detailed content strategy tailored to your brand and services, designed to outperform the competition and maximize conversions.

### Setup Instructions:
1. Create a new Jina Reader API key [here](https://jina.ai/api-dashboard/key-manager). You can claim a free API key, which allow you to use up to 1m tokens for free.  
2. Create a new Google Gemini(PaLM) credentials by following the guide [here](https://docs.n8n.io/integrations/builtin/credentials/googleai/#using-geminipalm-api-key). Please note, if you are using the free tier, you need to set the "Waiting Time" to 20s as the free tier allow a maximum of 5 requests per minute.
3. Update the node "Set Fields" with your Jina API Key. Change the Waiting Time to "20" if using free Google Gemini API key. You can change the Gemini model from here as well, in the case Gemini make changes to their Gemini models.
4. Start the form trigger and answer to the following questions:
4.1. Competitors: A list of direct competitors. Up to 5, use their direct service page URL.
4.2. Target Keyword: The query related with your service. (E.g. International accounting services, Chicago cleaning services, etc...)
4.3. Services Offered: Details your complete service offerings. This will be ensure the outline recommended align with your services.
4.4. Brand Name: The name of your brand, your company name.
4.5. Homepage: If you try to rank for a homepage, check that box.
5. Download the .txt file generated at the end, copy/paste it's content (Markdown format) and copy it [here](https://markdownlivepreview.com/). You can after copy/paste the rendered results in Gdocs and share with your client/team.

You can see a demo of the report [here](https://docs.google.com/document/d/1XDJV3zNB7cLPBzaMXstzEl7ZvPrjiuBbet5C5ZlC4bo/edit). 

--- Workflow: 1746_Wait_Code_Monitor_Webhook.json ---
Name: Live link checker
Description: Connect your Google Sheets account.
Ensure your Google Sheet has clearly defined columns:

"Backlink URL": URL of the page containing the backlink.

"Landing page": The exact URL of your website page you're checking the backlink for.

Define your data range explicitly (e.g., D1:E) to accurately fetch these columns. The columns must be named exactly as specified to ensure the workflow functions correctly.

--- Workflow: 1747_HTTP_Stickynote_Automate_Webhook.json ---
Name: Open Deep Research - AI-Powered Autonomous Research Workflow
Description: ## SerpAPI Setup Instructions
1. Obtain your API key from https://serpapi.com/manage-api-key.
2. Save your API key securely in n8n credentials (do not use plain text).

--- Workflow: 1748_Splitout_Code_Automation_Webhook.json ---
Name: Real Estate Market Scanning
Description: ## Main Workflow Flow
This part of the workflow handles the regular scanning and processing of property data. It runs on a schedule to detect new properties or changes to existing ones, then passes the filtered results along for detailed analysis.

--- Workflow: 1749_Todoist_Schedule_Send_Scheduled.json ---
Name: Email mailbox as Todoist tasks
Description: ## Select Trigger
**This workflow will work with many triggers**

--- Workflow: 1750_Schedule_Extractfromfile_Import_Scheduled.json ---
Name: Vector DB Loader from Google Drive
Description: ## Creative Commons License
*License*: **Creative Commons Attribution-ShareAlike 4.0 International** (CC BY-SA 4.0)

*Author*: **AlexK1919**
You are free to use, adapt, and share this workflow‚Äîeven commercially‚Äîunder the terms of this license.

Full license details: https://creativecommons.org/licenses/by-sa/4.0/

--- Workflow: 1751_Filter_Schedule_Automation_Scheduled.json ---
Name: Weekly_Shodan_Query___Report_Accidents__no_function_node_
Description: ![Shodan](https://i.imgur.com/tK0RXSK.png)
## Format port service data as a Markdown table
After identifying the open ports, the next step is to organize this information neatly. This node converts the data gathered from the previous steps into a `Markdown table format`. 

It's crucial for readability and makes it easier to parse through the port and service information. This formatted data can then be seamlessly integrated into documentation or reports, ensuring that the information is accessible and understandable for further analysis or sharing with team members.

--- Workflow: 1752_Postgres_Wordpress_Automation_Webhook.json ---
Name: RAG & GenAI App With WordPress Content
Description: # Workflow 1 : Initial Embedding 
## Use this workflow to create the initial embedding for your WordPress website content



--- Workflow: 1753_Splitout_Code_Automation_Webhook.json ---
Name: Write a WordPress post with AI (starting from a few keywords)
Description: ## Data check

--- Workflow: 1754_Executiondata_Slack_Automate_Webhook.json ---
Name: ClockifyBlockiaWorkflow
Description: No description found in sticky notes.

--- Workflow: 1755_Datetime_Code_Automation_Webhook.json ---
Name: Testing Mulitple Local LLM with LM Studio
Description: ## üß†Text Analysis
### Readability Score Ranges:
When testing model responses, readability scores can range across different levels. Here‚Äôs a breakdown:

- **90‚Äì100**: Very easy to read (5th grade or below)
- **80‚Äì89**: Easy to read (6th grade)
- **70‚Äì79**: Fairly easy to read (7th grade)
- **60‚Äì69**: Standard (8th to 9th grade)
- **50‚Äì59**: Fairly difficult (10th to 12th grade)
- **30‚Äì49**: Difficult (College)
- **0‚Äì29**: Very difficult (College graduate)
- **Below 0**: Extremely difficult (Post-graduate level)


--- Workflow: 1756_Code_HTTP_Automation_Webhook.json ---
Name: Auto Knowledge Base Article Generator
Description: ## Writer Agent

- Focuses on writing for all the fields in contentful
- Has a specified format for input and output
- Handles implementing feedback from editor agent

--- Workflow: 1757_Splitout_Code_Automation_Webhook.json ---
Name: Publish Image Post to Bluesky
Description: ## Define Your Post Caption Here
You can set
* the text caption of your post (max 300 characters)
* image URLs (max of 4 images at 1MB each)

--- Workflow: 1758_Code_HTTP_Automation_Webhook.json ---
Name: Complete Youtube
Description: Main Workflow

--- Workflow: 1759_Code_Filter_Monitor_Triggered.json ---
Name: Monitor Competitor Pricing
Description: No description found in sticky notes.

--- Workflow: 1760_Splitout_GitHub_Automate_Webhook.json ---
Name: Restore your workflows from GitHub
Description: ## Restore from GitHub 
This workflow will restore all instance workflows from GitHub backups.


### Setup
Open `Globals` node and update the values below üëá

- **repo.owner:** your Github username
- **repo.name:** the name of your repository
- **repo.path:** the folder to use within the repository.


If your username was `john-doe` and your repository was called `n8n-backups` and you wanted the workflows to go into a `workflows` folder you would set:

- repo.owner - john-doe
- repo.name - n8n-backups
- repo.path - workflows/


--- Workflow: 1761_Code_Extractfromfile_Automate_Triggered.json ---
Name: Automated Image Metadata Tagging
Description: # Welcome to my Automated Image Metadata Tagging Workflow!

This workflow automatically analyzes the image content with the help of AI and writes it directly back into the image file as keywords.

## This workflow has the following sequence:

1. Google Drive trigger (scan for new files added in a specific folder)
2. Download the added image file
3. Analyse the content of the image and extract the file as Base64 code
4. Merge Metadata and Base64 Code
5. Code Node to write the Keywords into the Metadata (dc:subject)
6. Convert to file and update the original file in the Google Drive folder

## The following accesses are required for the workflow:
- Google Drive: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/google)
- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)

You can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz

--- Workflow: 1762_Form_Aggregate_Automation_Triggered.json ---
Name: SEO Blog Generator with GPT-4o, Perplexity, and Telegram Integration
Description: ## Write SEO Optimized Blog Post




--- Workflow: 1763_Wait_Schedule_Automation_Webhook.json ---
Name: Image-to-3D
Description: # Image-to-3D


This workflow allows users to convert a 2D image into a 3D model by integrating multiple AI and web services. The process begins with a user uploading or providing an image URL, which is then sent to a generative AI model capable of interpreting the content and generating a 3D representation in .glb format. The model is then stored and a download link is returned to the user.

![image](https://i.postimg.cc/1Xd20z4R/3d.png)

--- Workflow: 1764_Extractfromfile_HTTP_Automation_Webhook.json ---
Name: Attachments Gmail to drive and google sheets
Description: ## Setup
1. Setup your **Gmail** and **Google Drive** credentials
2. Setup your **Google Sheets** credentials
3. Setup your **Openai** api key

--- Workflow: 1765_Code_Filter_Process_Triggered.json ---
Name: Colombian Invoices Processing
Description: # üßæ Colombian electronic invoices processing

This N8N workflow automates the extraction and organization of **personal electronic invoices** in Colombia received via **Gmail**. It includes the following key steps:

## üîÅ Flow Summary

1. **Email Trigger**
   - Polls Gmail every **30 minutes** for emails with `.zip` attachments (assumed to contain invoices).
   - Following DIAN requirements in Colombia

2. **ZIP File Handling**
   - Extracts all files.
   - Filters only **PDF** and **XML** files for processing.

3. **Data Extraction & Processing**
   - Uses **LangChain Agent + OpenAI (GPT-4o-mini)** to extract:
     - Tipo de documento (Factura / Nota Cr√©dito)
     - N√∫mero de factura
     - Fecha de emisi√≥n (YYYY-MM-DD)
     - NIT emisor y receptor (sin d√≠gito de verificaci√≥n)
     - Raz√≥n social del emisor
     - Subtotal, IVA, Total
     - CUFE
     - Resumen de compra (max 20 words, formatted sentence)

4. **Validation**
   - Ensures **Total = Subtotal + IVA** using a calculator node.

5. **Storage**
   - Uploads the original PDF to **Google Drive**.
   - Renames the file to: `YYYY-MM-DD-NUMERO_FACTURA.pdf`.
   - Inserts or updates invoice details in **Google Sheets** using a unique `Key` (`NIT_Emisor + Numero_Factura`) to prevent duplication.

---

> ‚öôÔ∏è Designed for personal use with minimal latency tolerance and high automation reliability.

--- Workflow: 1766_Manual_GoogleSheets_Automation_Triggered.json ---
Name: Analyze Reddit Posts with AI to Identify Business Opportunities
Description: # Data Collection
## Retrieves recent popular posts from specified Reddit communities
## Filters content by engagement metrics and keywords

--- Workflow: 1767_Form_HTTP_Automation_Webhook.json ---
Name: Youtube Video Transcript Extraction
Description: No description found in sticky notes.

--- Workflow: 1768_Stopanderror_Wait_Automation_Webhook.json ---
Name: airflow dag_run
Description: No description found in sticky notes.

--- Workflow: 1769_Jira_Stickynote_Sync_Triggered.json ---
Name: Sync Jira issues with subsequent comments to Notion database
Description: ### `IF` & `Switch` nodes
These conditional nodes (`IF` and `Switch`) determine which Notion [**CRUD**](https://www.sumologic.com/glossary/crud/) operations will be performed.

--- Workflow: 1770_Webhook_Extractfromfile_Automation_Webhook.json ---
Name: Image-Based Data Extraction API using Gemini AI
Description: ## Sample API Call (cURL) 
```
curl --request GET \
  --url https://your_domain.com/webhook/data-extractor \
  --data '{
  "image_url":"https://www.immihelp.com/nri/images/sample-pan-card-front.jpg",
  "Requirement":"extract the details from the image",
  "properties": {
        "PAN Number": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Date of Birth": {
          "type": "string"
        },
        "Valid": {
          "type": "boolean"
        }
      }
}'
```

--- Workflow: 1771_Wait_Code_Automate_Webhook.json ---
Name: Automated Content Generation & Publishing - Wordpress
Description: ## Automated Article Scheduling

**1. Fast Bulk Article Generation**
Quickly create multiple AI-generated articles.
Efficiently streamline content creation.
Reduces manual effort while maintaining quality.

**2. Workflow Testing Before Execution**
Manually test the workflow for debugging.
Ensure each step runs as expected.
Optimize before full automation.

**3. Automated & Randomized Publishing**
Schedule posts at predefined intervals.
Introduce random delays for a natural posting pattern.
Prevents overly predictable publishing behavior.

--- Workflow: 1772_Filter_Rssfeedread_Monitor_Scheduled.json ---
Name: Monitor_security_advisories
Description: ![Shodan](https://i.imgur.com/PcOuvAL.png)
## Workflow Overview
This n8n workflow is designed to streamline security oversight by fetching advisories from Palo Alto's feed and filtering out alerts not pertinent to your products. 

By utilizing a dynamic filter system, it excludes unrelated advisories, ensuring that your team receives only relevant security updates. 

Coupled with a sample database of emails, this workflow offers a customizable solution to align with any corporate email directory, providing a strong foundation for your security information management strategy. 

## Execution Schedule

Scheduled to run every 24 hours at 1 am. If you change this timer, ensure to update the `Deduplicate Advisories` section to match. 


--- Workflow: 1773_HTTP_Stripe_Sync_Webhook.json ---
Name: Stripe Payment Order Sync ‚Äì Auto Retrieve Customer & Product Purchased
Description: No description found in sticky notes.

--- Workflow: 1774_Splitout_Manual_Automation_Webhook.json ---
Name: Extract Business Leads from Google Maps with Dumpling AI to Google Sheets
Description: #### üîç Workflow Goal
Automatically search Google Maps using Dumpling AI based on a keyword (e.g., best restaurants in New York), extract results, and log them into a structured Google Sheet.

## üöÄ Workflow Steps
1. **Manual Trigger**
   - Starts the workflow when testing manually.

2. **Dumpling AI Google Search**
   - Sends a POST request to Dumpling AI to search for locations on Google Maps based on your query.

3. **Split Out Node**
   - Breaks the `places[]` array into individual items so each result can be handled separately.

4. **Google Sheets Node**
   - Appends each place‚Äôs data (name, address, phone, website, rating, etc.) into a specific tab of your Google Sheets.

##### üß† Notes
- The search query is currently set to: `"best+restaurants+in+New+York"`
- Output columns include rating, price level, website, phone, booking links, etc.
- Each run consumes Dumpling AI credits per query.
- You can customize search keywords or location in the HTTP Request body.

#### ‚úÖ Tip
To automate this regularly, change the trigger node to a **Schedule Trigger** and add dynamic query input using a **Set** or **Webhook** node.



--- Workflow: 1775_Telegram_Code_Import_Triggered.json ---
Name: AI-Driven WooCommerce Product Importer with SEO
Description: ## STEP 1
- Install Yoast SEO Plugin on Wordpress
- Add this code in function.php file

```
function abilita_yoast_meta_api() {
    $meta_keys = ['_yoast_wpseo_title', '_yoast_wpseo_metadesc'];

    foreach ($meta_keys as $meta_key) {
        register_post_meta('post', $meta_key, array(
            'type' => 'string',
            'description' => "Meta Yoast $meta_key per i post",
            'single' => true,
            'show_in_rest' => true, 
        ));

        register_post_meta('page', $meta_key, array(
            'type' => 'string',
            'description' => "Meta Yoast $meta_key per le pagine",
            'single' => true,
            'show_in_rest' => true,
        ));
    }
}
add_action('init', 'abilita_yoast_meta_api');
```

--- Workflow: 1776_Manual_Ftp_Automation_Triggered.json ---
Name: Qdrant Vector Database Embedding Pipeline
Description: ### Fetch JSON File List
**Node:** FTP (all files)
**Operation:** List
**Path:** <file path>

Recursively lists all .json files prepared for embedding.

--- Workflow: 1777_Error_Postgres_Send_Triggered.json ---
Name: Log errors and avoid sending too many emails
Description: # Log errors and avoid sending too many emails

## Use case

Most of the time, it‚Äôs necessary to log all errors that occur. However, in some cases, a scheduled task or service consuming excessive resources might trigger a surge of errors.

To address this, we can log all errors but limit alerts to a maximum of one notification every 5 minutes.

## What this workflow does

This workflow can be configured to receive error events, or you can integrate it **before your own error-handling logic.**  

If used as the **primary error handler**, note that this flow will **only add a database log entry** and take no further action. You‚Äôll need to add your own alerts (e.g., email or push notifications). Below is an example of a notification setup I prefer to use.  

At the end, there‚Äôs an **error cleanup** option. This feature is particularly useful in development environments.  

If you already have an error-handling workflow, you can call this one as a **sub-workflow**. Its final steps include cleanup logic to reset the execution state and terminate the workflow.

## Setup

**Verify all Postgres nodes and credentials when using the 'Error Handling Sample'**

## How to adjust it to your needs

1) You can set this workflow as a sub-workflow within your existing error-handling setup.

2) Alternatively, you can add the "Error Handling Sample" at the end of this workflow, which sends email and push notifications.

Configuration Requirements:

‚ö†Ô∏è You must create a database table for this to work!



DDL of this sample:

create table p1gq6ljdsam3x1m."N8Err"
(
    id         serial
        primary key,
    created_at timestamp,
    updated_at timestamp,
    created_by varchar,
    updated_by varchar,
    nc_order   numeric,
    title      text,
    "URL"      text,
    "Stack"    text,
    json       json,
    "Message"  text,
    "LastNode" text
);

alter table p1gq6ljdsam3x1m."N8Err"
    owner to postgres;

create index "N8Err_order_idx"
    on p1gq6ljdsam3x1m."N8Err" (nc_order);

by Davi Saranszky Mesquita
https://www.linkedin.com/in/mesquitadavi/

--- Workflow: 1778_HTTP_Googlecalendartool_Automation_Webhook.json ---
Name: LINE Assistant with Google Calendar and Gmail Integration
Description: No description found in sticky notes.

--- Workflow: 1779_Stickynote_Executeworkflow_Automation_Webhook.json ---
Name: OpenSea NFT Agent Tool
Description: # OpenSea NFT Agent Tool (n8n Workflow) Guide

## üöÄ Workflow Overview
The **OpenSea NFT Agent Tool** is a specialized **AI-powered assistant** designed to interact with **OpenSea's API** to fetch, analyze, and process NFT-related data. It helps users access **NFT ownership, metadata, traits, collections, contracts, and payment tokens** efficiently.

### üéØ **Key Features**:
- Retrieve **OpenSea user profiles** by wallet address or username.
- Fetch **NFT collections**, metadata, contracts, and smart contract details.
- Access **individual NFT details**, including rarity and ownership.
- Track **NFTs owned by an account**, collections, and smart contracts.
- Retrieve **payment tokens** and NFT traits.
- Ensure **API request validity** and structured responses.

---

## üîó **Nodes & Functions**

### **1Ô∏è‚É£ NFT Agent Brain**
- **Type**: AI Language Model (GPT-4o Mini)
- **Purpose**: Processes NFT-related API requests and interprets OpenSea data queries.

### **2Ô∏è‚É£ NFT Agent Memory**
- **Type**: AI Memory Buffer
- **Purpose**: Stores session data to maintain context across multiple queries.

### **3Ô∏è‚É£ OpenSea Get Account**
- **Type**: API Request
- **Endpoint**: `/api/v2/accounts/{address_or_username}`
- **Function**: Fetches an OpenSea **user profile**, including bio, social links, and profile image.

### **4Ô∏è‚É£ OpenSea Get Collection**
- **Type**: API Request
- **Endpoint**: `/api/v2/collections/{collection_slug}`
- **Function**: Retrieves **collection metadata**, fees, and traits.

### **5Ô∏è‚É£ OpenSea Get Collections**
- **Type**: API Request
- **Endpoint**: `/api/v2/collections`
- **Function**: Fetches **a list of NFT collections**, filtered by chain, creator, visibility, or ranking.

### **6Ô∏è‚É£ OpenSea Get Contract**
- **Type**: API Request
- **Endpoint**: `/api/v2/chain/{chain}/contract/{address}`
- **Function**: Retrieves **NFT collection smart contract details**.

### **7Ô∏è‚É£ OpenSea Get NFT**
- **Type**: API Request
- **Endpoint**: `/api/v2/chain/{chain}/contract/{address}/nfts/{identifier}`
- **Function**: Fetches **metadata, traits, rarity, and ownership** of a single NFT.

### **8Ô∏è‚É£ OpenSea Get NFTs by Account**
- **Type**: API Request
- **Endpoint**: `/api/v2/chain/{chain}/account/{address}/nfts`
- **Function**: Retrieves **all NFTs owned** by a wallet address.

### **9Ô∏è‚É£ OpenSea Get NFTs by Collection**
- **Type**: API Request
- **Endpoint**: `/api/v2/collection/{collection_slug}/nfts`
- **Function**: Fetches **all NFTs in a collection**.

### **üîü OpenSea Get NFTs by Contract**
- **Type**: API Request
- **Endpoint**: `/api/v2/chain/{chain}/contract/{address}/nfts`
- **Function**: Retrieves **NFTs linked to a smart contract**.

### **11Ô∏è‚É£ OpenSea Get Payment Token**
- **Type**: API Request
- **Endpoint**: `/api/v2/chain/{chain}/payment_token/{address}`
- **Function**: Fetches details of a **cryptocurrency/token** used for NFT transactions.

### **12Ô∏è‚É£ OpenSea Get Traits**
- **Type**: API Request
- **Endpoint**: `/api/v2/traits/{collection_slug}`
- **Function**: Retrieves **trait categories and attributes** for a given collection.

---



--- Workflow: 1780_Splitout_Schedule_Automation_Scheduled.json ---
Name: Shopify order UTM to Baserow
Description: ## Shopify API

This workflow uses GraphQL calls to the Shopify Admin API. In order to get a better understanding for the queries and mutations please check the API Docs.


[Shopify GraphQL API docs](https://shopify.dev/docs/api/admin-graphql)

To make it easy to build queries for the GraphQL API easy please check out the [GraphiQL App for the Admin API](https://shopify.dev/docs/apps/tools/graphiql-admin-api) from Shopify

--- Workflow: 1781_Mondaycom_Splitout_Import_Triggered.json ---
Name: MONDAY GET FULL ITEM
Description: PULL ALL BOARDRELATION COLUMNS AND THEIR DATA

--- Workflow: 1782_Linkedin_Telegram_Automation_Scheduled.json ---
Name: Social Media AI Agent - Telegram
Description: Automate the curation and sharing of trending GitHub discussions from Hacker News to Twitter and LinkedIn. This workflow leverages AI to generate engaging posts, streamlining your social media content creation and distribution.



--- Workflow: 1783_Splitout_Postgres_Automation_Triggered.json ---
Name: Gmail to Vector Embeddings with PGVector and Ollama
Description: ## Bulk e-mail import

Press the `Test workflow` button to run this once, and bulk import of all your e-mail

### IMPORTANT
Specify your Gmail account creation date by editing the code node

--- Workflow: 1784_Splitout_Filter_Automation_Triggered.json ---
Name: Dynamic Form with AI
Description: # Avoid Asking Redundant Questions with Dynamically Generated Forms using OpenAI 
## Target Audience
This workflow has been built for those who require a form to capture as much data as possible as well as the answers to predefined questions, whilst optimising the user experience by avoiding asking redundant questions.
## Use Case
When creating a form to capture information, it can be useful to give the user an opportunity to input a long answer to a large, open-ended question. We then want to drill down to answer specific questions that we require the answer to. When doing this, we don't want to ask duplicate questions. This particular scenario imagines an AI consultancy capturing leads.
## What it Does
This workflow requires users to input basic information and then answer an open ended question. The specific questions on the next page will only be those that weren't answered in the open-ended question.
## How it Works
1. The open-ended question (and relevant basic information) is analysed by an LLM to determine which specific questions have not been answered. Chain-of-thought reasoning is utilised and the output structure is specified with the **Structured Output Parser**.
2. Those questions that have already been answered are filtered out nodes. The remaining items are then used to generate the last page of the form.
3. Once the user has filled in the final page of the form, they are shown a form completion page.
## Next Steps
- Add additional nodes to send an email to the form owner
- Add a subsequent LLM call to analyse the form response - those that are qualified should be given the opportunity to book an appointment

--- Workflow: 1785_Stopanderror_Clickup_Automation_Webhook.json ---
Name: Zoom AI Meeting Assistant
Description: ## Sub workflow: Create Task in ClickUp

--- Workflow: 1786_Shopify_Filter_Create_Triggered.json ---
Name: Sync New Shopify Customers to Odoo Contacts
Description: No description found in sticky notes.

--- Workflow: 1787_Splitout_Code_Automate_Webhook.json ---
Name: AI T-Shirt Redesign Workflow from any Mockup Image
Description: ## Send a mockup image url to chat

--- Workflow: 1788_Postgres_Code_Automation_Webhook.json ---
Name: Youtube Searcher
Description: ### Save Videos To Database

--- Workflow: 1789_Code_Webhook_Automate_Webhook.json ---
Name: (G) LineChatBot + Google Sheets (as a memory)
Description: ### Connect to Line Official Account's API

--- Workflow: 1790_Splitout_Summarize_Automation_Triggered.json ---
Name: Easily Compare LLMs Using OpenAI and Google Sheets
Description: ## Easily Compare LLMs Using OpenAI and Google Sheets

This workflow allows you to **easily evaluate and compare the outputs of two language models (LLMs)** before choosing one for production.

In the chat interface, both model outputs are shown side by side. Their responses are also logged into a Google Sheet, where they can be evaluated manually or automatically using a more advanced model.

### Use Case
You're developing an AI agent, and since LLMs are non-deterministic, you want to determine which one performs best for your specific use case. This template is designed to help you compare them effectively.

### How It Works
- The user sends a message to the chat interface.
- The input is duplicated and sent to two different LLMs.
- Each model processes the same prompt independently, using its own memory context.
- Their answers, along with the user input and previous context, are logged to Google Sheets.
- You can review, compare, and evaluate the model outputs manually (or automate it later).
- In the chat, both responses are also shown one after the other for direct comparison.

### How To Use It
- Copy this [Google Sheets template](https://docs.google.com/spreadsheets/d/1grO5jxm05kJ7if9wBIOozjkqW27i8tRedrheLRrpxf4/) (File > Make a Copy).
- Set up your **System Prompt** and **Tools** in the **AI Agent** node to suit your use case.
- Start chatting! Each message will trigger both models and log their responses to the spreadsheet.


*Note: This version is set up for two models. If you want to compare more, you‚Äôll need to extend the workflow logic and update the sheet.*

### About Models
You can use **OpenRouter** or **Vertex AI** to test models across providers.  
If you're using a node for a specific provider, like OpenAI, you can compare different models from that provider (e.g., `gpt-4.1` vs `gpt-4.1-mini`).

### Evaluation in Google Sheets
This is ideal for teams, allowing non-technical stakeholders (not just data scientists) to evaluate responses based on real-world needs.

Advanced users can automate this evaluation using a more capable model (like `o3` from **OpenAI**), but note that this will increase token usage and cost.

### Token Considerations
Since **each input is processed by two different models**, the workflow will consume more tokens overall.  
Keep an eye on usage, especially if working with longer prompts or running multiple evaluations, as this can impact cost.



--- Workflow: 1791_Filter_Summarize_Create_Triggered.json ---
Name: Generate AI-Ready llms.txt Files from Screaming Frog Website Crawls
Description: ## Form - Screaming Frog internal_html.csv upload  

This form node is used to trigger the workflow.  

It contains **three input fields**:  
- Name of the website  
- Short description of the website  
- **Screaming Frog** export containing the internal URLs  



It is recommended to use the **internal_html.csv** export, but **internal_all.csv** will also work, as the workflow includes a filter to process only indexable URLs.


--- Workflow: 1792_Googlecalendartool_Executeworkflow_Automation_Triggered.json ---
Name: ü§ñCalendar Agent
Description: No description found in sticky notes.

--- Workflow: 1793_Executeworkflow_Airtabletool_Automation_Triggered.json ---
Name: ü§ñContact Agent
Description: No description found in sticky notes.

--- Workflow: 1794_Executeworkflow_Automation_Webhook.json ---
Name: ü§ñContent Creator Agent
Description: No description found in sticky notes.

--- Workflow: 1795_Gmailtool_Executeworkflow_Send_Triggered.json ---
Name: ü§ñEmail Agent
Description: No description found in sticky notes.

--- Workflow: 1796_Code_Slack_Automation_Webhook.json ---
Name: piepdrive-test
Description: # Enrich Pipedrive's Organization Data with GPT-4o When an Organization is Created in Pipedrive

This workflow **enriches a Pipedrive organization's data by adding a note to the organization object in Pipedrive**. It assumes there is a custom "website" field in your Pipedrive setup, as data will be scraped from this website to generate a note using OpenAI.

## ‚ö†Ô∏è Disclaimer
**These workflows use a scraping API. Before using it, ensure you comply with the regulations regarding web scraping in your country or state**.

## Important Notes
- The OpenAI model used is GPT-4o, chosen for its large input token context capacity. However, it is also **the most expensive option**, you should take cost into consideration.

- The system prompt in the OpenAI Node generates output with relevant information, but feel free to improve or **modify it according to your needs**.

## **How It Works**

### Node 1: `Pipedrive Trigger - An Organization is Created`
This is the trigger of the workflow. When **an organization object is created in Pipedrive**, this node is triggered and retrieves the data. Make sure you have a "website" custom field (the name of the field in the n8n node will appear as a random ID and not with the Pipedrive custom field name).

### Node 2: `ScrapingBee - Get Organization's Website's Homepage Content`
This node **scrapes the content** from the URL of the website associated with the **Pipedrive Organization** created in Node 1. The workflow uses the [ScrapingBee](https://www.scrapingbee.com/) API, but you can use any preferred API or simply the HTTP request node in n8n.

### Node 3: `OpenAI - Message GPT-4o with Scraped Data`
This node sends HTML-scraped data from the previous node to the **OpenAI GPT-4 model**. The system prompt instructs the model to **extract company data**, such as products or services offered and competitors (if known by the model), and format it as HTML for optimal use in a Pipedrive Note.

### Node 4: `Pipedrive - Create a Note with OpenAI Output`
This node **adds a Note to the Organization created in Pipedrive** using the OpenAI node output. The Note will include the company description, target market, selling products, and competitors (if GPT-4 was able to determine them).

### Node 5 & 6: `HTML To Markdown` & `Code - Markdown to Slack Markdown`
These two nodes **format the HTML output to Slack Markdown**.

The Note created in Pipedrive is in HTML format, **as specified by the System Prompt of the OpenAI Node**. To send it to Slack, it needs to be converted to Markdown and then to Slack-specific Markdown.

### Node 7: `Slack - Notify`
This node **sends a message in Slack containing the Pipedrive Organization Note** created with this workflow.


--- Workflow: 1797_Telegram_GoogleDrive_Create_Triggered.json ---
Name: Save new Files received on Telegram to Google Drive
Description: No description found in sticky notes.

--- Workflow: 1798_Splitout_GitHub_Create_Webhook.json ---
Name: Building RAG Chatbot for Movie Recommendations with Qdrant and Open AI
Description: Tool, calling Qdrant's recommendation API based on user's request, transformed by AI agent

--- Workflow: 1799_HTTP_Manual_Send_Webhook.json ---
Name: line message api demo
Description: ## Line Message API Reply

Received Message from user and reply with same text by using reply token  

There are many event types. So we need to determine if the type is message.

--- Workflow: 1800_HTTP_Telegram_Automation_Webhook.json ---
Name: GROQ LLAVA V1.5 7B
Description: ## Set Up

Open the Telegram app and search for the BotFather user (@BotFather)
Start a chat with the BotFather
Type /newbot to create a new bot
Follow the prompts to name your bot and get a unique API token
Save your access token and username
## Start Using
Once you set the Bot, you can send the image. 
The second node get the image and send to the next node to be convert in base64, that is required by Groq in the documentation.

 [Groq docs](https://console.groq.com/docs/vision)

--- Workflow: 1801_Wait_Code_Automation_Webhook.json ---
Name: spy tool
Description: ## Note: almost never works right away
Adjust the prompts in the 'Tools agent' and 'Gmail' node as desired to steer the agent's behavior in the right direction

--- Workflow: 1802_Code_Manual_Import_Webhook.json ---
Name: Tiktok Downloader
Description: ## 1. Load the video page
Open this node and replace the URL with the one of the video you want to download without a watermark.

A Tiktok video URL looks like: https://www.tiktok.com/@Username_here/video/Video_ID_Here

Outputs the returned page HTML along with the session cookies



--- Workflow: 1803_Respondtowebhook_Stickynote_Import_Webhook.json ---
Name: Get Airtable data in Obsidian Notes
Description: [![YouTube Video](https://img.youtube.com/vi/2PIdeTgsENo/0.jpg)](https://www.youtube.com/watch?v=2PIdeTgsENo)

--- Workflow: 1804_Stickynote_Automation_Triggered.json ---
Name: Chat with local LLMs using n8n and Ollama
Description: ## Chat with local LLMs using n8n and Ollama
This n8n workflow allows you to seamlessly interact with your self-hosted Large Language Models (LLMs) through a user-friendly chat interface. By connecting to Ollama, a powerful tool for managing local LLMs, you can send prompts and receive AI-generated responses directly within n8n.

### How it works
1. When chat message received: Captures the user's input from the chat interface.
2. Chat LLM Chain: Sends the input to the Ollama server and receives the AI-generated response.
3. Delivers the LLM's response back to the chat interface.

### Set up steps
* Make sure Ollama is installed and running on your machine before executing this workflow.
* Edit the Ollama address if different from the default.


--- Workflow: 1805_Wait_Code_Automate_Webhook.json ---
Name: AI Automated TikTok/Youtube Shorts/Reels Generator
Description: ## 2. üñºÔ∏èGenerate images with Flux using [PiAPI](https://piapi.ai/?via=n8n) 
### (total cost: $0.0948 approx. as of 3/9/25)
1. OpenAI is used to generate 5 Flux image prompts based on the 5 captions generated. Edit this node to see/edit the prompt instructions. 
2. Next we use some custom javascript to total up how many tokens were used for each 5 generations so we can track our costs later.
3. Then we generate an image with Flux using the [PiAPI service](https://piapi.ai/?via=n8n), waiting to check for failures and retrying if there are any.

You can change the image model used by editing the Generate Image node API call.
Flux models available (as of 3/9/25):
- Qubico/flux1-dev ($0.015) - Currently set
- Qubico/flux1-schnell ($0.0015)
- Qubico/flux1-advanced ($0.02)

For full list of API settings, see the [Flux API Documentation](https://piapi.ai/docs/flux-api/text-to-image?via=n8n)


--- Workflow: 1806_GoogleDrive_GoogleSheets_Import_Triggered.json ---
Name: Fetch the Most Recent Document from Google Drive
Description: ## Get Latest File


--- Workflow: 1807_Linkedin_Googledocs_Automate_Webhook.json ---
Name: ‚ú®ü©∑Automated Social Media Content Publishing Factory + System Prompt Composition
Description: ## LLM

--- Workflow: 1808_HTTP_Telegram_Automate_Webhook.json ---
Name: Telegram AI Langchain bot
Description: ## Generate an image with Dall-E 3 and send it via Telegram

--- Workflow: 1809_Code_Schedule_Automate_Webhook.json ---
Name: Blog Automation TEMPLATE
Description: ## Settings

--- Workflow: 1810_Limit_Splitout_Automate_Webhook.json ---
Name: üî•üìàü§ñ AI Agent  for n8n Creators Leaderboard - Find Popular Workflows
Description: ## AI Agent for n8n Creator Leaderboard Stats
https://github.com/teds-tech-talks/n8n-community-leaderboard

--- Workflow: 1811_HTTP_GoogleSheets_Automate_Webhook.json ---
Name: Line_Chatbot_Extract_Text_from_Pay_Slip_with_Gemini
Description: ## Extract text from image
**Prompt for Gemini**
Analyze image and then return in JSON Response that has the only following value: Status, From, To, Date, Amount

--- Workflow: 1812_Telegram_Code_Automate_Triggered.json ---
Name: Telegram-bot AI Da Nang
Description: ## Chat input triggered inside n8n
Used for testing and debugging

--- Workflow: 1813_Code_GoogleCalendar_Automation_Triggered.json ---
Name: Inverview Scheduler
Description: Check Day Names Tool


1. This part of the flow is just a copy of what is embedded in the "Check Day Names Tool". It does not run. 

2. If you update this part of the flow, copy it with ctrl-c and paste it into another workbook. Add a sub-workflow execution. Set the workflow to accept all data. Copy the flow. Paste the Workflow JSON field in the "Check Day Names Tool" tool node


--- Workflow: 1814_Code_Extractfromfile_Automate_Webhook.json ---
Name: n8n workflow deployer
Description: ## Setup Instructions

**1.** In Google Drive create a **ToDeploy** folder and a **Deployed** folder
+ Update "**Google Drive Trigger -ToDeploy folder**" to your ToDeploy folder
+ Update "**Move JSON file to Deployed folder**" to you Deployed folder


**2.** Create a **n8n API key**:
+Go to Settings > n8n API
+Select Create an API key
+Copy API Key

**3.** In "**Get Existing Workflow Tags**" node: 
Create n8n API Authentication
**Authentication:** Predefined Credential Type
**Credential Type:** n8n API

Create new credential:
+Paste in API key
+Baseurl: https://SUB.DOMAINNAME.com/api/v1/

**4.** Add n8n API authentication to: 
+ "**Create n8n Workflow**" node
+ "**Set Workflow Tag**" node


**5.** Add your N8N instance URL to the **N8N_Instance_URL** variable in "**Set n8n URL variable**" node.

**6.** Run **"Get Workflow Tags"** node and copy the ID of your chosen tag.

**7.** In "**Set n8n API URL & Tag ID variables**" node:
+ Add the Workflow Tag ID to the **N8N_Instance_Tag** variable
+ Add your N8N instance URL to the **N8N_Instance_URL** variable


**9.** Set workflow to Active

**10.** Add n8n json files to Google Drive folder 



--- Workflow: 1815_Code_Webhook_Automation_Webhook.json ---
Name: puq-docker-influxdb-deploy
Description: ## üëã Welcome to PUQ Docker InfluxDB deploy!
## Template for InfluxDB: API Backend for WHMCS/WISECP by PUQcloud

v.1

This is an n8n template that creates an API backend for the WHMCS/WISECP module developed by PUQcloud.

## Setup Instructions

### 1. Configure API Webhook and SSH Access
- Create a Credential (Basic Auth) for the **Webhook API Block** in n8n.
- Create a Credential for **SSH access** to a server with Docker installed (**SSH Block**).

### 2. Modify Template Parameters
In the **Parameters** block of the template, update the following settings:

- `server_domain` ‚Äì must match the domain of the WHMCS/WISECP Docker server.
- `clients_dir` ‚Äì directory where user data related to Docker and disks will be stored.
- `mount_dir` ‚Äì default mount point for the container disk (recommended not to change).

**Do not modify** the following technical parameters:

- `screen_left`
- `screen_right`

## Additional Resources
- Full documentation: [https://doc.puq.info/books/docker-influxdb-whmcs-module](https://doc.puq.info/books/docker-influxdb-whmcs-module)
- WHMCS module: [https://puqcloud.com/whmcs-module-docker-influxdb.php](https://puqcloud.com/whmcs-module-docker-influxdb.php)



--- Workflow: 1816_Stickynote_Executeworkflow_Automation_Webhook.json ---
Name: OpenSea Marketplace Agent Tool
Description: # OpenSea Marketplace Agent Tool (n8n Workflow) Guide

## üöÄ Workflow Overview
The **OpenSea Marketplace Agent Tool** is an **AI-driven marketplace analytics system** for **NFT trading insights**. This tool integrates with **OpenSea's API** to fetch and analyze **NFT listings, offers, orders, and trait-specific data**, helping traders and collectors make informed decisions.

### üéØ **Key Features**:
- Retrieve **active NFT listings** for a collection.
- Fetch **valid offers** for individual NFTs or entire collections.
- Find the **cheapest available NFT listings** by collection or NFT.
- Track **the highest offer** made for an NFT or collection-wide offers.
- Access **detailed order data** based on order hash.
- Ensure **API query compliance** to prevent errors.

---

## üîó **Nodes & Functions**
### **1Ô∏è‚É£ Marketplace Agent Brain**
- **Type**: AI Language Model (GPT-4o Mini)
- **Purpose**: Processes marketplace-related API requests and user queries.

### **2Ô∏è‚É£ Marketplace Agent Memory**
- **Type**: AI Memory Buffer
- **Purpose**: Stores session data to maintain context across multiple queries.

### **3Ô∏è‚É£ OpenSea Get All Listings by Collection**
- **Type**: API Request
- **Endpoint**: `/api/v2/listings/collection/{collection_slug}/all`
- **Function**: Retrieves all active listings for a given collection.

### **4Ô∏è‚É£ OpenSea Get All Offers by Collection**
- **Type**: API Request
- **Endpoint**: `/api/v2/offers/collection/{collection_slug}/all`
- **Function**: Fetches all active offers made for NFTs in a collection.

### **5Ô∏è‚É£ OpenSea Get Best Listing by NFT**
- **Type**: API Request
- **Endpoint**: `/api/v2/listings/collection/{collection_slug}/nfts/{identifier}/best`
- **Function**: Retrieves the **lowest-priced** active listing for a specific NFT.

### **6Ô∏è‚É£ OpenSea Get Best Listings by Collection**
- **Type**: API Request
- **Endpoint**: `/api/v2/listings/collection/{collection_slug}/best`
- **Function**: Fetches the **cheapest listings** for a given NFT collection.

### **7Ô∏è‚É£ OpenSea Get Best Offer by NFT**
- **Type**: API Request
- **Endpoint**: `/api/v2/offers/collection/{collection_slug}/nfts/{identifier}/best`
- **Function**: Retrieves the **highest offer** made for a specific NFT.

### **8Ô∏è‚É£ OpenSea Get Collection Offers**
- **Type**: API Request
- **Endpoint**: `/api/v2/offers/collection/{collection_slug}`
- **Function**: Retrieves all **active collection-wide offers**.

### **9Ô∏è‚É£ OpenSea Get Item Offers**
- **Type**: API Request
- **Endpoint**: `/api/v2/orders/{chain}/{protocol}/offers`
- **Function**: Fetches **individual active offers** (excluding criteria-based offers).

### **üîü OpenSea Get Listings by Chain & Protocol**
- **Type**: API Request
- **Endpoint**: `/api/v2/orders/{chain}/{protocol}/listings`
- **Function**: Retrieves all active **listings filtered by blockchain and protocol**.

### **11Ô∏è‚É£ OpenSea Get Order by Hash**
- **Type**: API Request
- **Endpoint**: `/api/v2/orders/chain/{chain}/protocol/0x0000000000000068f116a894984e2db1123eb395/{order_hash}`
- **Function**: Fetches **a specific order (listing or offer)** based on its order hash.

### **12Ô∏è‚É£ OpenSea Get Trait Offers**
- **Type**: API Request
- **Endpoint**: `/api/v2/offers/collection/{collection_slug}/traits`
- **Function**: Retrieves **active offers** for specific traits in a collection.

---



--- Workflow: 1817_Manual_HTTP_Update_Webhook.json ---
Name: Update all Zammad Roles to default values
Description: No description found in sticky notes.

--- Workflow: 1818_Code_Converttofile_Automate_Webhook.json ---
Name: My workflow 3
Description: ## I'm a note 
The below workflow is a chatbot workflow which will be triggered when a user types his/her prompt related to document the user provided for analysis on the chatbot link which was ent to the user via mail.

--- Workflow: 1819_Code_Discord_Send_Triggered.json ---
Name: Send Discord message from Webflow form submission
Description: # Manage Webflow form submissions in Discord 
## Full guide with video
[Full guide with video here](https://blog.kreonovo.co.za/send-webflow-form-submissions-to-discord-server/)

This workflow dynamically creates Discord channels for your Webflow forms then sends form submissions to those channels. The Webflow form name is used to make the channel name.

## Getting started
1. Create Webflow credential using API V1 Token
2. Create Discord credentials using Bot API by making an application [Your applications in Discord](https://discord.com/developers/applications) for a detailed list of scopes for your application please see the video guide above.
3. Connect your credentials to the relevant nodes on the canvas.
4. Activate the workflow and submit a form on your Webflow site

That's it! You do not need to add any custom code to your Webflow forms or site.

The name of your forms in the form settings section of the Designer in Webflow will be used to create the Discord channels. This workflow will automatically do this for you.


--- Workflow: 1820_Schedule_N8N_Automate_Scheduled.json ---
Name: üíª Schedule workflow activity time
Description: ## Set targeted Workflow ID

You will find it in the URL of the workflow you want to manage.

![img](https://community.n8n.io/uploads/default/original/3X/8/a/8aa6297de2cffb3de23c221aee62065610525f5f.png)


--- Workflow: 1821_Manual_Stickynote_Automation_Webhook.json ---
Name: Extract & Summarize Yelp Business Review with Bright Data and Google Gemini
Description: ## LLM Usages

Google Gemini Flash Exp model is being used.

Basic LLM Chain with the Output parser for building the structured data.

Summarization Chain to summarize the structured response.

--- Workflow: 1822_Baserow_Stickynote_Automation_Webhook.json ---
Name: Baserow markdown to html
Description: # Tutorial
[Youtube video](https://www.youtube.com/watch?v=PAoxZjICd7o)

--- Workflow: 1823_Stopanderror_Wait_Create_Webhook.json ---
Name: Generate Leads with Google Maps - AlexK1919
Description: # AlexK1919 
![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)

#### I‚Äôm Alex Kim, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.


### About Me
https://beacons.ai/alexk1919


### Products Used 
[Google Maps API via Google Cloud Account](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/?utm_source=n8n_app&utm_medium=credential_settings&utm_campaign=create_new_credentials_modal)


--- Workflow: 1824_Splitout_Schedule_Import_Scheduled.json ---
Name: Get all orders in Squarespace to Google Sheets
Description: ## Edit this node üëá

--- Workflow: 1825_Code_Webhook_Automation_Webhook.json ---
Name: puq-docker-n8n-deploy
Description: ## üëã Welcome to PUQ Docker n8n deploy!
## Template for n8n: API Backend for WHMCS/WISECP by PUQcloud

v.1

This is an n8n template that creates an API backend for the WHMCS/WISECP module developed by PUQcloud.

## Setup Instructions

### 1. Configure API Webhook and SSH Access
- Create a Credential (Basic Auth) for the **Webhook API Block** in n8n.
- Create a Credential for **SSH access** to a server with Docker installed (**SSH Block**).

### 2. Modify Template Parameters
In the **Parameters** block of the template, update the following settings:

- `server_domain` ‚Äì must match the domain of the WHMCS/WISECP Docker server.
- `clients_dir` ‚Äì directory where user data related to Docker and disks will be stored.
- `mount_dir` ‚Äì default mount point for the container disk (recommended not to change).

**Do not modify** the following technical parameters:

- `screen_left`
- `screen_right`

## Additional Resources
- Documentation: [https://doc.puq.info/books/docker-n8n-whmcs-module/page/setting-up-n8n-workflow](https://doc.puq.info/books/docker-n8n-whmcs-module/page/setting-up-n8n-workflow)
- WHMCS module: [https://puqcloud.com/whmcs-module-docker-n8n.php](https://puqcloud.com/whmcs-module-docker-n8n.php)



--- Workflow: 1826_Manual_Wordpress_Automation_Triggered.json ---
Name: Auto categorize wordpress template
Description: ## How to Auto-Categorize 82 Blog Posts in 2 Minutes using A.I. (No Coding Required)

üí° Read the [case study here](https://rumjahn.com/how-to-use-a-i-to-categorize-wordpress-posts-and-streamline-your-content-organization-process/).

üì∫ Watch the [youtube tutorial here](https://www.youtube.com/watch?v=IvQioioVqhw)



--- Workflow: 1827_HTTP_Respondtowebhook_Automate_Webhook.json ---
Name: Bitrix24 Chatbot Application Workflow example with Webhook Integration
Description: No description found in sticky notes.

--- Workflow: 1828_Manual_Totp_Automation_Triggered.json ---
Name: Complete Guide to Setting Up and Generating TOTP Codes in n8n üîê
Description: No description found in sticky notes.

--- Workflow: 1829_Summarize_Respondtowebhook_Automation_Webhook.json ---
Name: Adaptive RAG
Description: ## Factual Strategy
**Retrieve precise facts and figures.**

--- Workflow: 1830_Splitout_Filter_Create_Webhook.json ---
Name: N/A
Description: ## Workflow Description:
This n8n workflow automates the drafting of email replies for Fastmail using OpenAI's GPT-4 model. Here‚Äôs the overall process:

1. **Email Monitoring**: The workflow continuously monitors a specified IMAP inbox for new, unread emails.
2. **Email Data Extraction**: When a new email is detected, it extracts relevant details such as the sender, subject, email body, and metadata.
3. **AI Response Generation**: The extracted email content is sent to OpenAI's GPT-4, which generates a personalized draft response.
4. **Get Fastmail Session and Mailbox IDs**: Connects to the Fastmail API to retrieve necessary session details and mailbox IDs.
5. **Draft Identification**: Identifies the "Drafts" folder in the mailbox.
6. **Draft Preparation**: Compiles all the necessary information to create the draft, including the generated response, original email details, and specified recipient.
7. **Draft Uploading**: Uploads the prepared draft email to the "Drafts" folder in the Fastmail mailbox.

--- Workflow: 1831_Splitout_Code_Automation_Webhook.json ---
Name: üé¶üöÄ YouTube Video Comment Analysis Agent
Description: ## üõ†Ô∏èYouTube Video Details & Comments Processing Tool

--- Workflow: 1832_Code_Webhook_Automation_Webhook.json ---
Name: PUQ Docker NextCloud deploy
Description: ## üëã Welcome to PUQ Docker NextCloud deploy!
# Template for Docker NextCloud: API Backend for WHMCS/WISECP by PUQcloud

This is an Docker NextCloud template that creates an API backend for the WHMCS/WISECP module developed by PUQcloud.

## Setup Instructions

### 1. Configure API Webhook and SSH Access
- Create a Credential (Basic Auth) for the **Webhook API Block** in n8n.
- Create a Credential for **SSH access** to a server with Docker installed (**SSH Block**).

### 2. Install Required Packages on the Docker Server
Run the following command on your server:
```
apt-get install sqlite3 apache2-utils -y
```
### 3. Modify Template Parameters
In the **Parameters** block of the template, update the following settings:

- `server_domain` ‚Äì must match the domain of the WHMCS/WISECP Docker server.
- `clients_dir` ‚Äì directory where user data related to Docker and disks will be stored.
- `mount_dir` ‚Äì default mount point for the container disk (recommended not to change).

**Do not modify** the following technical parameters:

- `screen_left`
- `screen_right`

## Additional Resources
- Full documentation: [https://doc.puq.info/books/docker-nextcloud-whmcs-module](https://doc.puq.info/books/docker-nextcloud-whmcs-module)
- WHMCS module: [https://puqcloud.com/whmcs-module-docker-nextcloud.php](https://puqcloud.com/whmcs-module-docker-nextcloud.php)



--- Workflow: 1833_GoogleSheets_Gmail_Create_Triggered.json ---
Name: Add new incoming emails to a Google Sheets spreadsheet as a new row.
Description: ### Add new incoming emails to a Google Sheets spreadsheet as a new row.


--- Workflow: 1834_Splitout_Code_Automation_Triggered.json ---
Name: AI Logo Sheet Extractor to Airtable
Description: ## Attribute Creation and Mapping those created or existing Ids 

--- Workflow: 1835_Manual_Slack_Automation_Triggered.json ---
Name: Â§ñÈÄÅË®òÂ∏≥
Description: No description found in sticky notes.

--- Workflow: 1836_Code_Googledocs_Automation_Webhook.json ---
Name: Tech Radar
Description: #1.Rag-friendly Document

Convert Tech Radar Gsheet into GDoc. Read each rows and cols data then transformed it into simple paragraph rows so that it will be easy to convert into vector database.


You may use appscript optionally to do this transformation.

--- Workflow: 1837_Code_Ghost_Automation_Triggered.json ---
Name: üìÑüõ†Ô∏èPDF2Blog
Description: ## Upload PDF and Extract Text

--- Workflow: 1838_Noop_Stickynote_Automation_Triggered.json ---
Name: Dynamically switch between LLMs Template
Description: ### Customer complaint - example

I really *love* waiting two weeks just to get a keyboard that doesn‚Äôt even work. Great job. Any chance I could actually use the thing I paid for sometime this month?

--- Workflow: 1839_Code_Manual_Automation_Webhook.json ---
Name: OCR receipts from Google Drive
Description: # Recognize invoices and convert them into structured JSON
## Video Demo
https://youtu.be/mGPt7fqGQD8

## Quick OCR playground
### 1. Get your OakPDF OCR API key here:
https://rapidapi.com/restyler/api/receipt-and-invoice-ocr-api

### 2. Poceed to the OCR Playground and upload your document or use example files:
https://ocr.oakpdf.com/ 


**The API can recognize any document format: medical, financial, legal -- let me know which format you want to try and I will be happy to add it to the Playground!**

## Running the n8n Workflow
This workflow allows you to recognize a folder with receipts or invoices (make sure your files are in .pdf, .png, or .jpg format). The workflow can be triggered via the "Test workflow" button, and it also monitors the folder for new files, automatically recognizing them.

### 1. n8n import glitch
After import, the trigger node "When clicking 'Test workflow'" might be disconnected. You need to connect it via 2 arrows to "Google Sheets1" and "Google Drive" nodes. So, the workflow has 2 triggers - via button, and via Google Sheets "new file" event - both of these triggers should be connected to 2 nodes.
Here is how it should looks like: https://ocr.oakpdf.com/n8n_fix.png


### 2. Set up RapidAPI HTTP auth key
Create new "HTTP header" n8n credential and paste your RapidAPI key from https://rapidapi.com/restyler/api/receipt-and-invoice-ocr-api  into it. https://ocr.oakpdf.com/n8n_api_key.png

Make sure "HTTP Request" node uses this credential.

### 3. Set up your Google Auth
You need a Google connection to work with your Google Sheets and Google Drive accounts: https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/#finish-your-n8n-credential

### 4. Set up Google Sheets
Copy this Google Sheets document: https://docs.google.com/spreadsheets/d/1G0w-OMdFRrtvzOLPpfFJpsBVNqJ9cfRLMKCVWfrTQBg/edit?usp=sharing

# Custom document formats and advanced usage
Email: contact@scrapeninja.net 
Linkedin: https://www.linkedin.com/in/anthony-sidashin/


--- Workflow: 1840_Splitout_Filter_Automate_Triggered.json ---
Name: BambooHR AI-Powered Company Policies and Benefits Chatbot
Description: ## STEP #1: Retrieve company policies and load them into a vector store

--- Workflow: 1841_Telegram_Manual_Automate_Triggered.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1842_Manual_Stickynote_Automation_Webhook.json ---
Name: Merge
Description: ## Authentication
Conversion requests must be authenticated. Please create 
[ConvertAPI account to get authentication secret](https://www.convertapi.com/a/signin)

--- Workflow: 1843_Telegram_Code_Automate_Triggered.json ---
Name: e-mail Chatbot with both semantic and structured RAG, using Telegram and Pgvector
Description: ## Chat around!
You can use this workflow both as a Telegram bot, or by chatting with it in n8n's interface.

--- Workflow: 1844_Code_Schedule_Export_Webhook.json ---
Name: Backup Squarespace code Injections to Github
Description: ## Backup to GitHub 
This workflow will backup Squarespace header & footer Injections to Github


### Setup
üëâ Edit the Squarespace node to place the website URL there

üëâ Open `Globals` node and update the values below üëá

- **repo.owner:** your Github username
- **repo.name:** the name of your repository
- **repo.path:** the folder to use within the repository.


If your username was `john-doe` and your repository was called `n8n-backups` and you wanted the injections to go into a `squarespace-backup` folder you would set:

- repo.owner - john-doe
- repo.name - n8n-backups
- repo.path - squarespace-backup/

Each site's injections will be added into seperate folder


--- Workflow: 1845_Googleslides_Extractfromfile_Create_Triggered.json ---
Name: Create Custom Presentations per Lead
Description: # Duplicate Template and Create Custom Presentations

--- Workflow: 1846_Stickynote_Executeworkflow_Automate_Triggered.json ---
Name: My workflow
Description: ## OAuth2 Settings Finder with OpenRouter Chat Model and Llama 3.3

**Overview:**
The AI agent identifies:
- Authorization URI
- Token URI
- Audience

**Methodology:**
Confidence scoring is utilized to assess the trustworthiness of extracted data:
- Score Range: 0 < x ‚â§ 1
- Score Granularity: 0.01 increments

**Model Details:**
Leveraging the Wayfarer Large 70b Llama 3.3 model.

--- Workflow: 1847_Extractfromfile_Form_Automation_Triggered.json ---
Name: HR Job Posting and Evaluation with AI
Description: ## Grab User Details and Update in Airtable


--- Workflow: 1848_Postgrestool_Stickynote_Automation_Triggered.json ---
Name: Chat with Postgresql Database
Description: ### üë®‚Äçüé§ Setup
1. Add your **postgresql** and **OpenAI** credentials.
2. Click **Chat** button and start asking questions to your database.
3. Activate the workflow and you can make the chat publicly available.

--- Workflow: 1849_Error_Stickynote_Automation_Webhook.json ---
Name: n8n Error Report to Line
Description: ## Error Handling

You can set this workflow as error workflow

https://docs.n8n.io/flow-logic/error-handling/#create-and-set-an-error-workflow

--- Workflow: 1850_Code_Schedule_Automation_Webhook.json ---
Name: Umami analytics template
Description: ## Send data from Umami to A.I. and then save to Baserow

You can find out more about the stats available in the [Umami API](https://umami.is/docs/api/website-stats-api)

[Watch youtube tutorial here](https://www.youtube.com/watch?v=hGzdhXyU-o8)

[Get my SEO A.I. agent system here](https://2828633406999.gumroad.com/l/rumjahn)

Read the [case study here](https://rumjahn.com/how-to-analyze-umami-data-using-n8n-and-a-i-to-improve-seo-and-uncover-hidden-insights-for-better-content-optimization/).



--- Workflow: 1851_Manual_Comparedatasets_Automation_Triggered.json ---
Name: Compare 2 SQL datasets
Description: No description found in sticky notes.

--- Workflow: 1852_HTTP_Stickynote_Automate_Webhook.json ---
Name: Connect Airtable Contacts to telli for Automated AI Voice Call Scheduling
Description: # Upload your CRM contacts to telli and schedule AI voice-agent calls

## Introduction to telli and AI Voice-Agent Calls

telli is an innovative platform that provides AI-powered voice agents capable of making calls and performing tasks tailored to specific customer use cases. These AI voice-agents can handle a wide range of communication tasks, from appointment scheduling to customer support, with remarkable efficiency and natural conversation flow.

This template is designed for businesses and organizations looking to automate their outbound calling processes using telli's AI voice-agents in conjunction with Airtable as their CRM. It solves the problem of manual call scheduling and data transfer between your CRM and calling system, saving time and reducing human error.

### Prerequisites

- telli account
- Airtable base with contact information
- n8n instance

### Step-by-Step Setup Guide

1. **n8n Setup**:
   - Create a new workflow in n8n.
   - Add the Airtable node to connect to your CRM table.

2. **telli API Configuration**:
   - Log in to your telli dashboard.
   - Locate and copy your API key under telli - Settings - API/Webhooks.

3. **Workflow Configuration**:
   - Add two HTTP Request nodes to your n8n workflow.
   - Set the "Authorization" header in both POST requests, replacing the value with your telli API key.
   - Configure the first request to use the `/add-contact` endpoint.
   - Set up the second request to use the `/schedule-call` endpoint.

4. **Data Mapping**:
   - Map the relevant fields from your Airtable node to the telli API requests.

5. **Testing and Activation**:
   - Run a test execution of your workflow.
   - Once satisfied with the results, activate the workflow.

### API Endpoint Details

#### Add Contact Endpoint

- **URL**: `https://api.telli.com/v1/add-contact`
- **Method**: POST
- **Headers**:
  - `Authorization: YOUR-API-KEY`
  - `Content-Type: application/json`
- **Payload**:
```json
{
  "external_contact_id": "string",
  "salutation": "string",
  "first_name": "string",
  "last_name": "string",
  "phone_number": "string",
  "email": "jsmith@example.com",
  "contact_details": {},
  "timezone": "string"
}
```

#### Schedule Call Endpoint

- **URL**: `https://api.telli.com/v1/schedule-call`
- **Method**: POST
- **Headers**:
  - `Authorization: YOUR-API-KEY`
  - `Content-Type: application/json`
- **Payload**:
```json
{
  "contact_id": TELLI-CONTACT-ID,
  "agent_id": "string",
  "max_retry_days": 123,
  "call_details": {
    "message": "Hello, this is your friendly reminder!",
    "questions": [
      {
        "fieldName": "email",
        "neededInformation": "email of the customer",
        "exampleQuestion": "What is your email address?",
        "responseFormat": "email string"
      }
    ]
  },
  "override_from_number": "string"
}
```

### Use Cases

This template is versatile and can be applied to various scenarios, including:

***- Lead Qualification***: Automatically schedule calls to new leads entered in your CRM.

***- Appointment Reminders***: Set up calls to remind clients of upcoming appointments.

***- Customer Feedback***: Schedule follow-up calls after product deliveries or service completions.


### Uploading Multiple Contacts

For bulk operations, you have two options:

1. **Loop Node**: Include a Loop node in your n8n workflow to process multiple contacts sequentially.

2. **Batch Endpoints**: Instead of `/add-contact` and `/schedule-call`, use telli's batch endpoints:
   - `/add-contacts-batch`: Add multiple contacts within an array.
   - `/schedule-calls-batch`: Schedule multiple calls at once.

Example of batch endpoint usage:
```json
{
  "contacts": [
    {"name": "John Doe", "phone": "+1234567890"},
    {"name": "Jane Smith", "phone": "+1987654321"}
  ]
}
```

By leveraging this template, you can seamlessly integrate your Airtable CRM with telli's powerful AI voice-agents, automating your outbound calling process and enhancing your customer communication strategy.


--- Workflow: 1853_Manual_N8N_Create_Triggered.json ---
Name: Create Google Creds
Description: ## Create Google Creds
I found manually creating credentials for multiple google accounts to be rather tedious, and if not named well hard to identify later.   

This will create credentials with the email address for all of the basic services. 

### Set the values of:
* Google JSON
Include the entire Google JSON file, which can be obtained either when creating the OAuth 2.0 credentials or afterward from the Credentials page.

* Google Email
Set to your email address

*n8n
Set your API connection

### Sign In
You still need to sign in to each credential that was created.

--- Workflow: 1854_Removeduplicates_Converttofile_Automation_Webhook.json ---
Name: Query List of Sign-in IPs
Description: ## Query the SaaS Alerts API
**SaaS Alerts API Reference Guide** [Link](https://app.swaggerhub.com/apis/SaaS_Alerts/functions)

--- Workflow: 1855_Webhook_Respondtowebhook_Automation_Webhook.json ---
Name: Unique QRcode coupon assignment and validation for Lead Generation system
Description: Check if the lead has already received the coupon

--- Workflow: 1856_Telegram_Stickynote_Automation_Webhook.json ---
Name: Agent Access Control Template
Description: ## Choose Base
Copy [this Airtable Template](https://airtable.com/appi5nijuvzQbZLJJ/shr8OkLysG1VtlCiz) into your workspace and select that Base here

--- Workflow: 1857_Woocommercetool_Manual_Automation_Webhook.json ---
Name: OpenAI Personal Shopper with RAG and WooCommerce
Description: Replace the URL and Collection name with your own

--- Workflow: 1858_Googledocs_Manual_Automate_Triggered.json ---
Name: RAG Workflow For Stock Earnings Report Analysis
Description: ## Set up steps
1. Google Cloud Project & Vertex AI API:
	* Create a Google Cloud project.
	* Enable the Vertex AI API for your project.
2. Google AI API key:
	* Obtain a Google AI API key from Google AI Studio.
3. Pinecone account and API key:
	* Create a free account on the Pinecone website.
	* Obtain your API key from your Pinecone dashboard.
	* Create an index named company-earnings in your Pinecone project.
4. Google Drive - download and save financial documents:
	* Go to a company you want to analize and download their quarterly earnings PDFs
	* Save the PDFs in Google Drive
	* Create a Google Sheet that stores a list of file URLs pointing to the PDFs you downloaded and saved to Google Drive
5. Configure credentials in your n8n environment for:
	* Google Sheets OAuth2
	* Google Drive OAuth2
	* Google Docs OAuth2
	* Google Gemini(PaLM) Api (using your Google AI API key)
	* Pinecone API (using your Pinecone API key)
6. Import and configure the workflow:
	* Import this workflow into your n8n instance.
	* Update the List Of Files To Load (Google Sheets) node to point to your Google Sheet.
	* Update the Download File From Google Drive to point to the column where the file URLs are
	* Update the Save Report to Google Docs node to point to your Google Doc where you want the report saved.

--- Workflow: 1859_Schedule_Slack_Monitor_Scheduled.json ---
Name: Monitor ProductHunt
Description: No description found in sticky notes.

--- Workflow: 1860_GoogleSheets_Gmail_Automation_Webhook.json ---
Name: WordPress Contact Form (CF7) Responses and Classification
Description: ## PRELIMINARY STEP
- Download the Wordpress Plugin [CF7 to Webhook](https://wordpress.org/plugins/cf7-to-zapier/) and install it
- Go to webhook tab on Wordpress and set the url of the n8n Webhook trigger
- Set the POST request

--- Workflow: 1861_Code_Form_Automation_Triggered.json ---
Name: Streamline data from an n8n form into Google Sheet and Airtable
Description: ### Workflow Description:

1. **n8n Form Trigger:**
   - A trigger node that initiates the workflow when a form is submitted.
   - Form fields include Name, City, and Email.

2. **Extracting Date and Time Fields from 'submittedAt' Field:**
   - A code node that extracts Date and Time from the submittedAt field.

3. **Format the Fields:**
   - Sets the format for the extracted fields (Name, City, Date, Time, Email).

4. **Airtable:**
   - Creates a new record in Airtable with the formatted data.
   - Includes columns for Name, City, Email, Time, and Date.

5. **Google Sheets:**
   - Appends the formatted data to a Google Sheet.
   - Includes columns for Name, City, Email, Date, and Time.

6. **Gmail:**
   - Sends an email to the provided Email address.
   - Subject: "Testing Text Message Delivery"
   - Message: Customized message with Name placeholder.

7. **Gmail1:**
   - Sends another email using a different template.
   - Subject includes the Date field.
   - Similar message content with a different subject line.

### Workflow Connections:
- n8n Form Trigger -> Extracting Date and Time Fields -> Format the Fields -> Google Sheets & Airtable -> Gmail
- Google Sheets -> Gmail1

This workflow collects data from a form submission, processes it to extract Date and Time fields, saves the formatted data to Google Sheets and Airtable, and sends customized emails to the submitter.




--- Workflow: 1862_Code_Respondtowebhook_Automation_Webhook.json ---
Name: Calculate the Centroid of a Set of Vectors
Description: üìå **Description:**  
This node extracts the `vectors` array from the **GET request** and converts it into a properly formatted array for processing.  
- **Ensures `vectors` is a valid array.**  
- **If the parameter is missing, it may generate an error.**  

üîπ **Expected Output Example:**
```json
{
  "vectors": [[2,3,4],[4,5,6],[6,7,8]]
}
```


--- Workflow: 1863_Manual_HTTP_Automation_Webhook.json ---
Name: Fine-tuning with OpenAI models
Description: # Step 2

Once the .jsonl file for training is uploaded (See the entire process here.: https://platform.openai.com/finetune/), a "new model" will be created and made available via your API. OpenAI will automatically train it based on the uploaded .jsonl file. If the training is successful, the new model will be accessible via API.

eg. ft:gpt-4o-mini-2024-07-18:n3w-italia::XXXXX7B

--- Workflow: 1864_Code_Executecommand_Create_Webhook.json ---
Name: AutoClip ‚Äì Automatically Generate Video Clips and Upload to YouTube
Description: ## Data Preparation & File Selection
Retrieve and merge source data for quotes, video backgrounds, and music from Google Sheets and Google Drive; then randomly select one quote, one background video, and one music file.

--- Workflow: 1865_Code_HTTP_Create_Webhook.json ---
Name: YT New Video Upload
Description: # Upload New Video to Youtube üé•‚¨ÜÔ∏è

--- Workflow: 1866_Manual_Supabase_Automation_Triggered.json ---
Name: Supabase Setup Postgres
Description: No description found in sticky notes.

--- Workflow: 1867_Schedule_Filter_Sync_Scheduled.json ---
Name: Spotify Sync Liked Songs to Playlist
Description: ### Spotify add all missing song from your Liked Songs to the Playlist.

--- Workflow: 1868_HTTP_Stickynote_Automate_Webhook.json ---
Name: Chatbot AI
Description: For non-text, we do not process and just provide user that it's not supported right now

--- Workflow: 1869_Manual_N8Ntrainingcustomerdatastore_Automation_Triggered.json ---
Name: itemMatching() example
Description: ## Generate example data

--- Workflow: 1870_Microsoftoutlook_GoogleCalendar_Automation_Triggered.json ---
Name: Google calendar to Outlook
Description: No description found in sticky notes.

--- Workflow: 1871_HTTP_Executeworkflow_Import_Webhook.json ---
Name: getBible Query v1.0
Description: # GetBible Query Workflow Documentation

## Overview

The **GetBibleQuery** workflow is a modular and self-standing workflow designed to retrieve scriptures based on provided references. It serves as an intermediary layer that takes in a structured JSON object, extracts the references, and returns the corresponding scriptures in the same format as if they were retrieved directly from the API.

This workflow is highly adaptable and can be integrated into various projects where scriptural references need to be dynamically fetched.

## JSON Input Structure

The workflow expects a JSON object with the following parameters:

 - References should include the book name, chapter, and verse(s). 
 - Multiple verses can be separated by commas (e.g., `John 3:16,18`).
 - Ranges can be specified using a dash (e.g., `John 3:16-18`).
 - The Bible [translation](https://api.getbible.net/v2/translations.json) to be used.
 - Specifies the API version (v2)

### Example JSON Input:

```json
{
  "references": [
      "1 John 3:16",
      "Jn 3:16",
      "James 3:16",
      "Rom 3:16"
  ],
  "translation": "kjv",
  "version": "v2"
}
```

### API Response Format

The response returned by this workflow follows the same API format as if the request were made directly to the source API. This ensures compatibility with projects that rely on standard API responses.

Example JSON Response (in this workflow):
```json
{
  "result": {
    "kjv_62_3": {
      "translation": "King James Version",
      "abbreviation": "kjv",
      "lang": "en",
      "language": "English",
      "direction": "LTR",
      "encoding": "UTF-8",
      "book_nr": 62,
      "book_name": "1 John",
      "chapter": 3,
      "name": "1 John 3",
      "ref": [
        "1 John 3:16"
      ],
      "verses": [
        {
          "chapter": 3,
          "verse": 16,
          "name": "1 John 3:16",
          "text": "Hereby perceive we the love of God, because he laid down his life for us: and we ought to lay down our lives for the brethren."
        }
      ]
    }
  }
}
```

## Integration and Usage

The GetBible Query workflow is designed for easy integration into any project that requires scripture retrieval. Simply pass the appropriate JSON object as input, and it will return the requested scripture passages.

## Support

For any questions or additional assistance, please visit our [Support desk](https://git.vdm.dev/getBible/support) or [API documentation](https://getbible.net/docs)

--- Workflow: 1872_Googlecalendartool_Automation_Triggered.json ---
Name: MCP_CALENDAR
Description: No description found in sticky notes.

--- Workflow: 1873_Form_HTTP_Automation_Webhook.json ---
Name: ü§ì Conversion Rate Optimizer
Description: No description found in sticky notes.

--- Workflow: 1874_Mailerlite_Gumroad_Automation_Webhook.json ---
Name: Gumroad sale trigger
Description: ## Trigger on a new Gumroad sale
### Requirements
- A [Gumroad]() account
- A product listed. We used ours [here](https://1node.gumroad.com/l/topaitools)
- Head to Settings > Advanced, and create a new application

### Set up
- Paste your access token on this Gumroad sale trigger

--- Workflow: 1875_Code_Schedule_Automate_Scheduled.json ---
Name: My workflow
Description: ## Automatic Weekly Digital PR Stories Suggestions
A weekly automated system that identifies trending news on Reddit, evaluates public sentiment through comment analysis, extracts key information from source articles, and generates strategic angles for potential digital PR campaigns. This workflow delivers curated, sentiment-analyzed news opportunities based on current social media trends. The final comprehensive report is automatically uploaded to Google Drive for storage and simultaneously shared with team members via a dedicated Mattermost channel for immediate collaboration.

### Set up instructions:
1. Add a new credential "Reddit OAuth2 API" by following this [guide](https://docs.n8n.io/integrations/builtin/credentials/reddit/). Assign your Reddit OAuth2 account to the Reddit nodes.
2. Add a new credential "Anthropic Account" by following this [guide]
(https://docs.n8n.io/integrations/builtin/credentials/anthropic/). Assign your Anthropic account to the nodes "Anthropic Chat Model".
3. Add a new credential "Google Drive OAuth2 API" by following this [guide](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-single-service/). Assign your Google Drive OAuth2 account to the node "Gmail Drive" nodes.
4. Set your interested topics (one per line) and Jina API key in the "Set Data" node. You can obtain your Jina API key [here](https://jina.ai/api-dashboard/key-manager).
5. Update your Mattermost information (Mattermost instance URL, Webhook ID and Channel) in the Mattermost node. You can follow this [guide](https://developers.mattermost.com/integrate/webhooks/incoming/).
6. You can adjust the cron if needed. It currently run every Monday at 6am.

--- Workflow: 1876_HTTP_Manual_Automation_Webhook.json ---
Name: üé• Gemini AI Video Analysis
Description: ## Video Analysis with Gemini AI

This workflow demonstrates how to analyze video content using Google's Gemini 2.0 Flash API:
1. Download a video from a URL
2. Upload it to Gemini's servers
3. Process the video with AI to generate a detailed description
4. Extract the analysis results

Use cases: Content moderation, video cataloging, accessibility features, etc.

OUTPUT: The workflow produces a detailed text description of the video content in the "MediaDescription" variable.
You can use this data for content tagging, searchable descriptions, accessibility, moderation, or cataloging.

‚öôÔ∏è **Before using this workflow**, make sure to set the `GeminiKey` environment variable with your Gemini API key.  
This ensures your API key is securely managed and not hardcoded in the workflow.

__SECURITY NOTE__: This workflow contains an API key in the workflow data.  
For production use, store your API keys in Credentials or use environment variables (like `GeminiKey`) instead of hardcoding them.


--- Workflow: 1877_Telegram_Stickynote_Automation_Triggered.json ---
Name: Optimize Prompt
Description: ## Trigger

- Trigger can be anything. For this example the trigger is a call from another workflow and a received Telegram message. 

- Note that this workflow can be integrated in the middle of another larger workflow.

--- Workflow: 1878_Telegram_Wait_Create_Webhook.json ---
Name: Auto-create and publish AI social videos with Telegram, GPT-4 and Blotato
Description: # üü• STEP 5 ‚Äî Auto-Publish to 9 Social Platforms
## The final step automates distribution using Blotato‚Äôs API.


--- Workflow: 1879_Wait_Slack_Monitor_Triggered.json ---
Name: N_01_Simple_Lead_Tracker_Automation_v4
Description: # Lead Submission

## A user submits a lead form via [Google Forms](https://forms.gle/VLhKeRySSWNKo2aR8).

![Google Form](https://feedbacklabs.org/wp-content/uploads/2023/10/GoogleForms_logo-1-1024x695.png#full-width)

--- Workflow: 1880_Splitout_Code_Automation_Webhook.json ---
Name: HN Who is Hiring Scrape
Description: ## Go to https://hn.algolia.com
- filter by "Ask HN: Who is hiring?" (important with quotes for full match)
- sort by date
- Chrome Network Tab > find API call > click "Copy as cURL"
- n8n HTTP node -> import cURL and paste 
- I've set the API key as Header Auth so you will have to do the above yourself to make this work

--- Workflow: 1881_Webhook_Code_Automate_Webhook.json ---
Name: Personal Portfolio Resume CV Chatbot
Description: ## Set up steps

1. **Google Cloud Project and Vertex AI API**:
   - Create a Google Cloud project.
   - Enable the Vertex AI API for your project.

2. **Google AI API Key**:
   - Obtain a Google AI API key from Google AI Studio.

3. **Pinecone Account**:
   - Create a free account on the Pinecone website.
   - Obtain your API key from your Pinecone dashboard.
   - Create an index named `seanrag` or any other name in your Pinecone project.

4. **Google Drive**:
   - Create a dedicated folder in your Google Drive to store company documents.

5. **Credentials in n8n**:
   - Configure the following credentials in your n8n environment:
     - Google Drive OAuth2
     - Google Gemini (PaLM) API (using your Google AI API key)
     - Pinecone API (using your Pinecone API key)

6. **Import the Workflow**:
   - Import this workflow into your n8n instance.

7. **Configure the Workflow**:
   - Update both Google Drive Trigger nodes to watch the specific folder you created in Google Drive.
   - Configure the Pinecone Vector Store nodes to use your `company-files` index.

8. **Optional**
   - Set up NocoDB and create a table with the same fields. Map the fields exactly or as preferred. 
ConversationHistory - user,email,ai,sessionid,date,datetime
- Remember to map the table name and fields according to your customizations.





--- Workflow: 1882_Manual_Markdown_Automation_Webhook.json ---
Name: Extract & Summarize Indeed Company Info with Bright Data and Google Gemini
Description: ## Note

Deals with the Indeed Company web scraping by utilizing Bright Data Web Unlocker Product.

The Basic LLM Chain, Summarization and AI Agent are being used to demonstrate the usage of the N8N AI capabilities.

**Please make sure to set the Indeed search query and update the Webhook Notification URL**

--- Workflow: 1883_HTTP_Form_Import_Webhook.json ---
Name: Get PDF with JSReport
Description: ##  Streamlining Billing Processes: From Data Input to Document Generation

This process presents the possibility of using a form, such as the one provided by n8n, to enter billing information, then calling JSReport to generate documents such as PDFs, Word, Excel, etc., and finally sending the invoice by email.


--- Workflow: 1884_Manual_Stickynote_Import_Webhook.json ---
Name: Get Long Lived Facebook User or Page Access Token
Description: ## Set Required Facebook Parameter 
- client_id
- client_secret
- user_access_token
- app-scoped-user-id (optional)

## according to this doc
 https://developers.facebook.com/docs/facebook-login/guides/access-tokens/get-long-lived/

--- Workflow: 1885_HTTP_Extractfromfile_Automation_Webhook.json ---
Name: Chinese Translator
Description: **Webhook from Line**

















You need to set-up this webhook at Line Manager or Line Developer Console

You'll need to copy Webhook URL from this node to put in Line Console

Also, don't forget to remove 'test' part when going for production

https://developers.line.biz/en/docs/messaging-api/receiving-messages/


--- Workflow: 1886_Form_Markdown_Automation_Webhook.json ---
Name: ü§ñ On-Page SEO Audit
Description: ## Send Email 
Connect your credentials & Easily send emails from a Gmail address. 

--- Workflow: 1887_Webhook_Respondtowebhook_Automate_Webhook.json ---
Name: Voice RAG Chatbot with ElevenLabs and OpenAI
Description: # STEP 4

## RAG System

Click on "test workflow" on n8n and "Test AI agent" on ElevenLabs. If everything is configured correctly, when you ask a question to the agent, the webhook on n8n is activated with the "question" field in the body filled with the question asked to the voice agent.

The AI ‚Äã‚ÄãAgent will extract the information from the vector database, send it to the model to create the response which will be sent via the response webhook to ElevenLabs which will transform it into voice

--- Workflow: 1888_Splitout_Schedule_Automation_Webhook.json ---
Name: Linkedin to Airtable
Description: ## üìù Description
Automatically turn your insightful LinkedIn post reactions into structured content ideas saved in Airtable. This workflow fetches your recent *"insightful"* likes, filters for posts from the last 7 days, extracts relevant content, and logs it into Airtable for future content inspiration.

--- Workflow: 1889_Splitout_Comparedatasets_Sync_Webhook.json ---
Name: Entra Contacts to Zammad User Sync
Description: ## Select Entra Contacts that should be synced to Zammad





--- Workflow: 1890_HTTP_Executeworkflow_Automation_Webhook.json ---
Name: [2/2] KNN classifier (lands dataset)
Description: Here we're classifying existing types of satellite imagery of land types:
- 'agricultural',
- 'airplane',
- 'baseballdiamond',
- 'beach',
- 'buildings',
- 'chaparral',
- 'denseresidential',
- 'forest',
- 'freeway',
- 'golfcourse',
- 'harbor',
- 'intersection',
- 'mediumresidential',
- 'mobilehomepark',
- 'overpass',
- 'parkinglot',
- 'river',
- 'runway',
- 'sparseresidential',
- 'storagetanks',
- 'tenniscourt'


--- Workflow: 1891_Schedule_Slack_Automation_Scheduled.json ---
Name: Daily meetings summarization with Gemini AI
Description: ### Gemini Flash model a base

--- Workflow: 1892_Noop_Mautic_Automation_Webhook.json ---
Name: Wordpress Form to Mautic
Description: ## Receive Data from Wordpress Form

You can customize your form fields in the way that best suits your marketing campaigns.

--- Workflow: 1893_HTTP_Gmail_Automate_Webhook.json ---
Name: My workflow 3
Description: 


--- Workflow: 1894_Stopanderror_Clickup_Automation_Webhook.json ---
Name: Zoom AI Meeting Assistant
Description: ## Sub workflow: Create Task in ClickUp

--- Workflow: 1895_Gitlab_Code_Automation_Webhook.json ---
Name: GitLab MR Auto-Review & Risk Assessment
Description: - Triggers workflow when a merge request (MR) is created or updated.  

- Add GitLab credentials. Select merge_requests event.

--- Workflow: 1896_Stopanderror_Splitout_Export_Scheduled.json ---
Name: Clockify Backup Template
Description: ## Set Globals
- Define the repository owner (username / organization) and repository name
- By default the fist available Clockify workspace ID is set. This can be overridden here.

--- Workflow: 1897_Webhook_Filter_Sync_Webhook.json ---
Name: Realtime Notion Todoist 2-way Sync Template
Description: ## Keep in sync
if you update the mapping, make sure to change it in the other node as well!

--- Workflow: 1898_Splitout_Code_Automation_Webhook.json ---
Name: Amazon keywords
Description: ## How to build your own Amazon keywords tool with n8n (For free and no coding)

This workflow gives you Amazon keywords for your Amazon FBA business.

[üí° You can read more about this workflow here](https://rumjahn.com/how-to-build-your-own-amazon-keywords-tool-with-n8n-for-free-and-no-coding/)

--- Workflow: 1899_Stickynote_Airtabletool_Create_Triggered.json ---
Name: Build an MCP server with Airtable
Description: ## Update SSE endpoint 

--- Workflow: 1900_Limit_Code_Automate_Webhook.json ---
Name: Selenium Ultimate Scraper Workflow
Description: ## N8N Ultimate Scraper - Workflow

This workflow's objective is to collect data from any website page, whether it requires login or not.

For example, you can collect the number of stars of the n8n-ultimate-scraper project on GitHub.

## Requirements
**Selenium Container**: Selenium is an open-source automation framework for web applications, enabling browser control and interaction through scripts in various programming languages.
You can deploy the Docker Compose file from the associated GitHub project to set up your Selenium container and configuration: https://github.com/Touxan/n8n-ultimate-scraper

**Residential Proxy Server**: To scrape data at scale without being blocked, I personally recommend GeoNode. They offer affordable, high-quality residential proxies: https://geonode.com/invite/98895

**OpenAI API Key**: For using GPT-4.

## Optional
Session Cookies Collection: To use login functionality with the n8n Ultimate Scraper, you need to collect session cookies from the target website. You can do this using the extension created for this application in the GitHub project: https://github.com/Touxan/n8n-ultimate-scraper. Follow the installation procedure to use it.

## How to use 
Deploy the project with all the requiremnts and request your webhook.

**Example of request**:
curl -X POST http://localhost:5678/webhook-test/yourwebhookid \
-H "Content-Type: application/json" \
-d '{
  "subject": "Hugging Face",
  "Url": "github.com",
  "Target data": [
    {
      "DataName": "Followers",
      "description": "The number of followers of the GitHub page"
    },
    {
      "DataName": "Total Stars",
      "description": "The total numbers of stars on the different repos"
    }
  ],
  "cookies": []
}'

You can also scrape link like this : 
curl -X POST http://localhost:5678/webhook-test/67d77918-2d5b-48c1-ae73-2004b32125f0 \
-H "Content-Type: application/json" \
-d '{
  "Target Url": "https://github.com",
  "Target data": [
    {
      "DataName": "Followers",
      "description": "The number of followers of the GitHub page"
    },
    {
      "DataName": "Total Stars",
      "description": "The total numbers of stars on the different repo"
    }
]
}'

**Note**
The maximum nimber of Target data is 5.

--- Workflow: 1901_Manual_Filter_Automate_Scheduled.json ---
Name: Auto - Resume Disabled Workflows
Description: No description found in sticky notes.

--- Workflow: 1902_Stickynote_Executeworkflow_Update_Webhook.json ---
Name: CoinMarketCap_Exchange_and_Community_Agent_Tool
Description: # üß† CoinMarketCap_Exchange_and_Community_Agent_Tool Guide

This agent handles **exchange-level** data, **community sentiment**, and **index insights** using CoinMarketCap API endpoints.

## üîå Supported Tools
1. `/v1/exchange/map` ‚Äì Get exchange ID, name, and slug
2. `/v1/exchange/info` ‚Äì Metadata: launch date, social, location
3. `/v1/exchange/assets` ‚Äì Token holdings of exchange
4. `/v3/index/cmc100-latest` ‚Äì CoinMarketCap 100 Index info
5. `/v3/fear-and-greed/latest` ‚Äì Sentiment index (0‚Äì100)

## üß† Agent Components:
- **üß† Brain**: GPT-4o Mini
- **üíæ Memory**: Conversation state handler
- **‚öôÔ∏è Tools**: 5 direct API endpoints

## üß© Trigger Parameters:
- `message` ‚Äì Main query prompt
- `sessionId` ‚Äì Contextual memory key

## üîë Notes:
- Use `Exchange Map` to get valid `id` before calling `Exchange Info` or `Assets`
- Fear & Greed index returns daily updated data points
- Index tools return structured component weights

--- Workflow: 1903_Splitout_Googledocs_Automation_Webhook.json ---
Name: ü¶ôüëÅÔ∏èüëÅÔ∏è Find the Best Local Ollama Vision Models by Comparison
Description: ## üëÅÔ∏è Analyze Image with Local Ollama LLM


--- Workflow: 1904_Telegram_Limit_Process_Webhook.json ---
Name: ‚ú®üî™ Advanced AI Powered Document Parsing & Text Extraction with Llama Parse
Description: ## Send to LlamaParse
https://docs.cloud.llamaindex.ai/API/upload-file-api-v-1-parsing-upload-post

--- Workflow: 1905_Telegram_Googleanalytics_Automation_Webhook.json ---
Name: Online Marketing Weekly Report
Description: ## Sub-Workflow: Google Analytics Data

--- Workflow: 1906_Code_Extractfromfile_Automate_Triggered.json ---
Name: Google Drive Automation
Description: No description found in sticky notes.

--- Workflow: 1907_Stickynote_Converttofile_Automation_Triggered.json ---
Name: Business Canvas Generator
Description: ## üîÅ Changeable LLM Model

This template is powered by **Ollama LLM (LLaMA 3.1)** by default ‚Äî but it‚Äôs fully flexible.

You can easily swap in any other LLM (like OpenAI, Claude, etc.) by updating the AI Agent nodes. No changes are required in the logic or formatting nodes ‚Äî the system will work seamlessly.

--- Workflow: 1908_Form_Asana_Automate_Triggered.json ---
Name: Automate Your Customer Service With WhatsApp Business Cloud & Asana
Description: ## Setup
**Create and integrate your form**
- You can use n8n native form or services like Typeform and integrate with them.
- If you rename the phone number field, you also have to change this in the "WhatsApp Business Cloud" node 
- If you let people enter their phone number in another format (e.g. text) you may need to add in additional data transformation nodes

**Add your WhatsApp Business Cloud credentials & your phone number**
- Go into the "WhatsApp Business Cloud" node and add your credentials
- Replace the placeholder by your WhatsApp Business Cloud phone number

**Change the text body to your liking**
- The text body right now is a confirmation of. contact form. You can change that to your liking & use-case.

**Add your Asana credentials & add your workspace ID**
- Go into the "Asana" node and add your credentials
- Replace the placeholder by your Asana workspace ID

--- Workflow: 1909_Gmailtool_Automation_Triggered.json ---
Name: MCP_GMAIL
Description: No description found in sticky notes.

--- Workflow: 1910_Code_Webhook_Automation_Webhook.json ---
Name: Lead Qualification with BatchData
Description: # WEBHOOK SETUP INSTRUCTIONS

1. Copy this webhook URL and configure your CRM to send notifications here
2. Expected payload format:
   ```
   {
     "leadId": "123",
     "crmApiUrl": "https://your-crm-api.com/api/v1",
     "address": "123 Main St",
     "city": "Anytown",
     "state": "CA",
     "zipcode": "90210"
   }
   ```
3. All fields are required for property verification

--- Workflow: 1911_Automate.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1912_Manual_GoogleSheets_Automation_Triggered.json ---
Name: LinkedIn Profile Discovery
Description: No description found in sticky notes.

--- Workflow: 1913_Discordtool_Stickynote_Automation_Webhook.json ---
Name: Discord MCP Server
Description: 











This gets all of the servers that your discord bot is currently in. If you have a bot in more than one server, you will need to let it know or at least hint at which server it is, or it may get stuck. If you specify a channel through your natural language request, then the model may keep trying to get servers' channels via the get channel node or it may give up before getting to the right one).

Note: This is a custom API call using the same Discord bot auth, not a built-in "Discord tool" - I encourage you to go well beyond the 15 included tools that n8n provides for you. It is *easy* to do, and there are, literally, no limits to what you can do with n8n!

--- Workflow: 1914_Gmail_Stickynote_Send_Triggered.json ---
Name: (G) - Email Classification
Description: ### 2) Change to your desire LLMs

--- Workflow: 1915_Splitout_Code_Automation_Webhook.json ---
Name: [2/3] Set up medoids (2 types) for anomaly detection (crops dataset)
Description: ## Setting Up Medoids for Anomaly Detection
### Preparatory workflow to set cluster centres and cluster threshold scores, so anomalies can be detected based on these thresholds
Here, we're using two approaches to set up these centres: the upper branch is the *"distance matrix approach"*, and the lower is the *"multimodal embedding model approach"*.

--- Workflow: 1916_Telegram_Stickynote_Automation_Triggered.json ---
Name: CoinMarketCap_AI_Data_Analyst_Agent
Description: # üìä CoinMarketCap AI Analyst Agent (n8n Workflow)

## üß† Multi-Agent System Overview
This is the **primary supervisor agent** for the **CoinMarketCap AI Analyst Workflow**, designed using **modular AI agent architecture** in **n8n**.

‚ö†Ô∏è **This workflow requires 3 external tool workflows to function properly.** You must download, install, and connect the following:

### üîå Required Sub-Agent Tools:
1. **CoinMarketCap_Crypto_Agent_Tool** ‚Äì Handles cryptocurrency quotes, listings, conversions
2. **CoinMarketCap_Exchange_and_Community_Agent_Tool** ‚Äì Handles exchanges, trending tokens, Fear & Greed Index
3. **CoinMarketCap_DEXScan_Agent_Tool** ‚Äì Handles decentralized liquidity, pair quotes, OHLCV analysis

Once installed, these agents enable advanced capabilities:

### ‚úÖ Key AI Functions:
- Analyze market caps, volumes, supply metrics across coins
- Track new listings and top gainers/losers
- Evaluate trading pairs and liquidity in CEX and DEX markets
- Retrieve sentiment indicators and trending discussions

---

## üß† Node Structure Summary

### **1Ô∏è‚É£ Analyst Brain**
- **Model**: GPT-4o Mini
- **Function**: Understands user queries, delegates tasks to agents

### **2Ô∏è‚É£ Memory Buffer**
- Stores session state and context between prompts

### **3Ô∏è‚É£ Tool Triggers**
- **toolWorkflow()** function calls: 
   - `CoinMarketCap_Crypto_Agent_Tool`
   - `CoinMarketCap_Exchange_and_Community_Agent_Tool`
   - `CoinMarketCap_DEXScan_Agent_Tool`

---

## ‚ö†Ô∏è Notes:
- üìé Make sure API credentials are installed and valid for each agent
- üìç Each tool runs independently but feeds results to the supervisor for synthesis
- üß© Use `message` and `sessionId` parameters consistently in every sub-agent call

# üìä CoinMarketCap AI Analyst Agent Tools (n8n Workflow) Guide

## üöÄ Workflow Overview
The **CoinMarketCap AI Analyst Agent** is a modular AI-powered system built on **n8n** to deliver **real-time crypto market insights**. It connects directly to CoinMarketCap APIs across three specialized agents:

- **Cryptocurrency Agent** ‚Äì Market listings, quotes, conversions, and token info.
- **Exchange & Community Agent** ‚Äì Trending topics, exchange performance, and sentiment.
- **DEXScan Agent** ‚Äì Liquidity, trading volume, and OHLC data on decentralized markets.

### üéØ **Key Capabilities**:
- Fetch latest token listings and rank movements
- Track real-time price quotes and convert values between currencies
- Compare metrics like market cap, volume, and dominance
- Monitor exchange market pairs and volume
- Analyze community sentiment and Fear & Greed Index
- Visualize DEX liquidity and historical trading trends

---

## üîó Node Architecture Summary

### **1Ô∏è‚É£ AI Analyst Brain**
- **Type**: GPT-4o Mini
- **Function**: Interprets prompts and queries, routes requests to proper sub-agent.

### **2Ô∏è‚É£ Session Memory**
- **Type**: Memory Buffer
- **Function**: Maintains query context during conversation.

### **3Ô∏è‚É£ Tool Agents**
- **Type**: Tool Workflow
- Cryptocurrency / Exchange / DEXScan agent endpoints trigger APIs with mapped params.



--- Workflow: 1917_Wait_Code_Create_Webhook.json ---
Name: Generate Graphic Wallpaper with Midjourney, GPT-4o-mini and Canvas APIs
Description: ## Generate Graphic Wallpaper with Midjourney, GPT-4o-mini and Canvas APIs
We design this workflow with PiAPI APIs and Canvas API with the purpose to  produce a visually compelling image with resonant copy to spark emotional connection. üôå 
Wish you make a fantastic generation with our workflow! 

--- Workflow: 1918_Executeworkflow_Automation_Triggered.json ---
Name: Format US Phone Number
Description: No description found in sticky notes.

--- Workflow: 1919_Telegram_Splitout_Automate_Webhook.json ---
Name: üåê Confluence Page AI Powered Chatbot
Description: ## Confluence
https://developer.atlassian.com/cloud/confluence/basic-auth-for-rest-apis/
https://id.atlassian.com/manage-profile/security/api-tokens
https://developer.atlassian.com/cloud/confluence/rest/v2/intro/#about

Supplying basic auth headers
You can construct and send basic auth headers yourself, including a base64-encoded string that contains your Atlassian account email and API token.

To use basic auth headers, perform the following steps:

Generate an API Token for your Atlassian Account: https://id.atlassian.com/manage/api-tokens
Build a string of the form your_email@domain.com:your_user_api_token.
You'll need to encode your authorization credentials to Base64 encoded. You can do this locally:
Linux/Unix/MacOS:

Copy
```
echo -n your_email@domain.com:your_user_api_token | base64
```
Windows 7 and later, using Microsoft Powershell:

Copy
```
$Text = ‚Äòyour_email@domain.com:your_user_api_token‚Äô
$Bytes = [System.Text.Encoding]::UTF8.GetBytes($Text)
$EncodedText = [Convert]::ToBase64String($Bytes)
$EncodedText
```
Supply an Authorization header with content Basic followed by the encoded string. Example: Authorization: Basic eW91cl9lbWFpbEBkb21haW4uY29tOnlvdXJfdXNlcl9hcGlfdG9rZW4=

Copy
```
curl -D- \
   -X GET \
   -H "Authorization: Basic <your_encoded_string>" \
   -H "Content-Type: application/json" \
   "https://<your-domain.atlassian.net>/wiki/rest/api/space"
```

The above cURL command will not work as shown. You need to replace <your_encoded_string> and <your-domain.atlassian.net> with your authorization credentials encoded string and instance information before running it in the terminal.

--- Workflow: 1920_HTTP_Telegram_Automate_Webhook.json ---
Name: My workflow 4
Description: No description found in sticky notes.

--- Workflow: 1921_Code_Filter_Automation_Webhook.json ---
Name: mails2notion V2
Description: ## Setup
- Disable the Gmail Trigger and enable the manual trigger here
- Execute the workflow once
- Copy the Gmail Label IDs from the output of the "Required labels" node to the "Globals" node
- Disable the manual trigger here and and enable the Gmail Trigger again
- Activate the workflow, so it runs automatically in the background


--- Workflow: 1922_Linkedin_Schedule_Automate_Webhook.json ---
Name: Automate LinkedIn Posts with AI
Description: ## Fetch the day's post from my Notion database
A Notion _"database"_ is just a table on a Notion Page.
This table will have various rows, for which a minimum of three columns are required:
- Name
- Status
- Date

The Date column is the most important, which will dictate when that row from your Notion table containing the text should be posted.

NOTE: each post is required to have a copy and pasted image!

--- Workflow: 1923_Clockify_Stickynote_Create_Triggered.json ---
Name: Add new clients from Notion to Clockify
Description: ## Notion
### Poll for new clients
**To-dos**:
1. Connect your Notion account
2. Set your polling interval
3. Select your client Notion database 

--- Workflow: 1924_Code_Webhook_Export_Webhook.json ---
Name: Line Save File to Google Drive and Log File's URL
Description: ## Workflow Entry & Configuration
This section initializes the workflow by listening to incoming requests from 
the LINE Messaging API and retrieving configuration details from Google Sheets. 
It merges the event data with the config, then determines initial folder information 
(such as whether to store files by date or file type). Nodes in this group:

* **LINE Webhook Listener**
Receives POST requests (file messages) from LINE.
* **Get Config**
Reads configuration data (parent folder, allowed file types, etc.) from a Google Sheet.
* **Merge Event and Config Data**
Combines the LINE event data and config data.
* **Determine Folder Info**
Calculates folder names based on the config (e.g., date folder name, file type folder name).

--- Workflow: 1925_Microsoftoutlook_Microsoftoutlooktool_Automation_Triggered.json ---
Name: Outlook
Description: Trigger Action
1) Connect a Microsoft email account you can authenticate
2) Trigger is set to "message received" and the output "raw"
3) Add the email address(es) you want the AI agent to handle

--- Workflow: 1926_Stickynote_Splitinbatches_Automation_Triggered.json ---
Name: Multi-Agent Conversation
Description: ## Step 1: Configure Settings Nodes

Edit the JSON in these nodes to:

- Configure details about you (the user)
- Define content that will appear in all system messages
- Define Agents.

For Agents, you can configure:
- How many you create
- Their names
- The LLM model they use (choose any that are available via OpenRouter)
- Agent-specific system prompt content

--- Workflow: 1927_Stickynote_Automation_Triggered.json ---
Name: SearchApi AI Agent
Description: ## SearchApi AI Agent
Whenever you ask a question that should be searched on the web, the AI Agent will use SearchAPI to do it. To run this workflow, you need to have the credentials for Searchapi.io and some LLM provider.

--- Workflow: 1928_Googlecalendartool_Stickynote_Automation_Triggered.json ---
Name: Reservation Medcin
Description: **AI Agent üëá**
The Prompt is already there, You just need to setup the prompt user message with your text message.

--- Workflow: 1929_Odoo_Schedule_Automate_Scheduled.json ---
Name: ERP AI chatbot for Odoo sales module
Description: # ERP chatbot for Odoo sales module

Set up steps:
* Configure the Odoo credentials
* Configure OpenAI credentials
* Toggle "Make Chat Publicly Available" from the Chat Trigger node.

--- Workflow: 1930_Splitout_Code_Automate_Webhook.json ---
Name: AI powered SEO Keyword Research Automation - The vibe Marketer
Description: ## Notification and Update Status


--- Workflow: 1931_Wait_HTTP_Automation_Webhook.json ---
Name: Flux Dev Image Generation Fal.ai
Description: ## Set Parameter Here 
set Image Prompt and related settings

--- Workflow: 1932_Schedule_Telegram_Send_Scheduled.json ---
Name: Automatically Send Daily Meeting List to Telegram
Description: ## This workflow 
provides a convenient and automated way to stay on top of your daily meetings and improve your personal productivity.




--- Workflow: 1933_Redis_Code_Create_Webhook.json ---
Name: New Ticket Alerts to Teams
Description: No description found in sticky notes.

--- Workflow: 1934_Splitout_Schedule_Create_Scheduled.json ---
Name: Personalized AI Tech Newsletter Using RSS, OpenAI and Gmail
Description: ## 1. Save news in a vector store (runs daily)

--- Workflow: 1935_Splitout_Extractfromfile_Automation_Triggered.json ---
Name: Extract spend details (template)
Description: # A. Get data
- Set up labels in Gmail
- Suggested using Gmail filters to move emails to labels automatically

--- Workflow: 1936_Emailreadimap_Manual_Send_Webhook.json ---
Name: Effortless Email Management with AI
Description: # STEP 1

## Create Qdrant Collection
Change:
- QDRANTURL
- COLLECTION

--- Workflow: 1937_Splitout_Limit_Automation_Triggered.json ---
Name: LinkedIn Profile Finder via Form using Bright Data & GPT-4o-mini
Description: No description found in sticky notes.

--- Workflow: 1938_Telegram_Schedule_Automation_Scheduled.json ---
Name: #Ô∏è‚É£Nostr #damus AI Powered Reporting + Gmail + Telegram
Description: ## #damus Threads Themes

--- Workflow: 1939_Linkedin_Code_Automation_Webhook.json ---
Name: Notion to Linkedin
Description: ## Start the flow every day at the same time

--- Workflow: 1940_Telegram_Limit_Export_Scheduled.json ---
Name: ‚ú®üòÉAutomated Workflow Backups to Google Drive
Description: ## Save Workflows to Google Drive

--- Workflow: 1941_Telegram_Stickynote_Automate_Triggered.json ---
Name: Telegram echo-bot
Description: ## This is a workflow for a Telegram-echo bot
1. Add your Telegram bot credentials for both nodes
2. Activate the workflow
3. Send something to the bot (i.e. a message, a forwarded message, sticker, emoji, voice, file, an image...)
4. Second node will fetch the incoming JSON object, format it and send back

#### This bot is useful for debugging and learning purposes of the Telegram platform

--- Workflow: 1942_Postgres_Wordpress_Automation_Webhook.json ---
Name: RAG & GenAI App With WordPress Content
Description: # Workflow 1 : Initial Embedding 
## Use this workflow to create the initial embedding for your WordPress website content



--- Workflow: 1943_Splitout_Editimage_Automation_Webhook.json ---
Name: Remove Advanced Background from Google Drive Images
Description: ## About this worfklow 

## How it works
This workflow does watch out for new images uploaded within Google Drive. 
Once there are new images it will download the image. And then run some logic, remove the background and add some padding to the output image. 
**By default Images are saved as .png**
Once done upload it to Google Drive again.
## Features* Select Google Drive Credentials within the Google Drive Nodes
### This workflow supports
* Remove Background
* Transparent Background
* Coloured Background (1 Color)
* Add Padding
* Choose Output Size

## Customize it!
* Feel free to customize the workflow to your needs
* Speed up the workflow: Using fixed output size
### Examples 
* Send Final Images to another service
* For Products: Let ChatGPT Analyze the Product Type
* Add Text with the "Edit Image" Node

### Photroom API Playground
[Click me](https://www.photoroom.com/api/playground)

--- Workflow: 1944_Microsoftoutlook_Telegram_Send_Triggered.json ---
Name: send file to kindle through telegram bot
Description: ## preparations
1. create a new telegram bot through bot father and save the credential on n8n
2. save your email credential on n8n
3. setup your kindle on amazon to allow your email address send to your kindle.

--- Workflow: 1945_Telegram_Schedule_Import_Scheduled.json ---
Name: FetchGithubIssues
Description: ### Get Github Issues HTTP Request 
- Edit the OWNER and REPO NAME in the respective fields
- The request is configured with query parameters of *state*, *since* and *labels*

--- Workflow: 1946_Splitout_Webhook_Import_Webhook.json ---
Name: Get all scaleway server info copy
Description: # Technical Documentation

## Description

This n8n workflow retrieves information about Scaleway servers‚Äîboth instances and baremetal‚Äîfrom dynamically defined zones. It collects server details from the Scaleway API, aggregates them into a single dataset, and allows filtering of the results based on user-defined criteria (such as name, tags, public IP address, or zone) before returning the data via a webhook.

## Operation

### 1. Workflow Trigger

- **Webhook Activation:**
  The workflow is triggered by a Webhook node that listens for an HTTP POST request. This request uses basic authentication (basicAuth) and includes the search parameters:
  - `search_by`: The filter type (e.g., "tags", "name", "public_ip", or "zone").
  - `search`: The keyword to filter the server data.

### 2. Retrieving Server Information

- **HTTP Requests to Scaleway API:**
  The workflow makes HTTP GET requests to two main Scaleway API endpoints:
  - **Instances Endpoint:** Retrieves server instances from zones specified under the `ZONE_INSTANCE` variable.
  - **Baremetal Endpoint:** Retrieves baremetal server information from zones defined in the `ZONE_BAREMETAL` variable.
  - **Headers and Authentication:**
    Each request sends the `X-Auth-Token` header along with a `Content-Type: application/json` header and expects a JSON response from the API.

### 3. Data Processing

- **Zone Splitting and Iteration:**
  - A `Split Out ZONE_INSTANCE` node divides the list of predefined zones so each zone is processed separately.
  - The `Loop Over Zone Instance` node iterates over the zones. An `If ZONE_BAREMETAL in ZONE_INSTANCE` node checks whether the current zone is configured for baremetal servers; if so, it directs the flow to the corresponding baremetal API request, otherwise to the instance request.
  - **Aggregating and Structuring Data:**
    The `Code` node aggregates all responses from each zone. It:
    - Iterates over the incoming items.
    - Uses helper functions (`extractServers`, `getPublicIPs`, `getUser`) to extract and normalize key information (name, tags, public IP, server type, state, zone, user).
    - Consolidates the structured server information into a unified array for further processing.

### 4. Dynamic Filtering

- **Defining Search Criteria:**
  A `Set` node captures the incoming search parameters (`search_by` and `search`) along with configuration details, such as the Scaleway authentication token and the lists of applicable zones.
  - **Routing Based on Filter Type:**
    The `Switch` node analyzes the value of `search_by` and routes the aggregated server data to one of four dedicated `Code` nodes that filter the data according to:
    - `tags`
    - `name`
    - `public_ip`
    - `zone`
  - **Error Handling:**
    If the `search_by` value does not match any of the valid filters, an error response is generated via a dedicated node that returns a JSON error message listing the available filter options.

### 5. Response via Webhook

- **Returning the Filtered Data:**
  The filtered server data is sent back to the requester via one of several `Respond to Webhook` nodes assigned to handle the output from each filter type.
  - **Error Response:**
    In cases where no valid search criteria are provided, the workflow sends an error JSON response indicating that the valid filters are: `tags`, `name`, `public_ip`, and `zone`.

## Example Usage

To use the workflow from an application or another workflow, send a POST request to the webhook endpoint with a JSON payload similar to this:

```json
{
  "search_by": "tags",
  "search": "Apiv1"
}
```

If executed successfully, the workflow will return a JSON array with server objects. Each object includes properties such as:
- `name`
- `tags`
- `public_ip`
- `type`
- `state`
- `zone`
- `user`

--- Workflow: 1947_Stickynote_Supabasetool_Automation_Triggered.json ---
Name: MCP_SUPABASE_AGENT
Description: ## AGENT_MESSAGE


--- Workflow: 1948_Error_Telegram_Send_Triggered.json ---
Name: Error Handler send Telegram
Description: ### **How to Use Telegram Error Notifier**

### **Step 1: Prerequisites**
1. **Telegram Bot:**
   - Create a bot using [BotFather](https://core.telegram.org/bots#botfather) and get the bot token.
   - Add the bot to your Telegram group/channel and note the `chatId`.

2. **n8n Setup:**
   - Ensure the **Telegram** and **Error Trigger** nodes are installed.
---
### **Step 2: Configure the Workflow**
1. **Update Telegram Chat ID:**
   - Open the **Config** node.
   - Replace `telegramChatId` with your actual Telegram group/channel ID:
     ```json
     return [
       {
         "telegramChatId": 123456789, // Replace with your chat ID, format 123456789 or -123456789
       }
     ];
     ```

2. **Set Telegram Bot Credentials:**
   - Open the **Telegram** node.
   - Add your bot token in the **Credentials** section.

3. **Activate the Workflow:**
   - Toggle the **Active** switch to enable the workflow.
---
### **Step 3: Set Up Error Workflow**
1. Open the workflow where you want error notifications.
2. Go to **Settings** > **Error Workflow**.
3. Select **Telegram Error Notifier** from the dropdown.
4. Save the changes.
---
### **Step 4: Test the Workflow**
1. Trigger an error in the workflow.
2. Check your Telegram for the error notification, which includes:
   - Workflow name
   - Date and time
   - Execution URL
   - Last node executed
   - Error details
---
### **Example Notification**
```
Workflow: My Workflow 1
Data & Time: 2023-10-27T12:34:56Z
URL: https://n8n.example.com/execution/12345
Last Node: HTTP Request
Error Detail: Failed to connect to the server.
```
---
### **Troubleshooting**
- **No Notifications:**  
  Ensure the workflow is active, and the bot token/chat ID is correct.
- **Permission Issues:**  
  Ensure the bot can send messages in your Telegram group/channel.
---

--- Workflow: 1949_Wordpress_Manual_Automate_Webhook.json ---
Name: Automate Content Generator for WordPress with DeepSeek R1
Description: ## Target
This workflow is designed to automatically generate seo-friendly content for wordpress through DeepSeek R1 by giving input ideas on how to structure the article. A cover image is also generated and uploaded with OpenAI DALL-E 3. This flow is designed to be executed automatically (ad "On a schedule" node) and thus have a complete editorial plan.

This process is useful for blog managers who want to automate content creation and publishing.

## Preliminary step
Create a google sheet with the following columns:
- Date
- Prompt
- Title
- Post ID

Fill in only the "Prompt" column with basic ideas that DeepSeek will work on to generate the content.

--- Workflow: 1950_Telegram_Googledocs_Automate_Triggered.json ---
Name: üß† Give Your AI Agent Chatbot Long Term Memory Tools Router
Description: ## 1Ô∏è‚É£ Save Memories

--- Workflow: 1951_Linkedin_Webhook_Automate_Webhook.json ---
Name: Training Feedback Automation
Description: ## UserTask
**Link** https://demo.usertask.io 

**Login**
contact@usertask.io
**Password**
QSDpo2x10?2020

--- Workflow: 1952_Schedule_HTTP_Monitor_Webhook.json ---
Name: Web Server Monitor.
Description: üìò Node Descriptions for Your Web Server Monitor Workflow

‚è∞ 1. Schedule Trigger  
Triggers the workflow every minute to initiate regular checks on server availability.

üìÑ 2. Web Servers List (Google Sheets)  
Fetches a list of server hostnames or IP addresses from a Google Sheet.  
Each row is treated as one server. This makes server management easy ‚Äî no need to edit the workflow to add/remove servers.

üåê 3. Server Alive Check (HTTP) 
Sends an HTTP GET request to each server (e.g., http://your-server.com).  
If the request fails, the error path is triggered.  

üìù 4. Web Server Alive Log (Google Sheets)  
Logs successful server checks into a separate Sheet with a timestamp.
This log helps track uptime history, verify server health, and generate availability reports.

üö®üìß 5. Server Down Notification (Gmail)  
Sends an alert email if a server does not respond or returns an error.  
Includes the server address and the timestamp of failure.

üìù 6. Web Server Down Log (Google Sheets)
Logs the failed server checks into another Sheet with a timestamp.  
Useful for uptime reporting, debugging, and audit tracking.


--- Workflow: 1953_Respondtowebhook_Stickynote_Monitor_Webhook.json ---
Name: Track Working Time and Pauses
Description: ## Track start time

--- Workflow: 1954_Wait_Code_Automation_Webhook.json ---
Name: Namesilo Bulk Domain Availability [Template]
Description: ## How-To
1. Claim your free Namesilo API key here: https://www.namesilo.com/account/api-manager

2. Set your API key and domains in "Set Data" node.

The workflow send up to 200 domains per loop until all domains are processed. The output is in Excel format.

Enjoy!

Note: Each loop wait 5min. This is required due to Namesilo rate limits.

--- Workflow: 1955_Wait_Splitout_Automation_Scheduled.json ---
Name: HDW Lead Gel√§ndewagen
Description: Find leads in LinkedIn

--- Workflow: 1956_Mailjet_Gmail_Create_Triggered.json ---
Name: Forward Netflix emails to multiple email addresses with GMail and Mailjet
Description: ## Gmail
1. Connect your Gmail Account, where you are receiving emails from your Netflix account. 
2. Set the polling intervall

--- Workflow: 1957_Form_Stickynote_Automation_Triggered.json ---
Name: Post on X
Description: ### Heads up!
To make sure everything works smoothly, use an [Airtop Profile](https://docs.airtop.ai/guides/how-to/saving-a-profile) signed into x.com for the "Create session" node

--- Workflow: 1958_Code_Slack_Send_Triggered.json ---
Name: Send Slack message from Webflow form submission
Description: # Manage Webflow form submissions in Slack 
## Full guide with video
[Full guide with video here](https://blog.kreonovo.co.za/send-webflow-form-submissions-to-slack-automatically/)

This workflow dynamically creates Slack channels for your Webflow forms then sends form submissions to those channels. The Webflow form name is used to make the channel name.

## Getting started
1. Create Webflow credential using API V1 Token
2. Create Slack credential by creating an app and using the Bot User OAuth Token [Your Slack apps](https://api.slack.com/apps). For a detailed list of scopes required watch the video linked in the guide. n8n will also provide a list of scopes when you create the credential.
3. Connect your credentials to the relevant nodes on the canvas.
4. Activate the workflow and submit a form on your Webflow site

That's it! You do not need to add any custom code to your Webflow forms or site.

The name of your forms in the form settings section of the Designer in Webflow will be used to create the Slack channels. This workflow will automatically do this for you.


--- Workflow: 1959_HTTP_Schedule_Automate_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 1960_Manual_Stickynote_Create_Webhook.json ---
Name: Generate Company Stories from LinkedIn with Bright Data & Google Gemini
Description: ## Note

Deals with the LinkedIn data extraction using the Bright Data Web Scrapper API.

The information extraction and summarization are being used to demonstrate the usage of the N8N AI capabilities.

**Please make sure to set the LinkedIn URL and Webhook Notification URL**

--- Workflow: 1961_Manual_Readbinaryfile_Import_Triggered.json ---
Name: How to automatically import CSV files into postgres
Description: No description found in sticky notes.

--- Workflow: 1962_Emailreadimap_Manual_Send_Webhook.json ---
Name: Email AI Auto-responder. Summerize and send email
Description: # STEP 1

## Create Qdrant Collection
Change:
- QDRANTURL
- COLLECTION

--- Workflow: 1963_Stopanderror_Wait_Automation_Triggered.json ---
Name: Retry on fail except for known error Template
Description: ## Set filter
Filter by status code or error message.

--- Workflow: 1964_HTTP_Aggregate_Automation_Webhook.json ---
Name: Google Maps FULL
Description: # AI-Powered Lead Generation Workflow

This workflow extracts business data from Google Maps and associated websites using an AI agent.

## Dependencies
- **OpenAI API**
- **Google Sheets API**
- **Apify Actors**: Google Maps Scraper 
- **Apify Actors**: Website Content Crawler
- **SerpAPI**: Used as a fallback to enrich data

## External Setup Guide
**Notion** : [Guide](https://automatisation.notion.site/GOOGLE-MAPS-SCRAPER-1cc3d6550fd98005a99cea02986e7b05)


--- Workflow: 1965_Code_Schedule_Automation_Webhook.json ---
Name: SERPBear analytics template
Description: ## Send Matomo analytics to A.I. and save results to baserow

This workflow will check the Google keywords for your site and it's rank.

[üí° You can read more about this workflow here](https://rumjahn.com/how-to-create-an-a-i-agent-to-analyze-serpbear-keyword-rankings-using-n8n-for-free-without-any-coding-skills-required/)

--- Workflow: 1966_Code_Webhook_Automation_Webhook.json ---
Name: puq-docker-immich-deploy
Description: ## üëã Welcome to PUQ Docker Immich deploy!
## Template for Immich: API Backend for WHMCS/WISECP by PUQcloud

v.1

This is an n8n template that creates an API backend for the WHMCS/WISECP module developed by PUQcloud.

## Setup Instructions

### 1. Configure API Webhook and SSH Access
- Create a Credential (Basic Auth) for the **Webhook API Block** in n8n.
- Create a Credential for **SSH access** to a server with Docker installed (**SSH Block**).

### 2. Modify Template Parameters
In the **Parameters** block of the template, update the following settings:

- `server_domain` ‚Äì must match the domain of the WHMCS/WISECP Docker server.
- `clients_dir` ‚Äì directory where user data related to Docker and disks will be stored.
- `mount_dir` ‚Äì default mount point for the container disk (recommended not to change).

**Do not modify** the following technical parameters:

- `screen_left`
- `screen_right`

## Additional Resources
- Full documentation: [https://doc.puq.info/books/docker-immich-whmcs-module](https://doc.puq.info/books/docker-immich-whmcs-module)
- WHMCS module: [https://puqcloud.com/whmcs-module-docker-immich.php](https://puqcloud.com/whmcs-module-docker-immich.php)



--- Workflow: 1967_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: InstaTest
Description: ## Easy Instagram(via ManyChat) bot
---
### Description:
This template is a main part of Entire solution. It's getting new message from Instagram via ManyChat(Extra No-Code tool for getting and sending message in Instagram). Generating message using ChatGPT and send back to ManyChat that sends it to Instagrtam.

### Logic:
1. Getting message from Instagram(from ManyChat)
2. Set you system prompt for AI
3. Create simple answer for message in AI block
4. Send answer to Instagram(to ManyChat)

---
*Helpful links:*
- [Guide in Notion how to create full bot](https://shadowed-pound-d6e.notion.site/Instagram-GPT-light-version-Manychat-X-N8N-176293bddff880899a9ac255585d29f7?pvs=4)
- [ManyChat](https://manychat.partnerlinks.io/vm4wkw8j81tc)

--- Workflow: 1968_Form_Stickynote_Automation_Webhook.json ---
Name: Social Media Publisher
Description: ## SETTINGS

- Find your API key in your [Upload-Post Manage Api Keys](https://app.upload-post.com/) 10 FREE uploads per month
- Set the the "Auth Header":
-- Name: Authorization
-- Value: Apikey YOUR_API_KEY_HERE
- Create profiles to manage your social media accounts. The "Profile" you choose will be used in the field "Account" on form submission (eg. test1 or test2).  

![image](https://i.postimg.cc/N0BHdcQ4/uploadpost.png)

Apr-2025: YouTube integration is currently being verified by Google, and may not work as expected.


--- Workflow: 1969_Code_Stickynote_Automation_Triggered.json ---
Name: Zip multiple files
Description: ## About
Use me as modular workflow. Instead of building me fixed in your workflow. Just call me when you need me.


## Input
Input can be multiple files 
-imgaes
-pdfs
-xlsx,csv....

## Output
Single zip file

--- Workflow: 1970_Splitout_Manual_Sync_Webhook.json ---
Name: Sync Youtube Video Urls with Google Sheets
Description: ## Sync Youtube Video Urls with Google Sheets


--- Workflow: 1971_Manual_HTTP_Automate_Webhook.json ---
Name: My workflow 6
Description: No description found in sticky notes.

--- Workflow: 1972_Executiondata_Stickynote_Automation_Webhook.json ---
Name: Luma AI - Webhook Response v1 - AK
Description: ## Define your SETTINGS here

--- Workflow: 1973_HTTP_Manual_Import_Webhook.json ---
Name: upload-post images
Description: # POST : to Instagram

--- Workflow: 1974_Mondaycom_Schedule_Send_Scheduled.json ---
Name: Microsoft Outlook AI Email Assistant
Description: # Microsoft Outlook AI Email Assistant

--- Workflow: 1975_Telegram_Googledocs_Automation_Webhook.json ---
Name: üêãü§ñ DeepSeek AI Agent + Telegram + LONG TERM Memory üß†
Description: # Receive Telegram Message with Webhook

--- Workflow: 1976_HTTP_Stickynote_Automation_Webhook.json ---
Name: React to PDFMonkey Callback
Description: # React to PDFMonkey Callback
When a PDF is generated by PDFMonkey, retrieve the PDF file and use it as needed.

### Configuration
Copy the webhook URL and add it to your PDFMonkey Webhooks dashboard ([PDFMonkey Webhooks](https://dashboard.pdfmonkey.io/webhooks)) to define your N8N callback URL in your PDFMonkey account.

For more information, visit: [PDFMonkey Webhooks Documentation](https://docs.pdfmonkey.io/pdfmonkey-features/webhooks#defining-a-workspace-wide-webhook)


### Usage
On success: Download the generated PDF.
On failure: Handle it as needed. üòâ


### Help
Need assistance? Reach out to us via chat on pdfmonkey.io, and we'll do our best to help you! üöÄ

--- Workflow: 1977_Wait_Splitout_Automation_Webhook.json ---
Name: Test Webhooks in n8n Without Changing WEBHOOK_URL (PostBin & BambooHR Example)
Description: ### Requirements:
1. **BambooHR instance** ([free trial link](https://www.bamboohr.com/signup/))
2. **BambooHR API key*** ([documentation](https://documentation.bamboohr.com/docs/getting-started#authentication))
3. **Slack connection** ([n8n documentation](https://docs.n8n.io/integrations/builtin/credentials/slack/))
* **Note about API key**: Set up in n8n as Generic Credential (Basic Auth) with the API key as the username and any string for the password.



--- Workflow: 1978_Extractfromfile_Converttofile_Automation_Webhook.json ---
Name: Extract text from PDF and image using Vertex AI (Gemini) into CSV
Description: ## How to extract PDF and image text into CSV using n8n (without manual data entry)

This workflow will extract text data from PDF and images, then store it as CSV.

[üí° You can read more about this workflow here](https://rumjahn.com/how-to-create-an-a-i-agent-to-analyze-matomo-analytics-using-n8n-for-free/)

--- Workflow: 1979_Manual_Stickynote_Automation_Webhook.json ---
Name: Extract & Summarize Wikipedia Data with Bright Data and Gemini AI
Description: ## Note

This template deals with the Wikipedia data extraction and summarization of content with the Bright Data. 

The LLM Data Extractor is responsible for producing a human readable content.

The Concise Summary Generator node is responsible for generating the concise summary of the Wikipedia extracted info.

**Please make sure to update the Wikipedia URL with Bright Data Zone. Also make sure to set the Webhook Notification URL.**

--- Workflow: 1980_Splitout_Code_Automation_Webhook.json ---
Name: Auto-Tag Blog Posts in WordPress with AI
Description: ## Demo Usage in Another Workflow (Tagging an article discovered with an RSS feed)

--- Workflow: 1981_Extractfromfile_Form_Automate_Triggered.json ---
Name: HR-focused automation pipeline with AI
Description: ## HR Expert 
This workflow automates the process of handling job applications by extracting relevant information from submitted CVs, analyzing the candidate's qualifications against a predefined profile, and storing the results in a Google Sheet

--- Workflow: 1982_Telegram_Splitout_Automation_Scheduled.json ---
Name: üé¶üíåAdvanced YouTube RSS Feed Buddy for Your Favorite Channels
Description: ## YouTube Video Details
https://developers.google.com/youtube/v3/docs
https://www.googleapis.com/youtube/v3/videos

--- Workflow: 1983_Splitout_Converttofile_Automation_Webhook.json ---
Name: template-demo-chatgpt-image-1-with-drive-and-sheet copy
Description: ## Created by darrell_tw_ 

An engineer now focus on AI and Automation

### contact me with following:
[X](https://x.com/darrell_tw_)
[Threads](https://www.threads.net/@darrell_tw_)
[Instagram](https://www.instagram.com/darrell_tw_/)
[Website](https://www.darrelltw.com/)

--- Workflow: 1984_Code_Executecommand_Automation_Webhook.json ---
Name: Credentials Transfer
Description: ## Setup instances
Each instnce requires a name, apiKey and baseURL

--- Workflow: 1985_Converttofile_HTTP_Automation_Webhook.json ---
Name: n8n Graphic Design Team
Description: # Run Setup First **ONCE**

--- Workflow: 1986_Stickynote_Jira_Create_Webhook.json ---
Name: Create_Unique_Jira_tickets_from_Splunk_alerts
Description: ![VirusTotal](https://i.imgur.com/spMd6AQ.png)
## Webhook Node 
To setup your webhook integration for Splunk, first ensure that splunk is setup to send alerts to a webhook by visiting the [Setup Guide here](https://docs.splunk.com/observability/en/admin/notif-services/webhook.html). You will copy the n8n webhook url opening the webhook node below. 
- **Form Access URLs**:
  - **Execute Mode**: `https://n8n.domain.com/webhook/test/webhookpath` - Use this to execute the workflow interactively within the n8n canvas. Hit the 'Execute Workflow' button to see real-time execution results. We have pinned data in the webhook node to make testing easier. 
  - **Silent Mode**: `https://n8n.domain.com/webhook/webhookpath` - Use this for background execution without canvas updates. Results will be logged silently and can be reviewed in the 'Executions' tab.

--- Workflow: 1987_Stickynote_Airtable_Create_Triggered.json ---
Name: Sync New Files From Google Drive with Airtable
Description: This node retrieves the newly added file from the specified folder in Google Drive.

--- Workflow: 1988_GitHub_Manual_Automate_Triggered.json ---
Name: [OPS] Restore workflows from GitHub to n8n
Description: ## Workflow - Restore Backups
This workflow will restore backed-up workflows from Github. 
It is launch by testing the workflow

### Setup
Open Globals and update the values below
**repo.owner:** This is your Github username
**repo.name:** This is the name of your repository
**repo.path:** This is the folder where your workflows are saved, within the repository.

If your username was `n8n-io` and your repository was called `n8n-backups` and you wanted the workflows to go into a `workflows` folder you would set:

repo.owner - n8n-io
repo.name - n8n-backups
repo.path - workflows

--- Workflow: 1989_HTTP_Schedule_Create_Webhook.json ---
Name: Search news using Perplexity AI and post to X (Twitter)
Description: No description found in sticky notes.

--- Workflow: 1990_Wait_Code_Automation_Webhook.json ---
Name: OpenAI Assistant for Hubspot Chat
Description: Watch for new message on the chatbot. 
This can be triggered with [n8n chat widget](https://www.npmjs.com/package/@n8n/chat), hubspot or other chat services. 



--- Workflow: 1991_Error_Code_Automation_Triggered.json ---
Name: CV Evaluation - Error Handling
Description: ## Config

Define
- your n8n app base url
- notifications recipient email 
- sender name

--- Workflow: 1992_Wait_Code_Automation_Webhook.json ---
Name: General 3D Presentation
Description: ## General 3D Presentation
This workflow creates 360¬∞ or 180¬∞ spinning videos of high-quality 3D models with [PiAPI](https://piapi.ai) API. üôã
### Required Instruction: 
1. Fill in params of Prompt node.
2. Fill in x-api-key in Mijdourney Generator node and Generate Kling Video node, fill in Header Parameters of GPT-4o Image Generator (e.g., Bearer + your X-API-Key)

--- Workflow: 1993_Splitout_Code_Automation_Triggered.json ---
Name: Translate
Description: ## Required Credentials
https://docs.n8n.io/integrations/builtin/credentials/google/

## Selecting Language
You can update the form to include your preferred language code (that you are translating to), by updating the dropdown field with a new option. 
Or update the Google Translate node language option back to 'fixed' and select your desired language. This will ignore the form option, but is safe to do.

--- Workflow: 1994_Code_Manual_Automation_Webhook.json ---
Name: Spot Workplace Discrimination Patterns with AI
Description: # Spot Workplace Discrimination Patterns using ScrapingBee, Glassdoor, OpenAI, and QuickChart


--- Workflow: 1995_Limit_Splitout_Automation_Webhook.json ---
Name: Scrape Trustpilot Reviews with DeepSeek, Analyze Sentiment with OpenAI
Description: Change to the name of the company registered on Trustpilot and the maximum number of pages to scrape

--- Workflow: 1996_HTTP_Manual_Automation_Webhook.json ---
Name: Analyze Screenshots with AI
Description: ## Setup 
**For Testing use the Setup node to put in test name & url.**

If you want to use this workflow in production, you can expand it to load data from other sources like a DB or Google Sheet

--- Workflow: 1997_Respondtowebhook_Stickynote_Automation_Webhook.json ---
Name: Image Generation API
Description: ## Webhook Trigger 
**This Node starts listening to requests to the Webhook URL**



--- Workflow: 1998_Splitout_Postgres_Sync_Scheduled.json ---
Name: Synchronize your Google Sheets with Postgres
Description: ## Setup ##
In order to make this automation work for you, you need to make a few adjustments:

1. Add your Postgres & Google Sheets Credentials to the respective Nodes

2. Select the Sheet (Google Sheets) and the table (Postgres) you want to sync

3. Update the Insert & Update Queries so that the data is updated in the table you also selected the rows from in the first step

--- Workflow: 1999_Manual_HTTP_Import_Webhook.json ---
Name: Upload video to drive via google script
Description: No description found in sticky notes.

--- Workflow: 2000_Wait_Code_Automate_Webhook.json ---
Name: Youtube_Automation
Description: ### üé•Title is kept from the upload, alternatively you can just add the YT Title module in the mix 
# üëáüèª


--- Workflow: 2001_Manual_Stickynote_Automation_Webhook.json ---
Name: Brand Content Extract, Summarize & Sentiment Analysis with Bright Data
Description: ## Note

This workflow deals with the brand content extraction by utilizing the Bright Data Web Unlocker Product.

The Basic LLM Chain, Information Extraction, Summarization Chain are being used to demonstrate the usage of the N8N AI capabilities.

**Please make sure to set the web URL of your interest within the "Set URL and Bright Data Zone" node and update the Webhook Notification URL**

--- Workflow: 2002_Manual_Code_Automation_Webhook.json ---
Name: Turn YouTube Videos into Summaries, Transcripts, and Visual Insights
Description: # How to Use This Workflow

Video Overview: [https://www.youtube.com/watch?v=Ovg_KfKxnC8](https://www.youtube.com/watch?v=Ovg_KfKxnC8)

Use this workflow to analyze YouTube videos effortlessly. Start by requesting a summary or transcript‚Äîthen refine the prompts to fit your needs and the type of content you're working with.

Even more impressive? You can ask specific questions about what‚Äôs happening in a video‚Äîidentifying people, scenes, and visual details. The ability to extract this level of insight is game-changing.

This workflow is highly adaptable‚Äîactions adjust based on the values you set. With a single flow, you can generate transcripts, create detailed YouTube descriptions, and draft summary blog posts.

Triggers are flexible, too. Run it manually, connect it to a webhook, or automate it through Airtable or another system. The output can go anywhere -- Notion, Google Docs, CMS platforms -- or simply stay in n8n for on-the-fly analysis.

This workflow was created using n8n 1.82.3.

## Requirements
* [Google API key](https://console.developers.google.com/) (or obtain via [AI Studio](https://aistudio.google.com/apikey))

## Testing
* This workflow was tested on an assortment of public YouTube videos from shorts up to about an hour in length.

## Future-proofing
* This workflow was created for use with gemini-1.5-flash. In the future, the set nodes for prompts could be updated to use different models and possibly add in what API endpoint should be used in the http node.

## Documentation
* [Explore vision capabilities with the Gemini API](https://ai.google.dev/gemini-api/docs/vision?lang=python)
* [Pricing](https://ai.google.dev/gemini-api/docs/pricing)

--- Workflow: 2003_Datetime_Code_Automation_Webhook.json ---
Name: Intelligent Web Query and Semantic Re-Ranking Flow
Description: 
## Step 1. Set Up a Free Brave Web Search Query API Key

To attain the free web search API tier from Brave, follow these steps:

1. Visit api.search.brave.com
2. Create an account
3. Subscribe to the free plan (no charge)
4. Navigate to the API Keys section
5. Generate an API key. For the subscription type, choose "Free".
6. Go to the "Query" Nodes and change the "X-Subscription-Token" value to your API Key.


--- Workflow: 2004_Telegram_Stickynote_Automation_Triggered.json ---
Name: OpenSea AI-Powered Insights via Telegram
Description: # OpenSea AI-Powered Insights System (n8n) - Full Integration Guide

## üöÄ System Overview
The **OpenSea AI-Powered Insights System** is a fully automated n8n workflow that connects multiple agent tools to deliver **real-time NFT market insights via Telegram**. This system consists of **four interconnected workflows**:

1. **OpenSea AI-Powered Insights via Telegram** (Main Supervisor)  
2. **OpenSea Analytics Agent Tool** (Market Trends & Collection Stats)  
3. **OpenSea Marketplace Agent Tool** (Live Listings, Offers, and Orders)  
4. **OpenSea NFT Agent Tool** (Metadata, Ownership & Payment Tokens)

These agents work **in sync** under the **Supervisor AI**, which determines the appropriate agent(s) to use based on user queries. Responses are structured and sent back via **Telegram** for real-time insights.

---

## üîó **System Architecture**

### **üîπ Core Workflow: OpenSea AI-Powered Insights via Telegram**
- Acts as the **brain and command center**.
- Receives queries from **Telegram Chat**.
- Determines which **agent(s)** should process the request.
- Aggregates and formats results.
- Sends structured responses back to the Telegram user.

### **üîπ Supporting Agent Tools**
Each **agent tool** is a separate n8n workflow with a specific function:

1Ô∏è‚É£ **OpenSea Analytics Agent** ‚Üí Retrieves **market trends, sales history, transaction data**.  
2Ô∏è‚É£ **OpenSea Marketplace Agent** ‚Üí Fetches **NFT listings, offers, best prices, and order details**.  
3Ô∏è‚É£ **OpenSea NFT Agent** ‚Üí Retrieves **NFT metadata, ownership records, traits, and payment token data**.

The **Supervisor AI (Telegram Workflow)** calls these agent workflows as needed.

---

## üõ† **Setup Instructions**

### **1Ô∏è‚É£ Setting Up the Main Supervisor (Telegram Workflow)**
1. **Create a Telegram Bot** using [BotFather](https://t.me/botfather).
2. **Copy the API Key** and connect it to n8n‚Äôs **Telegram Trigger Node**.
3. Set up the **Chat Message Received Node** to capture user queries.
4. Configure the **Session ID Node** to track conversation history.
5. Link the **AI Supervisor Brain (GPT-4o Mini)** to process messages.
6. Connect it to the **three agent tools** using **Tool Workflow Nodes**.
7. Send output back to Telegram using the **Telegram Node**.

‚úÖ **This setup enables Telegram interaction with all OpenSea agents.**

### **2Ô∏è‚É£ Configuring the OpenSea Agent Tools**
Each agent tool must be linked to the main workflow:

**A. OpenSea Analytics Agent**
- Retrieves NFT market trends & transaction history.
- Requires **collection slug, wallet address, or transaction filters**.

**B. OpenSea Marketplace Agent**
- Fetches NFT listings, offers, and orders.
- Requires **collection slug, token ID, or order hash**.

**C. OpenSea NFT Agent**
- Retrieves NFT metadata, traits, and ownership data.
- Requires **wallet address, contract address, or token ID**.

### **3Ô∏è‚É£ Connecting the Agents to the Main Workflow**
Each **Tool Workflow Node** inside the **Telegram Supervisor Workflow** must be configured to pass the query **to the correct agent tool**.

Example:
- User asks: **‚ÄúFind the cheapest listing for Bored Ape #1234‚Äù** ‚Üí **Marketplace Agent is activated**.
- User asks: **‚ÄúRetrieve all NFTs owned by 0xABC...‚Äù** ‚Üí **NFT Agent is activated**.
- User asks: **‚ÄúCompare last 3 months‚Äô sales volume of Azuki and Moonbirds‚Äù** ‚Üí **Analytics Agent is activated**.

---




--- Workflow: 2005_Telegram_Schedule_Monitor_Webhook.json ---
Name: MAIA - Health Check
Description: ## Step 1
Create a new google sheet where A1 is a title, and then list in column A all the urls you want to check.

--- Workflow: 2006_Filter_Manual_Automation_Webhook.json ---
Name: ProspectLens company research
Description: ## Company research via Google Sheets and ProspectLens

Get your API key:
https://apiroad.net/marketplace/apis/prospectlens

Copy Google Sheet template:
https://docs.google.com/spreadsheets/d/1S2S18hvfBoFsUgRYPyizH6uv7WwI218frvOqu2bV3wk/edit?gid=0#gid=0

--- Workflow: 2007_Webhook_Graphql_Automate_Webhook.json ---
Name: N/A
Description: ## Shopify API

This workflow uses GraphQL calls to the Shopify Admin API. In order to get a better understanding for the queries and mutations please check the API Docs.


[Shopify GraphQL API docs](https://shopify.dev/docs/api/admin-graphql)

To make it easy to build queries for the GraphQL API easy please check out the [GraphiQL App for the Admin API](https://shopify.dev/docs/apps/tools/graphiql-admin-api) from Shopify

--- Workflow: 2008_Code_Webhook_Automate_Webhook.json ---
Name: Automated Work Attendance with Location Triggers
Description: ## Check if the Worksheet Exists

--- Workflow: 2009_Stickynote_Automate_Webhook.json ---
Name: üåêü™õ AI Agent Chatbot with Jina.ai Webpage Scraper
Description: ## AI Agent Chatbot with Jina.ai Web Scraper
### https://jina.ai/


--- Workflow: 2010_Wait_Limit_Automation_Webhook.json ---
Name: üí°üåê Essential Multipage Website Scraper with Jina.ai
Description: ## Jina.ai Web Scraper
### No API Key Required


--- Workflow: 2011_Code_Manual_Import_Webhook.json ---
Name: Import multiple Manufacturers from Google Sheets to Shopware 6
Description: ## Settings
**Todo**: Configure your Shopware URL

--- Workflow: 2012_Code_Schedule_Create_Scheduled.json ---
Name: News Extraction
Description: Select only the newest news: todays date going back xy days

--- Workflow: 2013_Manual_Stickynote_Create_Webhook.json ---
Name: Generate 360¬∞ Virtual Try-on Videos for Clothing with Kling API
Description: ## Generate 360¬∞ Virtual Try-on Videos for Clothing with Kling API (unofficial)
This tool is designed for e-commerce platforms, fashion brands, content creators, and content influencers. By uploading model and clothing images and linking your PiAPI account, you can swiftly generate a realistic video of the model sporting the outfit with a 360¬∞ turn, offering an immersive viewing experience.

--- Workflow: 2014_Postgres_Webhook_Automation_Webhook.json ---
Name: Suspicious_login_detection
Description: ![greynoise](https://i.imgur.com/4vSwTkY.png)
## üö¶ Advanced Threat Prioritization with GreyNoise Data

In this section of the workflow, the integration of GreyNoise data, particularly in the `GreyNoise` node, plays a pivotal role in refining the threat prioritization process. This node's interaction with GreyNoise ensures that each alert is given an appropriate level of attention, based on the nature of the IP address involved.

-   **GreyNoise Analysis for Inbound Threats:** When the `GreyNoise` node identifies an IP address, it queries GreyNoise, considering both NOISE and RIOT datasets ([More here](https://docs.greynoise.io/docs/riot-data)). The response from this node guides the subsequent steps:
    -   **High Priority for Unknown IPs:** The `Check trust level` and `Check classification` nodes act here. If GreyNoise has no data on the IP (noise:false, riot:false), the priority is set high in the `üî¥ Priority: HIGH` node. This indicates a potential targeted attack, requiring immediate analyst review.
    -   **Low to Medium Priority for Common Business Services:** IPs identified as part of common business services (riot:true), depending on their trust level and operation status, are assigned low to medium priority by the `üü° Priority: MEDIUM` and `üü¢ Priority: LOW` nodes. This reflects a lower risk of malicious activity.
-   **Classification-Based Prioritization:** The workflow also considers the GreyNoise classification of the IP (malicious, benign, unknown) in the `Check classification` node:
    -   **Malicious IPs:** Medium-high priority, suggesting opportunistic but potentially harmful activity, set in the `üî¥ Priority: HIGH` node.
    -   **Benign IPs:** Low priority, as these are usually harmless scans by known actors, designated in the `üü¢ Priority: LOW` node.
    -   **Unknown IPs:** Low-medium priority, indicating possibly innocuous but unverified activity, managed by the `üü° Priority: MEDIUM` node.
-   **Additional Context for Outbound Threats:** For outbound connections, the workflow prioritizes alerts based on whether the IP is a known service provider or a known device scanning the internet, as interpreted by the `GreyNoise` node. High priority is assigned to outbound connections to scanning devices in the `üî¥ Priority: HIGH` node, indicating potentially unwanted behavior.


This approach, leveraging GreyNoise's advanced data analytics, showcases n8n's capability to deliver sophisticated cybersecurity solutions. By integrating this intelligent prioritization mechanism, the workflow ensures that your security team focuses on the most pressing threats first, enhancing overall security posture.

### Authentication - No Free Tier Available

To set your API key for GreyNoise, open the `GreyNoise` node, and add a new authentication credential. Choose `Generic Credential Type` then `Header Auth`. Lastly, under `Credential for Header Auth` set the name to `key` and value to your `api key`.

--- Workflow: 2015_Stickynote_Automation_Triggered.json ---
Name: Discord MCP Chat Agent
Description: ## Natural Language Input
You can call from another workflow, hit the chat endpoint, or even hit from another Discord bot if you wanted to! Any natural language command should work fine - let me know if you manage to break something and I will look at updating the template!

--- Workflow: 2016_Splitout_Noop_Automation_Webhook.json ---
Name: YouTube Comment Sentiment Analyzer
Description: 
# üöÄ YouTube Comment Sentiment Analyzer with Google Sheets & OpenAI

--- Workflow: 2017_Manual_Stickynote_Import_Webhook.json ---
Name: Import CSV from URL to Excel
Description: ## Convert CSV to Excel (.xlsx)
1. Click Execute Workflow to begin
2. Download the data from the Web
3. Import CSV binary data as a JSON
4. Convert JSON to .xlsx file

Source:
https://data.europa.eu/data/datasets/veranstaltungsplaetze-potsdam-potsdam?locale=en

--- Workflow: 2018_Telegram_Cal_Create_Webhook.json ---
Name: Meeting booked - to newsletter and CRM
Description: ## Define your parameters
- Find your telegram chat id to get notified in a private channel (bot must be added as admin)
- Create an account on [Beehiiv]() and get your api key
- Get your publication id from your newsletter which will be parsed in the "Add subscriber" url endpoint

--- Workflow: 2019_HTTP_Stickynote_Automate_Webhook.json ---
Name: Line Chatbot Handling AI Responses with Groq and Llama3
Description: ## Line AI Chatbot with Groq 
This workflow automates the process of handling messages from Line Messaging API by sending message to Groq as your AI assistant and reply back to you. In this workflow, you can see that there is no JSON error when sending long and complex message.

--- Workflow: 2020_Code_Noop_Create_Triggered.json ---
Name: Addon for Workflow Nodes Update Check Template
Description: ## Download the main workflow and connect it's output to this workflow
- Download this workflow and follow the belonging instructions: [https://n8n.io/workflows/2301-check-if-workflows-contain-build-in-nodes-that-are-not-of-the-latest-version/](https://n8n.io/workflows/2301-check-if-workflows-contain-build-in-nodes-that-are-not-of-the-latest-version/)
- Add an "Execute Workflow" node and configure it, so it calls this workflow.
  
![Image](https://i.imgur.com/y0vPhYz.png#full-width)

--- Workflow: 2021_Manual_GoogleSheets_Automation_Triggered.json ---
Name: ICP Company Scoring
Description: No description found in sticky notes.

--- Workflow: 2022_Manual_Extractfromfile_Update_Webhook.json ---
Name: Update Roles by Excel
Description: ## Authentication for Zammad

Create in the Node Find Zammad User by email a Header Auth Authentication

Use:

Name: Authorization
Value: Bearer - put here your zammad api token - 


--- Workflow: 2023_Stickynote_Create_Triggered.json ---
Name: Build Custom AI Agent with LangChain & Gemini (Self-Hosted)
Description: üëá **Prompt Engineering**
   - Define agent personality and conversation structure in the `Construct & Execute LLM Prompt` node's template variable  
   - ‚ö†Ô∏è Template must preserve `{chat_history}` and `{input}` placeholders for proper LangChain operation  

--- Workflow: 2024_Linkedin_Telegram_Automate_Webhook.json ---
Name: Linkedin Automation
Description: # üì¢ Auto-Post Medium Articles to LinkedIn with Telegram Alerts

This n8n workflow automates your LinkedIn posting by fetching articles from [medium.com](medium.com) twice a day (9:00 AM and 7:00 PM), ensuring consistent content sharing without manual effort.

To prevent duplicates, it stores posted article IDs in Airtable. It also sends a Telegram message after every successful post, so you stay updated.

---


--- Workflow: 2025_Splitout_Code_Automate_Webhook.json ---
Name: Clone n8n Workflows between Instances using n8n API
Description: ### Change the Destination Project by changing the Project Name

--- Workflow: 2026_Code_Manual_Automation_Webhook.json ---
Name: Use XMLRPC via HttpRequest-node to post on Wordpress.com
Description: ## Settings

--- Workflow: 2027_Stickynote_Executeworkflow_Automation_Webhook.json ---
Name: OpenSea Analytics Agent Tool
Description: # OpenSea Analytics Agent Tool (n8n Workflow) Guide

## üöÄ Workflow Overview
The **OpenSea Analytics Agent Tool** is an AI-powered NFT analytics system built using **n8n**. It integrates directly with **OpenSea's API** to fetch and analyze market data, collection stats, wallet transactions, and event logs. This tool is designed to provide real-time insights into the NFT ecosystem.

### üéØ **Key Features**:
- Retrieve **collection statistics** (volume, floor price, market cap, etc.).
- Track **NFT events** (sales, transfers, listings, bids, redemptions).
- Monitor **wallet transactions** (account-specific event tracking).
- Fetch **NFT-specific historical transactions** by smart contract and token ID.
- Ensure **API compliance**, preventing invalid queries and errors.

---

## üîó **Nodes & Functions**
Below is a breakdown of each node in the workflow and its function.

### **1Ô∏è‚É£ Analytics Agent Brain**
- **Type**: AI Language Model (GPT-4o Mini)
- **Purpose**: Processes API requests and interprets OpenSea analytics queries.

### **2Ô∏è‚É£ Analytics Agent Memory**
- **Type**: AI Memory Buffer
- **Purpose**: Stores session data to maintain context for multiple queries.

### **3Ô∏è‚É£ OpenSea Get Collection Stats**
- **Type**: API Request
- **Endpoint**: `/api/v2/collections/{collection_slug}/stats`
- **Function**: Fetches collection-wide statistics such as floor price, total volume, number of sales, and market cap.

### **4Ô∏è‚É£ OpenSea Get Events**
- **Type**: API Request
- **Endpoint**: `/api/v2/events`
- **Function**: Retrieves NFT-related events within a given timeframe, filtered by event type (sale, transfer, listing, etc.).

### **5Ô∏è‚É£ OpenSea Get Events by Account**
- **Type**: API Request
- **Endpoint**: `/api/v2/events/accounts/{address}`
- **Function**: Tracks all NFT events related to a specific wallet address.

### **6Ô∏è‚É£ OpenSea Get Events by Collection**
- **Type**: API Request
- **Endpoint**: `/api/v2/events/collection/{collection_slug}`
- **Function**: Fetches the latest events for a particular NFT collection.

### **7Ô∏è‚É£ OpenSea Get Events by NFT**
- **Type**: API Request
- **Endpoint**: `/api/v2/events/chain/{chain}/contract/{address}/nfts/{identifier}`
- **Function**: Retrieves all historical events for a single NFT based on blockchain, smart contract, and token ID.

---



--- Workflow: 2028_Discord_Hunter_Automate_Triggered.json ---
Name: My workflow
Description: make sure to add To address so you can receive the notifications

--- Workflow: 2029_Wait_Code_Automation_Triggered.json ---
Name: Merge multiple runs into one
Description: No description found in sticky notes.

--- Workflow: 2030_Whatsapp_Respondtowebhook_Automate_Webhook.json ---
Name: WhatsApp starter workflow
Description: ## Verify Webhook
* Go to your [Meta for Developers App page](https://developers.facebook.com/apps/), navigate to the App settings
* Add a **production webhook URL** as a new Callback URL
* *Verify* webhook receives a GET Request and sends back a verification code


--- Workflow: 2031_Googletasks_Gmail_Create_Triggered.json ---
Name: üì¶ New Email ‚ûî Create Google Task
Description: ## üì¶ üì¶ New Email ‚Üí Create Todo in Google Tasks
Create Todo in Google Tasks whenever receives new email with "To Do" label.

--- Workflow: 2032_Manual_HTTP_Send_Webhook.json ---
Name: Perform an email search with Icypeas (single)
Description: ## Perform an email search with Icypeas (single)

This workflow demonstrates how to perform an email search using Icypeas. Visit https://icypeas.com to create your account.




--- Workflow: 2033_Code_Extractfromfile_Automate_Webhook.json ---
Name: AI-Powered WhatsApp Chatbot for Text, Voice, Images & PDFs
Description: ## Text

--- Workflow: 2034_Code_Webhook_Automate_Webhook.json ---
Name: OIDC client workflow
Description: In this set, you have to retrieve from your identity provider : 
- auth url
- token url
- userinfo url
- the client id you created for this flow
- scopes to use, at least "openid" scope
if you do not want to use PKCE, you have to fill : 
- client_secret
- redirect_uri (which is the webhook uri)

--- Workflow: 2035_Manual_GoogleSheets_Automation_Webhook.json ---
Name: n8n-Ëæ≤Áî¢ÂìÅ
Description: No description found in sticky notes.

--- Workflow: 2036_Readbinaryfiles_Filter_Import_Triggered.json ---
Name: Import multiple CSV to GoogleSheet
Description: No description found in sticky notes.

--- Workflow: 2037_Manual_N8N_Automation_Triggered.json ---
Name: v1 helper - Find params with affected expressions
Description: ## v1 Helper

‚ÑπÔ∏è This workflow is to be run **after upgrading to n8n v1**.

This workflow returns all locations where a node in an active workflow contains a parameter using an **expression extension affected by [v1 changes](https://github.com/n8n-io/n8n/pull/6435)**. For every location, please check that the workflow still behaves as intended.

--- Workflow: 2038_Telegram_Extractfromfile_Automate_Webhook.json ---
Name: HR & IT Helpdesk Chatbot with Audio Transcription
Description: ## 1. Download & Extract Internal Policy Documents
[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)

Begin by importing the PDF documents that contain your internal policies and FAQs‚Äîthese will become the knowledge base for your Internal Helpdesk Assistant. For example, you can store a company handbook or IT/HR policy PDFs on a shared drive or cloud storage and reference a direct download link here.

In this demonstration, we'll use the **HTTP Request node** to fetch the PDF file from a given URL and then parse its text contents using the **Extract from File node**. Once extracted, these text chunks will be used to build the vector store that underpins your helpdesk chatbot‚Äôs responses.

[Example Employee Handbook with Policies](https://s3.amazonaws.com/scschoolfiles/656/employee_handbook_print_1.pdf)

--- Workflow: 2039_Stickynote_Webhook_Automation_Webhook.json ---
Name: Travel AssistantAgent
Description: ## AI Traveling Agent Powered by MongoDB Atlas for Memory and vector search.

**Atlas MongoDB Memory Node**

- The memory node allows the agent to persist and retrieve conversation based on threads in the database. It uses MongoDB felxible store capabilities to allow different type of threads and messages (Image, audio, video etc.) to be stored easily and effectivley 


**Atlas MongoDB Vector Store Node**

- Atlas Vector Store tool allows the agent to get up to date points of interest from our vector store database populated and embedded with OpenAI Embeddings.


### You will need to:
1. Setup your Google API Credentials for the Gemini LLM
2. Setup your OpenAI Credentials for the OpenAI embedding nodes.
3. [MongoDB Atlas project and Cluster](https://www.mongodb.com/docs/atlas/tutorial/create-new-cluster/). Get a hold of the connection string and make sure to have your IP Access list enabled (for ease of testing try `0.0.0.0/0` access.
4. Setup you MongoDB Credentials account with the correct connection string and database name.
5. **Vector Search Tool** - uses Atlas Vector Search index you will create on your database for the `points_of_interest` collection:

```
// index name : "vector_index"
// If you change an embedding provider make sure the numDimensions correspond to the model.
{
  "fields": [
    {
      "type": "vector",
      "path": "embedding",
      "numDimensions": 1536,
      "similarity": "cosine"
    }
  ]
}
```

Once all of that is configured you will need to send the loading webhook with some data points (see example).

This should create vectorised data in  `points_of_interest` collection.

Once you have data points there try to ask the Agent questions about the data points and test the response. Eg. "Where should I go for a romantic getaway?"

**Additional Resources**
- [MongoDB Atlas Vector Search](https://www.mongodb.com/docs/atlas/atlas-vector-search/tutorials/vector-search-quick-start/?utm=n8n.io)
- [n8n Atlas Vector Search docs](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoremongodbatlas?utm=n8n.io)

--- Workflow: 2040_Telegram_Splitout_Automation_Webhook.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 2041_Splitout_Manual_Automation_Webhook.json ---
Name: Vision-Based AI Agent Scraper - with Google Sheets, ScrapingBee, and Gemini
Description: ## Trigger
The default trigger is **When clicking ‚ÄòTest workflow‚Äô**, meaning the workflow will **need to be triggered manually**. 

You can replace this by selecting a **trigger of your choice**.


--- Workflow: 2042_Wait_Webhook_Automation_Webhook.json ---
Name: FLUX-fill standalone
Description: # Deliver the editor with links to the images

--- Workflow: 2043_HTTP_Stickynote_Automation_Webhook.json ---
Name: üêãDeepSeek V3 Chat & R1 Reasoning Quick Start
Description: ## DeepSeek using HTTP Request
### DeepSeek Reasoner R1
https://api-docs.deepseek.com/
Raw Body

--- Workflow: 2044_Telegram_Googledocs_Automation_Webhook.json ---
Name: üêãü§ñ DeepSeek AI Agent + Telegram + LONG TERM Memory üß†
Description: # Receive Telegram Message with Webhook

--- Workflow: 2045_Schedule_HTTP_Create_Scheduled.json ---
Name: N/A
Description: # Financial News Recap Workflow

This workflow automates the daily email delivery of curated financial news to a designated recipient at 7:00 AM. It extracts relevant financial news articles, structures the content, and sends it in a concise summary format via Microsoft Outlook.

### Workflow Steps
1. **Schedule Trigger** 
 Sets the workflow to activate daily at 7:00 AM.
2. **Fetch Financial News** 
 Retrieves financial news content from [ft.com](https://www.ft.com/) using an HTTP Request node.
3. **Extract News Headlines and Sections** 
 Using CSS selectors, this node parses specific sections of the HTML page to gather key headlines and sections:
 - Headline #1, Headline #2
 - Editor's Picks
 - etc.
4. **Aggregate News Content** 
 Combines all extracted news sections into a single data set, organizing content under relevant categories.
5. **AI Agent for Summarization** 
 A Google Gemini Chat Model generates a structured summary in HTML format, optimized to provide investors with a clear market overview.
6. **Email Dispatch** 
 Sends the summarized content via Microsoft Outlook with a subject "Financial news from today," formatted in HTML for clarity and readability.


--- Workflow: 2046_Code_Webhook_Automation_Webhook.json ---
Name: Docsify example
Description: ## Main Docsify webhook
In response, n8n serves the main html page with the [Docsify JS library](https://docsify.js.org/)

--- Workflow: 2047_Automation.json ---
Name: N/A
Description: No description found in sticky notes.

--- Workflow: 2048_Stickynote_Automation_Triggered.json ---
Name: üó®Ô∏èOllama Chat
Description: # ü¶ô Ollama Chat Workflow

A simple N8N workflow that integrates Ollama LLM for chat message processing and returns a structured JSON object.

## Overview
This workflow creates a chat interface that processes messages using the Llama 3.2 model through Ollama. When a chat message is received, it gets processed through a basic LLM chain and returns a response.

## Components
- **Trigger Node**
- **Processing Node**
- **Model Node**
- **JSON to Object Node**
- **Structured Response Node**
- **Error Response Node**

## Workflow Structure
1. The chat trigger node receives incoming messages
2. Messages are passed to the Basic LLM Chain
3. The Ollama Model processes the input using Llama 3.2
4. Responses are returned through the chain

## Prerequisites
- N8N installation
- Ollama setup with Llama 3.2 model
- Valid Ollama API credentials

## Configuration
1. Set up the Ollama API credentials in N8N
2. Ensure the Llama 3.2 model is available in your Ollama installation



--- Workflow: 2049_Limit_Splitout_Automate_Webhook.json ---
Name: üî•üìàü§ñ AI Agent for n8n Creators Leaderboard - Find Popular Workflows
Description: ## AI Agent for n8n Creator Leaderboard Stats
https://github.com/teds-tech-talks/n8n-community-leaderboard

--- Workflow: 2050_Datetime_Code_Automation_Webhook.json ---
Name: Testing Mulitple Local LLM with LM Studio
Description: ## üß†Text Analysis
### Readability Score Ranges:
When testing model responses, readability scores can range across different levels. Here‚Äôs a breakdown:

- **90‚Äì100**: Very easy to read (5th grade or below)
- **80‚Äì89**: Easy to read (6th grade)
- **70‚Äì79**: Fairly easy to read (7th grade)
- **60‚Äì69**: Standard (8th to 9th grade)
- **50‚Äì59**: Fairly difficult (10th to 12th grade)
- **30‚Äì49**: Difficult (College)
- **0‚Äì29**: Very difficult (College graduate)
- **Below 0**: Extremely difficult (Post-graduate level)


--- Workflow: 2051_Telegram_Webhook_Automation_Webhook.json ---
Name: ü§ñ Telegram Messaging Agent for Text/Audio/Images
Description: # Receive Telegram Message with Webhook

--- Workflow: 2052_Telegram_Splitout_Automation_Scheduled.json ---
Name: ü§ñüßë‚Äçüíª AI Agent for Top n8n Creators Leaderboard Reporting
Description: ## AI Agent for n8n Creator Leaderboard Stats
https://github.com/teds-tech-talks/n8n-community-leaderboard

--- Workflow: 2053_Telegram_Googledocs_Automate_Triggered.json ---
Name: ü§ñüß† AI Agent Chatbot + LONG TERM Memory + Note Storage + Telegram
Description: ## Retrieve Long Term Memories
Google Docs

--- Workflow: generate-collaborative-handbooks-with-gpt4o-multi-agent-orchestration-human-review.json ---
Name: Pyragogy AI Village - Orchestrazione Master (Architettura Profonda V2)
Description: No description found in sticky notes.

